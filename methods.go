package elm // generated by gen/methods.go

//#include <Elementary.h>
import "C"
import (
  "unsafe"
)

func (self *Icon) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Icon) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Icon) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Icon) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Icon) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Icon) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Icon) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Icon) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Icon) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Icon) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Icon) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Icon) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Icon) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Icon) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Icon) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Icon) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Icon) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Icon) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Icon) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Icon) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Icon) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Icon) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Icon) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Icon) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Icon) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Icon) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Icon) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Icon) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Icon) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Icon) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Icon) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Icon) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Icon) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Icon) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Icon) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Icon) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Icon) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Icon) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Icon) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Icon) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Icon) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Icon) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Icon) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Icon) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Icon) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Icon) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Icon) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Icon) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Icon) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Icon) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Icon) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Icon) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Icon) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Icon) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Icon) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Icon) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Icon) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Icon) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Icon) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Icon) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Icon) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Icon) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Icon) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Icon) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Icon) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Icon) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Icon) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Icon) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Icon) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Icon) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Icon) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Icon) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Icon) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Icon) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Icon) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Icon) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Icon) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Icon) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Icon) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Icon) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Icon) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Icon) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Icon) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Icon) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Icon) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Icon) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Icon) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Icon) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Icon) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Icon) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Icon) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Icon) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Icon) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Icon) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Icon) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Icon) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Icon) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Icon) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Icon) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Icon) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Icon) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Icon) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Icon) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Icon) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Icon) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Icon) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Icon) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Icon) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Icon) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Icon) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Icon) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Icon) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Icon) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Icon) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Icon) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Icon) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Icon) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Icon) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Icon) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Icon) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Icon) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Icon) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Icon) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Icon) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Icon) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Icon) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Icon) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Icon) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Icon) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Icon) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Icon) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Icon) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Icon) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Icon) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Icon) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Icon) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Icon) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Icon) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Icon) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Icon) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Icon) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Icon) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Icon) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Icon) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Icon) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Icon) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Icon) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Icon) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Icon) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Icon) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Icon) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Icon) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Icon) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Icon) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Icon) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Icon) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Icon) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Icon) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Icon) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Icon) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Icon) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Icon) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Icon) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Icon) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Icon) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Icon) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Icon) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Icon) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Icon) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Icon) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Icon) Add() (*EvasObject) {
  _cgo_return_ := C.elm_icon_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Icon) ThumbSet(file string, group string) () {
  _c_file := C.CString(file)
  _c_group := C.CString(group)
  C.elm_icon_thumb_set(self.obj, _c_file, _c_group)
}

func (self *Icon) StandardSet(name string) (bool) {
  _c_name := C.CString(name)
  _cgo_return_ := C.elm_icon_standard_set(self.obj, _c_name)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Icon) OrderLookupSet(order C.Elm_Icon_Lookup_Order) () {
  C.elm_icon_order_lookup_set(self.obj, order)
}

func (self *Scroller) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Scroller) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Scroller) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Scroller) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Scroller) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Scroller) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Scroller) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Scroller) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Scroller) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Scroller) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Scroller) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Scroller) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Scroller) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Scroller) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Scroller) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Scroller) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Scroller) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Scroller) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Scroller) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Scroller) EVASPropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Scroller) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Scroller) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Scroller) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Scroller) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Scroller) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Scroller) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Scroller) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Scroller) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Scroller) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Scroller) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Scroller) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Scroller) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Scroller) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Scroller) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Scroller) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Scroller) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Scroller) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Scroller) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Scroller) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Scroller) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Scroller) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Scroller) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Scroller) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Scroller) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Scroller) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Scroller) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Scroller) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Scroller) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Scroller) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Scroller) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Scroller) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Scroller) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Scroller) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Scroller) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Scroller) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Scroller) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Scroller) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Scroller) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Scroller) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Scroller) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Scroller) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Scroller) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Scroller) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Scroller) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Scroller) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Scroller) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Scroller) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Scroller) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Scroller) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Scroller) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Scroller) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Scroller) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Scroller) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Scroller) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Scroller) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Scroller) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Scroller) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Scroller) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Scroller) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Scroller) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Scroller) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Scroller) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Scroller) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Scroller) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Scroller) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Scroller) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Scroller) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Scroller) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Scroller) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Scroller) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Scroller) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Scroller) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Scroller) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Scroller) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Scroller) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Scroller) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Scroller) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Scroller) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Scroller) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Scroller) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Scroller) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Scroller) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Scroller) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Scroller) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Scroller) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Scroller) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Scroller) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Scroller) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Scroller) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Scroller) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Scroller) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Scroller) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Scroller) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Scroller) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Scroller) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Scroller) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Scroller) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Scroller) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Scroller) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Scroller) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Scroller) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Scroller) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Scroller) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Scroller) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Scroller) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Scroller) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Scroller) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Scroller) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Scroller) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Scroller) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Scroller) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Scroller) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Scroller) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Scroller) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Scroller) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Scroller) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Scroller) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Scroller) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Scroller) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Scroller) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Scroller) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Scroller) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Scroller) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Scroller) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Scroller) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Scroller) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Scroller) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Scroller) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Scroller) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Scroller) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Scroller) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Scroller) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Scroller) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Scroller) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Scroller) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Scroller) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Scroller) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Scroller) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Scroller) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Scroller) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Scroller) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Scroller) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Scroller) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Scroller) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Scroller) Add() (*EvasObject) {
  _cgo_return_ := C.elm_scroller_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Scroller) ContentMinLimit(w bool, h bool) () {
  _c_w := (C.Eina_Bool)(0)
  if w { _c_w = (C.Eina_Bool)(1) }
  _c_h := (C.Eina_Bool)(0)
  if h { _c_h = (C.Eina_Bool)(1) }
  C.elm_scroller_content_min_limit(self.obj, _c_w, _c_h)
}

func (self *Scroller) RegionShow(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_scroller_region_show(self.obj, x, y, w, h)
}

func (self *Scroller) PolicySet(policy_h C.Elm_Scroller_Policy, policy_v C.Elm_Scroller_Policy) () {
  C.elm_scroller_policy_set(self.obj, policy_h, policy_v)
}

func (self *Scroller) BounceSet(h_bounce bool, v_bounce bool) () {
  _c_h_bounce := (C.Eina_Bool)(0)
  if h_bounce { _c_h_bounce = (C.Eina_Bool)(1) }
  _c_v_bounce := (C.Eina_Bool)(0)
  if v_bounce { _c_v_bounce = (C.Eina_Bool)(1) }
  C.elm_scroller_bounce_set(self.obj, _c_h_bounce, _c_v_bounce)
}

func (self *Scroller) PageRelativeSet(h_pagerel float64, v_pagerel float64) () {
  _c_h_pagerel := C.double(h_pagerel)
  _c_v_pagerel := C.double(v_pagerel)
  C.elm_scroller_page_relative_set(self.obj, _c_h_pagerel, _c_v_pagerel)
}

func (self *Scroller) PageSizeSet(h_pagesize C.Evas_Coord, v_pagesize C.Evas_Coord) () {
  C.elm_scroller_page_size_set(self.obj, h_pagesize, v_pagesize)
}

func (self *Scroller) PageShow(h_pagenumber int, v_pagenumber int) () {
  _c_h_pagenumber := C.int(h_pagenumber)
  _c_v_pagenumber := C.int(v_pagenumber)
  C.elm_scroller_page_show(self.obj, _c_h_pagenumber, _c_v_pagenumber)
}

func (self *Scroller) PageBringIn(h_pagenumber int, v_pagenumber int) () {
  _c_h_pagenumber := C.int(h_pagenumber)
  _c_v_pagenumber := C.int(v_pagenumber)
  C.elm_scroller_page_bring_in(self.obj, _c_h_pagenumber, _c_v_pagenumber)
}

func (self *Scroller) RegionBringIn(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_scroller_region_bring_in(self.obj, x, y, w, h)
}

func (self *Scroller) PropagateEventsSet(propagation bool) () {
  _c_propagation := (C.Eina_Bool)(0)
  if propagation { _c_propagation = (C.Eina_Bool)(1) }
  C.elm_scroller_propagate_events_set(self.obj, _c_propagation)
}

func (self *Scroller) GravitySet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.elm_scroller_gravity_set(self.obj, _c_x, _c_y)
}

func (self *Entry) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Entry) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Entry) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Entry) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Entry) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Entry) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Entry) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Entry) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Entry) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Entry) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Entry) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Entry) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Entry) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Entry) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Entry) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Entry) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Entry) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Entry) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Entry) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Entry) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Entry) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Entry) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Entry) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Entry) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Entry) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Entry) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Entry) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Entry) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Entry) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Entry) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Entry) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Entry) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Entry) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Entry) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Entry) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Entry) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Entry) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Entry) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Entry) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Entry) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Entry) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Entry) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Entry) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Entry) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Entry) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Entry) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Entry) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Entry) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Entry) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Entry) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Entry) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Entry) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Entry) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Entry) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Entry) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Entry) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Entry) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Entry) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Entry) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Entry) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Entry) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Entry) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Entry) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Entry) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Entry) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Entry) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Entry) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Entry) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Entry) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Entry) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Entry) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Entry) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Entry) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Entry) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Entry) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Entry) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Entry) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Entry) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Entry) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Entry) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Entry) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Entry) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Entry) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Entry) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Entry) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Entry) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Entry) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Entry) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Entry) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Entry) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Entry) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Entry) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Entry) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Entry) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Entry) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Entry) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Entry) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Entry) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Entry) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Entry) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Entry) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Entry) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Entry) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Entry) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Entry) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Entry) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Entry) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Entry) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Entry) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Entry) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Entry) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Entry) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Entry) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Entry) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Entry) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Entry) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Entry) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Entry) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Entry) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Entry) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Entry) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Entry) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Entry) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Entry) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Entry) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Entry) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Entry) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Entry) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Entry) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Entry) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Entry) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Entry) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Entry) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Entry) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Entry) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Entry) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Entry) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Entry) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Entry) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Entry) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Entry) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Entry) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Entry) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Entry) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Entry) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Entry) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Entry) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Entry) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Entry) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Entry) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Entry) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Entry) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Entry) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Entry) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Entry) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Entry) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Entry) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Entry) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Entry) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Entry) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Entry) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Entry) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Entry) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Entry) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Entry) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Entry) Add() (*EvasObject) {
  _cgo_return_ := C.elm_entry_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) TextStyleUserPush(style string) () {
  _c_style := C.CString(style)
  C.elm_entry_text_style_user_push(self.obj, _c_style)
}

func (self *Entry) TextStyleUserPop() () {
  C.elm_entry_text_style_user_pop(self.obj)
}

func (self *Entry) SingleLineSet(single_line bool) () {
  _c_single_line := (C.Eina_Bool)(0)
  if single_line { _c_single_line = (C.Eina_Bool)(1) }
  C.elm_entry_single_line_set(self.obj, _c_single_line)
}

func (self *Entry) PasswordSet(password bool) () {
  _c_password := (C.Eina_Bool)(0)
  if password { _c_password = (C.Eina_Bool)(1) }
  C.elm_entry_password_set(self.obj, _c_password)
}

func (self *Entry) EntrySet(entry string) () {
  _c_entry := C.CString(entry)
  C.elm_entry_entry_set(self.obj, _c_entry)
}

func (self *Entry) EntryAppend(entry string) () {
  _c_entry := C.CString(entry)
  C.elm_entry_entry_append(self.obj, _c_entry)
}

func (self *Entry) TextblockGet() (*EvasObject) {
  _cgo_return_ := C.elm_entry_textblock_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Entry) CalcForce() () {
  C.elm_entry_calc_force(self.obj)
}

func (self *Entry) EntryInsert(entry string) () {
  _c_entry := C.CString(entry)
  C.elm_entry_entry_insert(self.obj, _c_entry)
}

func (self *Entry) LineWrapSet(wrap C.Elm_Wrap_Type) () {
  C.elm_entry_line_wrap_set(self.obj, wrap)
}

func (self *Entry) EditableSet(editable bool) () {
  _c_editable := (C.Eina_Bool)(0)
  if editable { _c_editable = (C.Eina_Bool)(1) }
  C.elm_entry_editable_set(self.obj, _c_editable)
}

func (self *Entry) SelectNone() () {
  C.elm_entry_select_none(self.obj)
}

func (self *Entry) SelectAll() () {
  C.elm_entry_select_all(self.obj)
}

func (self *Entry) CursorNext() (bool) {
  _cgo_return_ := C.elm_entry_cursor_next(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) CursorPrev() (bool) {
  _cgo_return_ := C.elm_entry_cursor_prev(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) CursorUp() (bool) {
  _cgo_return_ := C.elm_entry_cursor_up(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) CursorDown() (bool) {
  _cgo_return_ := C.elm_entry_cursor_down(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) CursorBeginSet() () {
  C.elm_entry_cursor_begin_set(self.obj)
}

func (self *Entry) CursorEndSet() () {
  C.elm_entry_cursor_end_set(self.obj)
}

func (self *Entry) CursorLineBeginSet() () {
  C.elm_entry_cursor_line_begin_set(self.obj)
}

func (self *Entry) CursorLineEndSet() () {
  C.elm_entry_cursor_line_end_set(self.obj)
}

func (self *Entry) CursorSelectionBegin() () {
  C.elm_entry_cursor_selection_begin(self.obj)
}

func (self *Entry) CursorSelectionEnd() () {
  C.elm_entry_cursor_selection_end(self.obj)
}

func (self *Entry) CursorPosSet(pos int) () {
  _c_pos := C.int(pos)
  C.elm_entry_cursor_pos_set(self.obj, _c_pos)
}

func (self *Entry) SelectionCut() () {
  C.elm_entry_selection_cut(self.obj)
}

func (self *Entry) SelectionCopy() () {
  C.elm_entry_selection_copy(self.obj)
}

func (self *Entry) SelectionPaste() () {
  C.elm_entry_selection_paste(self.obj)
}

func (self *Entry) ContextMenuClear() () {
  C.elm_entry_context_menu_clear(self.obj)
}

func (self *Entry) ContextMenuDisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_entry_context_menu_disabled_set(self.obj, _c_disabled)
}

func (self *Entry) FileSet(file string, format C.Elm_Text_Format) (bool) {
  _c_file := C.CString(file)
  _cgo_return_ := C.elm_entry_file_set(self.obj, _c_file, format)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Entry) FileSave() () {
  C.elm_entry_file_save(self.obj)
}

func (self *Entry) AutosaveSet(autosave bool) () {
  _c_autosave := (C.Eina_Bool)(0)
  if autosave { _c_autosave = (C.Eina_Bool)(1) }
  C.elm_entry_autosave_set(self.obj, _c_autosave)
}

func (self *Entry) ScrollableSet(scroll bool) () {
  _c_scroll := (C.Eina_Bool)(0)
  if scroll { _c_scroll = (C.Eina_Bool)(1) }
  C.elm_entry_scrollable_set(self.obj, _c_scroll)
}

func (self *Entry) IconVisibleSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.elm_entry_icon_visible_set(self.obj, _c_setting)
}

func (self *Entry) EndVisibleSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.elm_entry_end_visible_set(self.obj, _c_setting)
}

func (self *Entry) ScrollbarPolicySet(h C.Elm_Scroller_Policy, v C.Elm_Scroller_Policy) () {
  C.elm_entry_scrollbar_policy_set(self.obj, h, v)
}

func (self *Entry) BounceSet(h_bounce bool, v_bounce bool) () {
  _c_h_bounce := (C.Eina_Bool)(0)
  if h_bounce { _c_h_bounce = (C.Eina_Bool)(1) }
  _c_v_bounce := (C.Eina_Bool)(0)
  if v_bounce { _c_v_bounce = (C.Eina_Bool)(1) }
  C.elm_entry_bounce_set(self.obj, _c_h_bounce, _c_v_bounce)
}

func (self *Entry) InputPanelLayoutSet(layout C.Elm_Input_Panel_Layout) () {
  C.elm_entry_input_panel_layout_set(self.obj, layout)
}

func (self *Entry) AutocapitalTypeSet(autocapital_type C.Elm_Autocapital_Type) () {
  C.elm_entry_autocapital_type_set(self.obj, autocapital_type)
}

func (self *Entry) InputPanelEnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_entry_input_panel_enabled_set(self.obj, _c_enabled)
}

func (self *Entry) InputPanelShow() () {
  C.elm_entry_input_panel_show(self.obj)
}

func (self *Entry) InputPanelHide() () {
  C.elm_entry_input_panel_hide(self.obj)
}

func (self *Entry) InputPanelLanguageSet(lang C.Elm_Input_Panel_Lang) () {
  C.elm_entry_input_panel_language_set(self.obj, lang)
}

func (self *Entry) InputPanelImdataSet(data unsafe.Pointer, len int) () {
  _c_len := C.int(len)
  C.elm_entry_input_panel_imdata_set(self.obj, data, _c_len)
}

func (self *Entry) InputPanelReturnKeyTypeSet(return_key_type C.Elm_Input_Panel_Return_Key_Type) () {
  C.elm_entry_input_panel_return_key_type_set(self.obj, return_key_type)
}

func (self *Entry) InputPanelReturnKeyDisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_entry_input_panel_return_key_disabled_set(self.obj, _c_disabled)
}

func (self *Entry) InputPanelReturnKeyAutoenabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_entry_input_panel_return_key_autoenabled_set(self.obj, _c_enabled)
}

func (self *Entry) ImfContextReset() () {
  C.elm_entry_imf_context_reset(self.obj)
}

func (self *Entry) PredictionAllowSet(prediction bool) () {
  _c_prediction := (C.Eina_Bool)(0)
  if prediction { _c_prediction = (C.Eina_Bool)(1) }
  C.elm_entry_prediction_allow_set(self.obj, _c_prediction)
}

func (self *Entry) ImfContextGet() (unsafe.Pointer) {
  _cgo_return_ := C.elm_entry_imf_context_get(self.obj)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Entry) CnpModeSet(cnp_mode C.Elm_Cnp_Mode) () {
  C.elm_entry_cnp_mode_set(self.obj, cnp_mode)
}

func (self *Entry) AnchorHoverParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_entry_anchor_hover_parent_set(self.obj, _c_parent)
}

func (self *Entry) AnchorHoverStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_entry_anchor_hover_style_set(self.obj, _c_style)
}

func (self *Entry) AnchorHoverEnd() () {
  C.elm_entry_anchor_hover_end(self.obj)
}

func (self *List) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *List) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *List) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *List) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *List) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *List) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *List) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *List) Del() () {
  C.evas_object_del(self.obj)
}

func (self *List) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *List) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *List) Show() () {
  C.evas_object_show(self.obj)
}

func (self *List) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *List) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *List) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *List) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *List) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *List) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *List) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *List) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *List) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *List) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *List) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *List) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *List) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *List) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *List) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *List) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *List) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *List) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *List) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *List) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *List) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *List) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *List) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *List) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *List) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *List) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *List) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *List) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *List) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *List) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *List) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *List) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *List) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *List) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *List) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *List) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *List) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *List) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *List) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *List) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *List) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *List) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *List) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *List) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *List) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *List) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *List) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *List) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *List) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *List) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *List) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *List) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *List) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *List) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *List) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *List) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *List) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *List) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *List) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *List) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *List) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *List) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *List) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *List) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *List) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *List) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *List) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *List) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *List) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *List) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *List) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *List) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *List) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *List) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *List) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *List) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *List) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *List) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *List) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *List) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *List) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *List) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *List) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *List) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *List) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *List) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *List) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *List) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *List) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *List) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *List) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *List) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *List) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *List) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *List) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *List) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *List) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *List) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *List) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *List) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *List) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *List) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *List) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *List) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *List) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *List) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *List) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *List) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *List) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *List) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *List) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *List) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *List) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *List) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *List) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *List) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *List) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *List) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *List) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *List) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *List) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *List) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *List) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *List) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *List) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *List) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *List) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *List) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *List) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *List) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *List) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *List) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *List) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *List) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *List) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *List) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *List) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *List) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *List) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *List) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *List) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *List) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *List) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *List) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *List) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *List) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *List) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *List) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *List) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *List) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *List) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *List) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *List) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *List) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *List) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *List) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *List) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *List) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *List) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *List) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *List) Add() (*EvasObject) {
  _cgo_return_ := C.elm_list_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *List) Go() () {
  C.elm_list_go(self.obj)
}

func (self *List) MultiSelectSet(multi bool) () {
  _c_multi := (C.Eina_Bool)(0)
  if multi { _c_multi = (C.Eina_Bool)(1) }
  C.elm_list_multi_select_set(self.obj, _c_multi)
}

func (self *List) ModeSet(mode C.Elm_List_Mode) () {
  C.elm_list_mode_set(self.obj, mode)
}

func (self *List) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_list_horizontal_set(self.obj, _c_horizontal)
}

func (self *List) SelectModeSet(mode C.Elm_Object_Select_Mode) () {
  C.elm_list_select_mode_set(self.obj, mode)
}

func (self *List) Clear() () {
  C.elm_list_clear(self.obj)
}

func (self *Ctxpopup) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Ctxpopup) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Ctxpopup) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Ctxpopup) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Ctxpopup) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Ctxpopup) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Ctxpopup) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Ctxpopup) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Ctxpopup) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Ctxpopup) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Ctxpopup) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Ctxpopup) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Ctxpopup) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Ctxpopup) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Ctxpopup) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Ctxpopup) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Ctxpopup) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Ctxpopup) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Ctxpopup) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Ctxpopup) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Ctxpopup) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Ctxpopup) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Ctxpopup) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Ctxpopup) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Ctxpopup) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Ctxpopup) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Ctxpopup) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Ctxpopup) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Ctxpopup) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Ctxpopup) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Ctxpopup) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Ctxpopup) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Ctxpopup) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Ctxpopup) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Ctxpopup) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Ctxpopup) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Ctxpopup) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Ctxpopup) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Ctxpopup) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Ctxpopup) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Ctxpopup) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Ctxpopup) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Ctxpopup) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Ctxpopup) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Ctxpopup) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Ctxpopup) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Ctxpopup) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Ctxpopup) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Ctxpopup) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Ctxpopup) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Ctxpopup) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Ctxpopup) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Ctxpopup) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Ctxpopup) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Ctxpopup) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Ctxpopup) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Ctxpopup) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Ctxpopup) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Ctxpopup) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Ctxpopup) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Ctxpopup) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Ctxpopup) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Ctxpopup) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Ctxpopup) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Ctxpopup) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Ctxpopup) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Ctxpopup) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Ctxpopup) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Ctxpopup) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Ctxpopup) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Ctxpopup) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Ctxpopup) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Ctxpopup) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Ctxpopup) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Ctxpopup) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Ctxpopup) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Ctxpopup) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Ctxpopup) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Ctxpopup) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Ctxpopup) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Ctxpopup) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Ctxpopup) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Ctxpopup) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Ctxpopup) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Ctxpopup) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Ctxpopup) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Ctxpopup) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Ctxpopup) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Ctxpopup) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Ctxpopup) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Ctxpopup) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Ctxpopup) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Ctxpopup) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Ctxpopup) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Ctxpopup) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Ctxpopup) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Ctxpopup) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Ctxpopup) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Ctxpopup) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Ctxpopup) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Ctxpopup) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Ctxpopup) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Ctxpopup) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Ctxpopup) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Ctxpopup) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Ctxpopup) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Ctxpopup) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Ctxpopup) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Ctxpopup) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Ctxpopup) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Ctxpopup) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Ctxpopup) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Ctxpopup) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Ctxpopup) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Ctxpopup) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Ctxpopup) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Ctxpopup) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Ctxpopup) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Ctxpopup) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Ctxpopup) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Ctxpopup) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Ctxpopup) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Ctxpopup) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Ctxpopup) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Ctxpopup) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Ctxpopup) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Ctxpopup) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Ctxpopup) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Ctxpopup) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Ctxpopup) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Ctxpopup) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Ctxpopup) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Ctxpopup) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Ctxpopup) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Ctxpopup) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Ctxpopup) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Ctxpopup) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Ctxpopup) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Ctxpopup) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Ctxpopup) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Ctxpopup) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Ctxpopup) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Ctxpopup) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Ctxpopup) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Ctxpopup) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Ctxpopup) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Ctxpopup) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Ctxpopup) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Ctxpopup) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Ctxpopup) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Ctxpopup) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Ctxpopup) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Ctxpopup) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Ctxpopup) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Ctxpopup) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Ctxpopup) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Ctxpopup) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Ctxpopup) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Ctxpopup) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Ctxpopup) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Ctxpopup) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Ctxpopup) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Ctxpopup) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Ctxpopup) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Ctxpopup) Add() (*EvasObject) {
  _cgo_return_ := C.elm_ctxpopup_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Ctxpopup) HoverParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_ctxpopup_hover_parent_set(self.obj, _c_parent)
}

func (self *Ctxpopup) Clear() () {
  C.elm_ctxpopup_clear(self.obj)
}

func (self *Ctxpopup) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_ctxpopup_horizontal_set(self.obj, _c_horizontal)
}

func (self *Ctxpopup) DirectionPrioritySet(first C.Elm_Ctxpopup_Direction, second C.Elm_Ctxpopup_Direction, third C.Elm_Ctxpopup_Direction, fourth C.Elm_Ctxpopup_Direction) () {
  C.elm_ctxpopup_direction_priority_set(self.obj, first, second, third, fourth)
}

func (self *Ctxpopup) DirectionPriorityGet(first *C.Elm_Ctxpopup_Direction, second *C.Elm_Ctxpopup_Direction, third *C.Elm_Ctxpopup_Direction, fourth *C.Elm_Ctxpopup_Direction) () {
  C.elm_ctxpopup_direction_priority_get(self.obj, first, second, third, fourth)
}

func (self *Ctxpopup) Dismiss() () {
  C.elm_ctxpopup_dismiss(self.obj)
}

func (self *Dayselector) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Dayselector) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Dayselector) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Dayselector) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Dayselector) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Dayselector) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Dayselector) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Dayselector) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Dayselector) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Dayselector) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Dayselector) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Dayselector) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Dayselector) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Dayselector) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Dayselector) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Dayselector) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Dayselector) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Dayselector) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Dayselector) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Dayselector) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Dayselector) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Dayselector) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Dayselector) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Dayselector) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Dayselector) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Dayselector) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Dayselector) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Dayselector) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Dayselector) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Dayselector) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Dayselector) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Dayselector) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Dayselector) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Dayselector) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Dayselector) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Dayselector) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Dayselector) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Dayselector) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Dayselector) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Dayselector) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Dayselector) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Dayselector) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Dayselector) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Dayselector) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Dayselector) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Dayselector) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Dayselector) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Dayselector) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Dayselector) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Dayselector) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Dayselector) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Dayselector) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Dayselector) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Dayselector) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Dayselector) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Dayselector) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Dayselector) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Dayselector) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Dayselector) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Dayselector) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Dayselector) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Dayselector) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Dayselector) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Dayselector) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Dayselector) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Dayselector) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Dayselector) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Dayselector) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Dayselector) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Dayselector) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Dayselector) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Dayselector) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Dayselector) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Dayselector) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Dayselector) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Dayselector) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Dayselector) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Dayselector) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Dayselector) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Dayselector) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Dayselector) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Dayselector) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Dayselector) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Dayselector) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Dayselector) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Dayselector) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Dayselector) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Dayselector) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Dayselector) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Dayselector) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Dayselector) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Dayselector) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Dayselector) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Dayselector) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Dayselector) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Dayselector) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Dayselector) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Dayselector) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Dayselector) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Dayselector) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Dayselector) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Dayselector) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Dayselector) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Dayselector) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Dayselector) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Dayselector) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Dayselector) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Dayselector) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Dayselector) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Dayselector) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Dayselector) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Dayselector) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Dayselector) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Dayselector) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Dayselector) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Dayselector) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Dayselector) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Dayselector) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Dayselector) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Dayselector) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Dayselector) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Dayselector) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Dayselector) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Dayselector) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Dayselector) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Dayselector) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Dayselector) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Dayselector) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Dayselector) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Dayselector) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Dayselector) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Dayselector) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Dayselector) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Dayselector) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Dayselector) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Dayselector) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Dayselector) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Dayselector) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Dayselector) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Dayselector) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Dayselector) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Dayselector) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Dayselector) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Dayselector) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Dayselector) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Dayselector) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Dayselector) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Dayselector) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Dayselector) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Dayselector) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Dayselector) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Dayselector) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Dayselector) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Dayselector) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Dayselector) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Dayselector) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Dayselector) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Dayselector) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Dayselector) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Dayselector) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Dayselector) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Dayselector) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Dayselector) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Dayselector) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Dayselector) Add() (*EvasObject) {
  _cgo_return_ := C.elm_dayselector_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Dayselector) DaySelectedSet(day C.Elm_Dayselector_Day, selected bool) () {
  _c_selected := (C.Eina_Bool)(0)
  if selected { _c_selected = (C.Eina_Bool)(1) }
  C.elm_dayselector_day_selected_set(self.obj, day, _c_selected)
}

func (self *Dayselector) WeekStartSet(day C.Elm_Dayselector_Day) () {
  C.elm_dayselector_week_start_set(self.obj, day)
}

func (self *Dayselector) WeekendStartSet(day C.Elm_Dayselector_Day) () {
  C.elm_dayselector_weekend_start_set(self.obj, day)
}

func (self *Dayselector) WeekendLengthSet(length uint) () {
  _c_length := C.uint(length)
  C.elm_dayselector_weekend_length_set(self.obj, _c_length)
}

func (self *FileselectorButton) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *FileselectorButton) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *FileselectorButton) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *FileselectorButton) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *FileselectorButton) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *FileselectorButton) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *FileselectorButton) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *FileselectorButton) Del() () {
  C.evas_object_del(self.obj)
}

func (self *FileselectorButton) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *FileselectorButton) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *FileselectorButton) Show() () {
  C.evas_object_show(self.obj)
}

func (self *FileselectorButton) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *FileselectorButton) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorButton) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *FileselectorButton) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *FileselectorButton) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *FileselectorButton) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *FileselectorButton) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *FileselectorButton) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *FileselectorButton) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *FileselectorButton) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *FileselectorButton) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *FileselectorButton) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *FileselectorButton) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *FileselectorButton) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *FileselectorButton) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *FileselectorButton) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *FileselectorButton) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *FileselectorButton) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *FileselectorButton) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *FileselectorButton) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *FileselectorButton) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *FileselectorButton) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *FileselectorButton) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *FileselectorButton) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *FileselectorButton) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *FileselectorButton) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *FileselectorButton) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *FileselectorButton) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *FileselectorButton) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *FileselectorButton) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *FileselectorButton) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *FileselectorButton) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *FileselectorButton) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *FileselectorButton) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *FileselectorButton) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *FileselectorButton) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorButton) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *FileselectorButton) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *FileselectorButton) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *FileselectorButton) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *FileselectorButton) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *FileselectorButton) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *FileselectorButton) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *FileselectorButton) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *FileselectorButton) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *FileselectorButton) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *FileselectorButton) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorButton) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *FileselectorButton) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *FileselectorButton) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *FileselectorButton) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *FileselectorButton) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *FileselectorButton) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *FileselectorButton) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *FileselectorButton) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *FileselectorButton) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *FileselectorButton) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *FileselectorButton) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *FileselectorButton) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *FileselectorButton) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *FileselectorButton) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *FileselectorButton) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *FileselectorButton) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorButton) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorButton) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorButton) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorButton) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *FileselectorButton) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *FileselectorButton) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *FileselectorButton) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *FileselectorButton) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *FileselectorButton) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *FileselectorButton) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *FileselectorButton) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *FileselectorButton) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *FileselectorButton) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *FileselectorButton) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorButton) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *FileselectorButton) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *FileselectorButton) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorButton) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *FileselectorButton) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *FileselectorButton) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *FileselectorButton) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *FileselectorButton) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *FileselectorButton) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *FileselectorButton) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *FileselectorButton) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *FileselectorButton) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *FileselectorButton) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *FileselectorButton) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *FileselectorButton) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *FileselectorButton) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *FileselectorButton) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *FileselectorButton) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *FileselectorButton) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorButton) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorButton) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *FileselectorButton) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *FileselectorButton) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *FileselectorButton) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *FileselectorButton) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorButton) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorButton) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorButton) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorButton) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorButton) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorButton) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *FileselectorButton) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *FileselectorButton) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *FileselectorButton) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *FileselectorButton) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *FileselectorButton) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorButton) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorButton) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *FileselectorButton) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *FileselectorButton) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *FileselectorButton) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *FileselectorButton) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *FileselectorButton) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *FileselectorButton) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *FileselectorButton) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *FileselectorButton) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *FileselectorButton) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *FileselectorButton) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *FileselectorButton) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *FileselectorButton) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *FileselectorButton) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *FileselectorButton) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *FileselectorButton) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *FileselectorButton) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *FileselectorButton) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *FileselectorButton) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *FileselectorButton) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *FileselectorButton) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *FileselectorButton) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *FileselectorButton) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *FileselectorButton) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *FileselectorButton) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *FileselectorButton) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *FileselectorButton) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorButton) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *FileselectorButton) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorButton) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *FileselectorButton) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *FileselectorButton) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *FileselectorButton) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *FileselectorButton) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *FileselectorButton) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *FileselectorButton) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *FileselectorButton) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *FileselectorButton) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *FileselectorButton) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *FileselectorButton) Add() (*EvasObject) {
  _cgo_return_ := C.elm_fileselector_button_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorButton) WindowTitleSet(title string) () {
  _c_title := C.CString(title)
  C.elm_fileselector_button_window_title_set(self.obj, _c_title)
}

func (self *FileselectorButton) WindowSizeSet(width C.Evas_Coord, height C.Evas_Coord) () {
  C.elm_fileselector_button_window_size_set(self.obj, width, height)
}

func (self *FileselectorButton) PathSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_button_path_set(self.obj, _c_path)
}

func (self *FileselectorButton) ExpandableSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_expandable_set(self.obj, _c_value)
}

func (self *FileselectorButton) FolderOnlySet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_folder_only_set(self.obj, _c_value)
}

func (self *FileselectorButton) IsSaveSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_is_save_set(self.obj, _c_value)
}

func (self *FileselectorButton) InwinModeSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_inwin_mode_set(self.obj, _c_value)
}

func (self *FileselectorEntry) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *FileselectorEntry) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *FileselectorEntry) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *FileselectorEntry) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *FileselectorEntry) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *FileselectorEntry) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *FileselectorEntry) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *FileselectorEntry) Del() () {
  C.evas_object_del(self.obj)
}

func (self *FileselectorEntry) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *FileselectorEntry) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *FileselectorEntry) Show() () {
  C.evas_object_show(self.obj)
}

func (self *FileselectorEntry) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *FileselectorEntry) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorEntry) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *FileselectorEntry) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *FileselectorEntry) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *FileselectorEntry) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *FileselectorEntry) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *FileselectorEntry) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *FileselectorEntry) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *FileselectorEntry) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *FileselectorEntry) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *FileselectorEntry) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *FileselectorEntry) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *FileselectorEntry) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *FileselectorEntry) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *FileselectorEntry) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *FileselectorEntry) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *FileselectorEntry) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *FileselectorEntry) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *FileselectorEntry) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *FileselectorEntry) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *FileselectorEntry) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *FileselectorEntry) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *FileselectorEntry) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *FileselectorEntry) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *FileselectorEntry) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *FileselectorEntry) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *FileselectorEntry) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *FileselectorEntry) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *FileselectorEntry) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *FileselectorEntry) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *FileselectorEntry) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *FileselectorEntry) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *FileselectorEntry) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *FileselectorEntry) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *FileselectorEntry) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorEntry) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *FileselectorEntry) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *FileselectorEntry) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *FileselectorEntry) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *FileselectorEntry) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *FileselectorEntry) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *FileselectorEntry) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *FileselectorEntry) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *FileselectorEntry) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *FileselectorEntry) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *FileselectorEntry) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorEntry) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *FileselectorEntry) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *FileselectorEntry) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *FileselectorEntry) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *FileselectorEntry) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *FileselectorEntry) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *FileselectorEntry) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *FileselectorEntry) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *FileselectorEntry) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *FileselectorEntry) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *FileselectorEntry) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *FileselectorEntry) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *FileselectorEntry) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *FileselectorEntry) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *FileselectorEntry) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *FileselectorEntry) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorEntry) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorEntry) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorEntry) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorEntry) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *FileselectorEntry) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *FileselectorEntry) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *FileselectorEntry) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *FileselectorEntry) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *FileselectorEntry) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *FileselectorEntry) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *FileselectorEntry) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *FileselectorEntry) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *FileselectorEntry) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *FileselectorEntry) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorEntry) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *FileselectorEntry) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *FileselectorEntry) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *FileselectorEntry) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *FileselectorEntry) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *FileselectorEntry) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *FileselectorEntry) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *FileselectorEntry) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *FileselectorEntry) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *FileselectorEntry) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *FileselectorEntry) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *FileselectorEntry) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *FileselectorEntry) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *FileselectorEntry) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *FileselectorEntry) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *FileselectorEntry) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *FileselectorEntry) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *FileselectorEntry) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *FileselectorEntry) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorEntry) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorEntry) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *FileselectorEntry) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *FileselectorEntry) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *FileselectorEntry) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorEntry) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorEntry) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorEntry) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorEntry) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *FileselectorEntry) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorEntry) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *FileselectorEntry) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *FileselectorEntry) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *FileselectorEntry) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *FileselectorEntry) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *FileselectorEntry) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorEntry) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *FileselectorEntry) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *FileselectorEntry) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *FileselectorEntry) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *FileselectorEntry) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *FileselectorEntry) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *FileselectorEntry) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *FileselectorEntry) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *FileselectorEntry) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *FileselectorEntry) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *FileselectorEntry) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *FileselectorEntry) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *FileselectorEntry) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *FileselectorEntry) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *FileselectorEntry) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *FileselectorEntry) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *FileselectorEntry) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *FileselectorEntry) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *FileselectorEntry) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *FileselectorEntry) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *FileselectorEntry) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *FileselectorEntry) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *FileselectorEntry) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *FileselectorEntry) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *FileselectorEntry) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *FileselectorEntry) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *FileselectorEntry) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *FileselectorEntry) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorEntry) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *FileselectorEntry) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *FileselectorEntry) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *FileselectorEntry) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *FileselectorEntry) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *FileselectorEntry) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *FileselectorEntry) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *FileselectorEntry) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *FileselectorEntry) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *FileselectorEntry) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *FileselectorEntry) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *FileselectorEntry) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *FileselectorEntry) Add() (*EvasObject) {
  _cgo_return_ := C.elm_fileselector_entry_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *FileselectorEntry) WindowTitleSet(title string) () {
  _c_title := C.CString(title)
  C.elm_fileselector_entry_window_title_set(self.obj, _c_title)
}

func (self *FileselectorEntry) WindowSizeSet(width C.Evas_Coord, height C.Evas_Coord) () {
  C.elm_fileselector_entry_window_size_set(self.obj, width, height)
}

func (self *FileselectorEntry) PathSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_entry_path_set(self.obj, _c_path)
}

func (self *FileselectorEntry) ExpandableSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_expandable_set(self.obj, _c_value)
}

func (self *FileselectorEntry) FolderOnlySet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_folder_only_set(self.obj, _c_value)
}

func (self *FileselectorEntry) IsSaveSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_is_save_set(self.obj, _c_value)
}

func (self *FileselectorEntry) InwinModeSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_inwin_mode_set(self.obj, _c_value)
}

func (self *FileselectorEntry) SelectedSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_entry_selected_set(self.obj, _c_path)
}

func (self *Fileselector) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Fileselector) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Fileselector) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Fileselector) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Fileselector) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Fileselector) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Fileselector) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Fileselector) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Fileselector) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Fileselector) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Fileselector) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Fileselector) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Fileselector) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Fileselector) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Fileselector) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Fileselector) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Fileselector) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Fileselector) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Fileselector) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Fileselector) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Fileselector) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Fileselector) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Fileselector) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Fileselector) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Fileselector) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Fileselector) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Fileselector) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Fileselector) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Fileselector) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Fileselector) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Fileselector) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Fileselector) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Fileselector) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Fileselector) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Fileselector) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Fileselector) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Fileselector) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Fileselector) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Fileselector) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Fileselector) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Fileselector) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Fileselector) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Fileselector) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Fileselector) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Fileselector) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Fileselector) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Fileselector) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Fileselector) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Fileselector) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Fileselector) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Fileselector) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Fileselector) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Fileselector) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Fileselector) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Fileselector) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Fileselector) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Fileselector) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Fileselector) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Fileselector) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Fileselector) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Fileselector) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Fileselector) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Fileselector) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Fileselector) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Fileselector) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Fileselector) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Fileselector) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Fileselector) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Fileselector) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Fileselector) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Fileselector) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Fileselector) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Fileselector) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Fileselector) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Fileselector) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Fileselector) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Fileselector) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Fileselector) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Fileselector) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Fileselector) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Fileselector) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Fileselector) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Fileselector) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Fileselector) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Fileselector) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Fileselector) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Fileselector) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Fileselector) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Fileselector) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Fileselector) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Fileselector) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Fileselector) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Fileselector) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Fileselector) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Fileselector) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Fileselector) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Fileselector) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Fileselector) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Fileselector) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Fileselector) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Fileselector) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Fileselector) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Fileselector) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Fileselector) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Fileselector) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Fileselector) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Fileselector) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Fileselector) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Fileselector) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Fileselector) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Fileselector) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Fileselector) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Fileselector) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Fileselector) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Fileselector) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Fileselector) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Fileselector) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Fileselector) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Fileselector) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Fileselector) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Fileselector) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Fileselector) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Fileselector) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Fileselector) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Fileselector) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Fileselector) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Fileselector) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Fileselector) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Fileselector) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Fileselector) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Fileselector) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Fileselector) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Fileselector) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Fileselector) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Fileselector) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Fileselector) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Fileselector) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Fileselector) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Fileselector) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Fileselector) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Fileselector) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Fileselector) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Fileselector) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Fileselector) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Fileselector) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Fileselector) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Fileselector) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Fileselector) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Fileselector) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Fileselector) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Fileselector) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Fileselector) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Fileselector) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Fileselector) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Fileselector) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Fileselector) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Fileselector) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Fileselector) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Fileselector) ButtonAdd() (*EvasObject) {
  _cgo_return_ := C.elm_fileselector_button_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) ButtonWindowTitleSet(title string) () {
  _c_title := C.CString(title)
  C.elm_fileselector_button_window_title_set(self.obj, _c_title)
}

func (self *Fileselector) ButtonWindowSizeSet(width C.Evas_Coord, height C.Evas_Coord) () {
  C.elm_fileselector_button_window_size_set(self.obj, width, height)
}

func (self *Fileselector) ButtonPathSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_button_path_set(self.obj, _c_path)
}

func (self *Fileselector) ButtonExpandableSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_expandable_set(self.obj, _c_value)
}

func (self *Fileselector) ButtonFolderOnlySet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_folder_only_set(self.obj, _c_value)
}

func (self *Fileselector) ButtonIsSaveSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_is_save_set(self.obj, _c_value)
}

func (self *Fileselector) ButtonInwinModeSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_button_inwin_mode_set(self.obj, _c_value)
}

func (self *Fileselector) EntryAdd() (*EvasObject) {
  _cgo_return_ := C.elm_fileselector_entry_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) EntryWindowTitleSet(title string) () {
  _c_title := C.CString(title)
  C.elm_fileselector_entry_window_title_set(self.obj, _c_title)
}

func (self *Fileselector) EntryWindowSizeSet(width C.Evas_Coord, height C.Evas_Coord) () {
  C.elm_fileselector_entry_window_size_set(self.obj, width, height)
}

func (self *Fileselector) EntryPathSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_entry_path_set(self.obj, _c_path)
}

func (self *Fileselector) EntryExpandableSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_expandable_set(self.obj, _c_value)
}

func (self *Fileselector) EntryFolderOnlySet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_folder_only_set(self.obj, _c_value)
}

func (self *Fileselector) EntryIsSaveSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_is_save_set(self.obj, _c_value)
}

func (self *Fileselector) EntryInwinModeSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_fileselector_entry_inwin_mode_set(self.obj, _c_value)
}

func (self *Fileselector) EntrySelectedSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_entry_selected_set(self.obj, _c_path)
}

func (self *Fileselector) Add() (*EvasObject) {
  _cgo_return_ := C.elm_fileselector_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Fileselector) IsSaveSet(is_save bool) () {
  _c_is_save := (C.Eina_Bool)(0)
  if is_save { _c_is_save = (C.Eina_Bool)(1) }
  C.elm_fileselector_is_save_set(self.obj, _c_is_save)
}

func (self *Fileselector) FolderOnlySet(only bool) () {
  _c_only := (C.Eina_Bool)(0)
  if only { _c_only = (C.Eina_Bool)(1) }
  C.elm_fileselector_folder_only_set(self.obj, _c_only)
}

func (self *Fileselector) ButtonsOkCancelSet(buttons bool) () {
  _c_buttons := (C.Eina_Bool)(0)
  if buttons { _c_buttons = (C.Eina_Bool)(1) }
  C.elm_fileselector_buttons_ok_cancel_set(self.obj, _c_buttons)
}

func (self *Fileselector) ExpandableSet(expand bool) () {
  _c_expand := (C.Eina_Bool)(0)
  if expand { _c_expand = (C.Eina_Bool)(1) }
  C.elm_fileselector_expandable_set(self.obj, _c_expand)
}

func (self *Fileselector) PathSet(path string) () {
  _c_path := C.CString(path)
  C.elm_fileselector_path_set(self.obj, _c_path)
}

func (self *Fileselector) SelectedSet(path string) (bool) {
  _c_path := C.CString(path)
  _cgo_return_ := C.elm_fileselector_selected_set(self.obj, _c_path)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Fileselector) ModeSet(mode C.Elm_Fileselector_Mode) () {
  C.elm_fileselector_mode_set(self.obj, mode)
}

func (self *Hoversel) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Hoversel) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Hoversel) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Hoversel) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Hoversel) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Hoversel) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Hoversel) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Hoversel) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Hoversel) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Hoversel) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Hoversel) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Hoversel) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Hoversel) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hoversel) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Hoversel) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Hoversel) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Hoversel) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Hoversel) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Hoversel) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Hoversel) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Hoversel) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Hoversel) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Hoversel) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Hoversel) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Hoversel) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Hoversel) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Hoversel) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Hoversel) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Hoversel) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Hoversel) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Hoversel) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Hoversel) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Hoversel) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Hoversel) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Hoversel) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Hoversel) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Hoversel) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Hoversel) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Hoversel) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Hoversel) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Hoversel) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Hoversel) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Hoversel) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Hoversel) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Hoversel) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Hoversel) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Hoversel) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Hoversel) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Hoversel) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Hoversel) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Hoversel) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Hoversel) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Hoversel) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Hoversel) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Hoversel) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Hoversel) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Hoversel) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Hoversel) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Hoversel) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Hoversel) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Hoversel) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Hoversel) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Hoversel) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Hoversel) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Hoversel) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Hoversel) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Hoversel) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Hoversel) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Hoversel) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Hoversel) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Hoversel) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Hoversel) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Hoversel) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Hoversel) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hoversel) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hoversel) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hoversel) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hoversel) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Hoversel) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Hoversel) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Hoversel) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Hoversel) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Hoversel) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Hoversel) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Hoversel) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Hoversel) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Hoversel) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Hoversel) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Hoversel) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Hoversel) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Hoversel) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hoversel) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Hoversel) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Hoversel) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Hoversel) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Hoversel) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Hoversel) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Hoversel) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Hoversel) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Hoversel) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Hoversel) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Hoversel) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Hoversel) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Hoversel) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Hoversel) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Hoversel) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Hoversel) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hoversel) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hoversel) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Hoversel) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Hoversel) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Hoversel) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Hoversel) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hoversel) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hoversel) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hoversel) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hoversel) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hoversel) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hoversel) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Hoversel) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Hoversel) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Hoversel) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Hoversel) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Hoversel) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hoversel) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Hoversel) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Hoversel) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Hoversel) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Hoversel) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Hoversel) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Hoversel) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Hoversel) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Hoversel) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Hoversel) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Hoversel) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Hoversel) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Hoversel) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Hoversel) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Hoversel) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Hoversel) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Hoversel) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Hoversel) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Hoversel) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Hoversel) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Hoversel) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Hoversel) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Hoversel) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Hoversel) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Hoversel) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Hoversel) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Hoversel) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Hoversel) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hoversel) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Hoversel) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hoversel) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Hoversel) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Hoversel) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Hoversel) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Hoversel) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Hoversel) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Hoversel) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Hoversel) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Hoversel) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Hoversel) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Hoversel) Add() (*EvasObject) {
  _cgo_return_ := C.elm_hoversel_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hoversel) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_hoversel_horizontal_set(self.obj, _c_horizontal)
}

func (self *Hoversel) HoverParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_hoversel_hover_parent_set(self.obj, _c_parent)
}

func (self *Hoversel) HoverBegin() () {
  C.elm_hoversel_hover_begin(self.obj)
}

func (self *Hoversel) HoverEnd() () {
  C.elm_hoversel_hover_end(self.obj)
}

func (self *Hoversel) Clear() () {
  C.elm_hoversel_clear(self.obj)
}

func (self *Multibuttonentry) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Multibuttonentry) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Multibuttonentry) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Multibuttonentry) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Multibuttonentry) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Multibuttonentry) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Multibuttonentry) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Multibuttonentry) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Multibuttonentry) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Multibuttonentry) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Multibuttonentry) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Multibuttonentry) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Multibuttonentry) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Multibuttonentry) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Multibuttonentry) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Multibuttonentry) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Multibuttonentry) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Multibuttonentry) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Multibuttonentry) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Multibuttonentry) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Multibuttonentry) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Multibuttonentry) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Multibuttonentry) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Multibuttonentry) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Multibuttonentry) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Multibuttonentry) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Multibuttonentry) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Multibuttonentry) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Multibuttonentry) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Multibuttonentry) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Multibuttonentry) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Multibuttonentry) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Multibuttonentry) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Multibuttonentry) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Multibuttonentry) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Multibuttonentry) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Multibuttonentry) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Multibuttonentry) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Multibuttonentry) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Multibuttonentry) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Multibuttonentry) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Multibuttonentry) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Multibuttonentry) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Multibuttonentry) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Multibuttonentry) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Multibuttonentry) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Multibuttonentry) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Multibuttonentry) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Multibuttonentry) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Multibuttonentry) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Multibuttonentry) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Multibuttonentry) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Multibuttonentry) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Multibuttonentry) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Multibuttonentry) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Multibuttonentry) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Multibuttonentry) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Multibuttonentry) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Multibuttonentry) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Multibuttonentry) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Multibuttonentry) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Multibuttonentry) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Multibuttonentry) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Multibuttonentry) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Multibuttonentry) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Multibuttonentry) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Multibuttonentry) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Multibuttonentry) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Multibuttonentry) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Multibuttonentry) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Multibuttonentry) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Multibuttonentry) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Multibuttonentry) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Multibuttonentry) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Multibuttonentry) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Multibuttonentry) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Multibuttonentry) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Multibuttonentry) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Multibuttonentry) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Multibuttonentry) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Multibuttonentry) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Multibuttonentry) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Multibuttonentry) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Multibuttonentry) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Multibuttonentry) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Multibuttonentry) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Multibuttonentry) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Multibuttonentry) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Multibuttonentry) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Multibuttonentry) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Multibuttonentry) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Multibuttonentry) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Multibuttonentry) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Multibuttonentry) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Multibuttonentry) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Multibuttonentry) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Multibuttonentry) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Multibuttonentry) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Multibuttonentry) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Multibuttonentry) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Multibuttonentry) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Multibuttonentry) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Multibuttonentry) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Multibuttonentry) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Multibuttonentry) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Multibuttonentry) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Multibuttonentry) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Multibuttonentry) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Multibuttonentry) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Multibuttonentry) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Multibuttonentry) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Multibuttonentry) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Multibuttonentry) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Multibuttonentry) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Multibuttonentry) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Multibuttonentry) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Multibuttonentry) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Multibuttonentry) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Multibuttonentry) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Multibuttonentry) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Multibuttonentry) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Multibuttonentry) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Multibuttonentry) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Multibuttonentry) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Multibuttonentry) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Multibuttonentry) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Multibuttonentry) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Multibuttonentry) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Multibuttonentry) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Multibuttonentry) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Multibuttonentry) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Multibuttonentry) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Multibuttonentry) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Multibuttonentry) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Multibuttonentry) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Multibuttonentry) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Multibuttonentry) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Multibuttonentry) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Multibuttonentry) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Multibuttonentry) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Multibuttonentry) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Multibuttonentry) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Multibuttonentry) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Multibuttonentry) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Multibuttonentry) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Multibuttonentry) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Multibuttonentry) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Multibuttonentry) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Multibuttonentry) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Multibuttonentry) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Multibuttonentry) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Multibuttonentry) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Multibuttonentry) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Multibuttonentry) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Multibuttonentry) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Multibuttonentry) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Multibuttonentry) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Multibuttonentry) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Multibuttonentry) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Multibuttonentry) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Multibuttonentry) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Multibuttonentry) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Multibuttonentry) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Multibuttonentry) Add() (*EvasObject) {
  _cgo_return_ := C.elm_multibuttonentry_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Multibuttonentry) ExpandedSet(expanded bool) () {
  _c_expanded := (C.Eina_Bool)(0)
  if expanded { _c_expanded = (C.Eina_Bool)(1) }
  C.elm_multibuttonentry_expanded_set(self.obj, _c_expanded)
}

func (self *Multibuttonentry) Clear() () {
  C.elm_multibuttonentry_clear(self.obj)
}

func (self *Multibuttonentry) EditableSet(editable bool) () {
  _c_editable := (C.Eina_Bool)(0)
  if editable { _c_editable = (C.Eina_Bool)(1) }
  C.elm_multibuttonentry_editable_set(self.obj, _c_editable)
}

func (self *Naviframe) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Naviframe) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Naviframe) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Naviframe) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Naviframe) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Naviframe) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Naviframe) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Naviframe) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Naviframe) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Naviframe) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Naviframe) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Naviframe) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Naviframe) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Naviframe) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Naviframe) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Naviframe) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Naviframe) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Naviframe) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Naviframe) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Naviframe) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Naviframe) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Naviframe) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Naviframe) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Naviframe) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Naviframe) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Naviframe) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Naviframe) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Naviframe) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Naviframe) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Naviframe) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Naviframe) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Naviframe) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Naviframe) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Naviframe) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Naviframe) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Naviframe) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Naviframe) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Naviframe) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Naviframe) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Naviframe) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Naviframe) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Naviframe) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Naviframe) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Naviframe) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Naviframe) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Naviframe) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Naviframe) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Naviframe) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Naviframe) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Naviframe) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Naviframe) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Naviframe) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Naviframe) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Naviframe) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Naviframe) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Naviframe) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Naviframe) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Naviframe) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Naviframe) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Naviframe) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Naviframe) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Naviframe) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Naviframe) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Naviframe) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Naviframe) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Naviframe) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Naviframe) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Naviframe) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Naviframe) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Naviframe) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Naviframe) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Naviframe) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Naviframe) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Naviframe) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Naviframe) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Naviframe) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Naviframe) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Naviframe) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Naviframe) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Naviframe) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Naviframe) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Naviframe) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Naviframe) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Naviframe) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Naviframe) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Naviframe) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Naviframe) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Naviframe) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Naviframe) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Naviframe) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Naviframe) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Naviframe) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Naviframe) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Naviframe) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Naviframe) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Naviframe) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Naviframe) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Naviframe) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Naviframe) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Naviframe) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Naviframe) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Naviframe) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Naviframe) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Naviframe) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Naviframe) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Naviframe) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Naviframe) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Naviframe) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Naviframe) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Naviframe) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Naviframe) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Naviframe) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Naviframe) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Naviframe) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Naviframe) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Naviframe) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Naviframe) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Naviframe) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Naviframe) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Naviframe) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Naviframe) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Naviframe) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Naviframe) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Naviframe) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Naviframe) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Naviframe) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Naviframe) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Naviframe) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Naviframe) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Naviframe) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Naviframe) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Naviframe) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Naviframe) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Naviframe) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Naviframe) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Naviframe) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Naviframe) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Naviframe) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Naviframe) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Naviframe) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Naviframe) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Naviframe) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Naviframe) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Naviframe) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Naviframe) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Naviframe) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Naviframe) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Naviframe) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Naviframe) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Naviframe) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Naviframe) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Naviframe) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Naviframe) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Naviframe) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Naviframe) Add() (*EvasObject) {
  _cgo_return_ := C.elm_naviframe_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) ItemPush(title_label string, prev_btn EvasObjectInterface, next_btn EvasObjectInterface, content EvasObjectInterface, item_style string) (*C.Elm_Object_Item) {
  _c_title_label := C.CString(title_label)
  var _c_prev_btn *C.Evas_Object
  if prev_btn != nil { _c_prev_btn = prev_btn.GetObj() }
  var _c_next_btn *C.Evas_Object
  if next_btn != nil { _c_next_btn = next_btn.GetObj() }
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  _c_item_style := C.CString(item_style)
  _cgo_return_ := C.elm_naviframe_item_push(self.obj, _c_title_label, _c_prev_btn, _c_next_btn, _c_content, _c_item_style)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) ItemInsertBefore(before *C.Elm_Object_Item, title_label string, prev_btn EvasObjectInterface, next_btn EvasObjectInterface, content EvasObjectInterface, item_style string) (*C.Elm_Object_Item) {
  _c_title_label := C.CString(title_label)
  var _c_prev_btn *C.Evas_Object
  if prev_btn != nil { _c_prev_btn = prev_btn.GetObj() }
  var _c_next_btn *C.Evas_Object
  if next_btn != nil { _c_next_btn = next_btn.GetObj() }
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  _c_item_style := C.CString(item_style)
  _cgo_return_ := C.elm_naviframe_item_insert_before(self.obj, before, _c_title_label, _c_prev_btn, _c_next_btn, _c_content, _c_item_style)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) ItemInsertAfter(after *C.Elm_Object_Item, title_label string, prev_btn EvasObjectInterface, next_btn EvasObjectInterface, content EvasObjectInterface, item_style string) (*C.Elm_Object_Item) {
  _c_title_label := C.CString(title_label)
  var _c_prev_btn *C.Evas_Object
  if prev_btn != nil { _c_prev_btn = prev_btn.GetObj() }
  var _c_next_btn *C.Evas_Object
  if next_btn != nil { _c_next_btn = next_btn.GetObj() }
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  _c_item_style := C.CString(item_style)
  _cgo_return_ := C.elm_naviframe_item_insert_after(self.obj, after, _c_title_label, _c_prev_btn, _c_next_btn, _c_content, _c_item_style)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) ItemPop() (*EvasObject) {
  _cgo_return_ := C.elm_naviframe_item_pop(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Naviframe) ContentPreserveOnPopSet(preserve bool) () {
  _c_preserve := (C.Eina_Bool)(0)
  if preserve { _c_preserve = (C.Eina_Bool)(1) }
  C.elm_naviframe_content_preserve_on_pop_set(self.obj, _c_preserve)
}

func (self *Naviframe) PrevBtnAutoPushedSet(auto_pushed bool) () {
  _c_auto_pushed := (C.Eina_Bool)(0)
  if auto_pushed { _c_auto_pushed = (C.Eina_Bool)(1) }
  C.elm_naviframe_prev_btn_auto_pushed_set(self.obj, _c_auto_pushed)
}

func (self *Naviframe) EventEnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_naviframe_event_enabled_set(self.obj, _c_enabled)
}

func (self *Naviframe) ItemSimplePush(content EvasObjectInterface) (*C.Elm_Object_Item) {
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  _cgo_return_ := C.elm_naviframe_item_simple_push(self.obj, _c_content)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Naviframe) ItemSimplePromote(content EvasObjectInterface) () {
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_naviframe_item_simple_promote(self.obj, _c_content)
}

func (self *Popup) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Popup) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Popup) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Popup) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Popup) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Popup) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Popup) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Popup) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Popup) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Popup) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Popup) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Popup) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Popup) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Popup) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Popup) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Popup) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Popup) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Popup) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Popup) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Popup) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Popup) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Popup) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Popup) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Popup) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Popup) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Popup) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Popup) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Popup) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Popup) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Popup) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Popup) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Popup) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Popup) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Popup) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Popup) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Popup) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Popup) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Popup) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Popup) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Popup) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Popup) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Popup) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Popup) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Popup) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Popup) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Popup) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Popup) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Popup) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Popup) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Popup) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Popup) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Popup) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Popup) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Popup) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Popup) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Popup) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Popup) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Popup) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Popup) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Popup) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Popup) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Popup) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Popup) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Popup) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Popup) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Popup) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Popup) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Popup) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Popup) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Popup) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Popup) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Popup) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Popup) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Popup) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Popup) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Popup) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Popup) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Popup) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Popup) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Popup) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Popup) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Popup) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Popup) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Popup) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Popup) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Popup) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Popup) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Popup) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Popup) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Popup) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Popup) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Popup) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Popup) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Popup) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Popup) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Popup) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Popup) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Popup) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Popup) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Popup) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Popup) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Popup) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Popup) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Popup) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Popup) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Popup) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Popup) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Popup) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Popup) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Popup) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Popup) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Popup) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Popup) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Popup) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Popup) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Popup) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Popup) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Popup) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Popup) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Popup) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Popup) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Popup) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Popup) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Popup) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Popup) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Popup) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Popup) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Popup) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Popup) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Popup) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Popup) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Popup) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Popup) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Popup) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Popup) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Popup) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Popup) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Popup) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Popup) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Popup) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Popup) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Popup) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Popup) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Popup) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Popup) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Popup) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Popup) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Popup) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Popup) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Popup) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Popup) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Popup) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Popup) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Popup) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Popup) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Popup) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Popup) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Popup) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Popup) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Popup) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Popup) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Popup) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Popup) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Popup) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Popup) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Popup) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Popup) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Popup) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Popup) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Popup) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Popup) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Popup) Add() (*EvasObject) {
  _cgo_return_ := C.elm_popup_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Popup) ContentTextWrapTypeSet(wrap C.Elm_Wrap_Type) () {
  C.elm_popup_content_text_wrap_type_set(self.obj, wrap)
}

func (self *Popup) OrientSet(orient C.Elm_Popup_Orient) () {
  C.elm_popup_orient_set(self.obj, orient)
}

func (self *Popup) TimeoutSet(timeout float64) () {
  _c_timeout := C.double(timeout)
  C.elm_popup_timeout_set(self.obj, _c_timeout)
}

func (self *Popup) AllowEventsSet(allow bool) () {
  _c_allow := (C.Eina_Bool)(0)
  if allow { _c_allow = (C.Eina_Bool)(1) }
  C.elm_popup_allow_events_set(self.obj, _c_allow)
}

func (self *Actionslider) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Actionslider) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Actionslider) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Actionslider) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Actionslider) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Actionslider) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Actionslider) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Actionslider) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Actionslider) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Actionslider) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Actionslider) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Actionslider) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Actionslider) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Actionslider) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Actionslider) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Actionslider) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Actionslider) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Actionslider) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Actionslider) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Actionslider) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Actionslider) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Actionslider) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Actionslider) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Actionslider) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Actionslider) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Actionslider) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Actionslider) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Actionslider) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Actionslider) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Actionslider) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Actionslider) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Actionslider) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Actionslider) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Actionslider) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Actionslider) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Actionslider) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Actionslider) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Actionslider) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Actionslider) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Actionslider) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Actionslider) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Actionslider) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Actionslider) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Actionslider) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Actionslider) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Actionslider) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Actionslider) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Actionslider) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Actionslider) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Actionslider) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Actionslider) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Actionslider) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Actionslider) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Actionslider) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Actionslider) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Actionslider) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Actionslider) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Actionslider) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Actionslider) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Actionslider) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Actionslider) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Actionslider) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Actionslider) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Actionslider) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Actionslider) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Actionslider) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Actionslider) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Actionslider) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Actionslider) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Actionslider) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Actionslider) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Actionslider) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Actionslider) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Actionslider) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Actionslider) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Actionslider) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Actionslider) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Actionslider) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Actionslider) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Actionslider) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Actionslider) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Actionslider) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Actionslider) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Actionslider) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Actionslider) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Actionslider) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Actionslider) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Actionslider) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Actionslider) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Actionslider) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Actionslider) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Actionslider) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Actionslider) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Actionslider) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Actionslider) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Actionslider) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Actionslider) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Actionslider) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Actionslider) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Actionslider) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Actionslider) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Actionslider) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Actionslider) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Actionslider) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Actionslider) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Actionslider) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Actionslider) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Actionslider) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Actionslider) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Actionslider) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Actionslider) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Actionslider) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Actionslider) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Actionslider) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Actionslider) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Actionslider) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Actionslider) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Actionslider) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Actionslider) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Actionslider) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Actionslider) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Actionslider) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Actionslider) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Actionslider) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Actionslider) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Actionslider) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Actionslider) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Actionslider) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Actionslider) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Actionslider) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Actionslider) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Actionslider) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Actionslider) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Actionslider) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Actionslider) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Actionslider) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Actionslider) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Actionslider) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Actionslider) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Actionslider) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Actionslider) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Actionslider) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Actionslider) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Actionslider) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Actionslider) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Actionslider) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Actionslider) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Actionslider) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Actionslider) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Actionslider) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Actionslider) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Actionslider) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Actionslider) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Actionslider) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Actionslider) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Actionslider) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Actionslider) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Actionslider) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Actionslider) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Actionslider) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Actionslider) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Actionslider) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Actionslider) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Actionslider) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Actionslider) Add() (*EvasObject) {
  _cgo_return_ := C.elm_actionslider_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Actionslider) IndicatorPosSet(pos C.Elm_Actionslider_Pos) () {
  C.elm_actionslider_indicator_pos_set(self.obj, pos)
}

func (self *Actionslider) MagnetPosSet(pos C.Elm_Actionslider_Pos) () {
  C.elm_actionslider_magnet_pos_set(self.obj, pos)
}

func (self *Actionslider) EnabledPosSet(pos C.Elm_Actionslider_Pos) () {
  C.elm_actionslider_enabled_pos_set(self.obj, pos)
}

func (self *Bg) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Bg) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Bg) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Bg) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Bg) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Bg) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Bg) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Bg) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Bg) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Bg) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Bg) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Bg) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Bg) EVASColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bg) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Bg) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Bg) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Bg) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Bg) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Bg) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Bg) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Bg) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Bg) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Bg) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Bg) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Bg) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Bg) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Bg) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Bg) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Bg) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Bg) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Bg) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Bg) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Bg) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Bg) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Bg) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Bg) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Bg) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Bg) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Bg) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Bg) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Bg) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Bg) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Bg) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Bg) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Bg) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Bg) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Bg) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Bg) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Bg) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Bg) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Bg) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Bg) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Bg) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Bg) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Bg) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Bg) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Bg) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Bg) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Bg) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Bg) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Bg) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Bg) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Bg) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Bg) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Bg) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Bg) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Bg) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Bg) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Bg) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Bg) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Bg) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Bg) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Bg) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Bg) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bg) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bg) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bg) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bg) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Bg) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Bg) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Bg) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Bg) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Bg) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Bg) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Bg) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Bg) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Bg) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Bg) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Bg) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Bg) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Bg) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bg) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Bg) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Bg) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Bg) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Bg) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Bg) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Bg) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Bg) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Bg) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Bg) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Bg) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Bg) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Bg) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Bg) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Bg) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Bg) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bg) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bg) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Bg) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Bg) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Bg) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Bg) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Bg) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Bg) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Bg) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Bg) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Bg) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Bg) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Bg) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bg) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bg) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bg) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bg) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bg) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bg) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Bg) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Bg) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Bg) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Bg) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Bg) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bg) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Bg) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Bg) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Bg) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Bg) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Bg) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Bg) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Bg) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Bg) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Bg) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Bg) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Bg) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Bg) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Bg) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Bg) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Bg) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Bg) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Bg) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Bg) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Bg) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Bg) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Bg) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Bg) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Bg) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Bg) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Bg) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Bg) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Bg) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bg) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Bg) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Bg) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Bg) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Bg) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Bg) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Bg) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Bg) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Bg) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Bg) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Bg) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Bg) Add() (*EvasObject) {
  _cgo_return_ := C.elm_bg_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bg) FileSet(file string, group string) (bool) {
  _c_file := C.CString(file)
  _c_group := C.CString(group)
  _cgo_return_ := C.elm_bg_file_set(self.obj, _c_file, _c_group)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bg) OptionSet(option C.Elm_Bg_Option) () {
  C.elm_bg_option_set(self.obj, option)
}

func (self *Bg) ColorSet(r int, g int, b int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  C.elm_bg_color_set(self.obj, _c_r, _c_g, _c_b)
}

func (self *Bg) LoadSizeSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_bg_load_size_set(self.obj, w, h)
}

func (self *Box) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Box) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Box) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Box) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Box) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Box) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Box) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Box) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Box) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Box) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Box) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Box) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Box) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Box) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Box) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Box) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Box) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Box) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Box) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Box) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Box) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Box) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Box) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Box) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Box) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Box) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Box) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Box) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Box) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Box) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Box) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Box) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Box) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Box) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Box) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Box) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Box) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Box) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Box) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Box) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Box) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Box) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Box) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Box) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Box) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Box) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Box) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Box) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Box) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Box) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Box) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Box) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Box) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Box) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Box) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Box) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Box) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Box) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Box) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Box) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Box) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Box) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Box) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Box) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Box) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Box) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Box) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Box) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Box) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Box) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Box) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Box) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Box) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Box) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Box) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Box) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Box) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Box) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Box) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Box) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Box) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Box) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Box) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Box) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Box) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Box) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Box) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Box) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Box) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Box) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Box) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Box) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Box) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Box) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Box) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Box) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Box) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Box) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Box) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Box) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Box) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Box) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Box) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Box) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Box) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Box) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Box) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Box) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Box) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Box) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Box) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Box) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Box) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Box) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Box) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Box) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Box) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Box) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Box) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Box) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Box) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Box) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Box) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Box) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Box) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Box) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Box) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Box) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Box) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Box) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Box) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Box) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Box) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Box) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Box) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Box) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Box) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Box) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Box) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Box) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Box) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Box) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Box) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Box) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Box) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Box) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Box) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Box) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Box) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Box) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Box) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Box) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Box) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Box) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Box) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Box) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Box) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Box) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Box) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Box) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Box) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Box) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Box) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Box) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Box) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Box) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Box) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Box) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Box) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Box) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Box) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Box) Add() (*EvasObject) {
  _cgo_return_ := C.elm_box_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Box) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_box_horizontal_set(self.obj, _c_horizontal)
}

func (self *Box) HomogeneousSet(homogeneous bool) () {
  _c_homogeneous := (C.Eina_Bool)(0)
  if homogeneous { _c_homogeneous = (C.Eina_Bool)(1) }
  C.elm_box_homogeneous_set(self.obj, _c_homogeneous)
}

func (self *Box) PackStart(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_box_pack_start(self.obj, _c_subobj)
}

func (self *Box) PackEnd(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_box_pack_end(self.obj, _c_subobj)
}

func (self *Box) PackBefore(subobj EvasObjectInterface, before EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  var _c_before *C.Evas_Object
  if before != nil { _c_before = before.GetObj() }
  C.elm_box_pack_before(self.obj, _c_subobj, _c_before)
}

func (self *Box) PackAfter(subobj EvasObjectInterface, after EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  var _c_after *C.Evas_Object
  if after != nil { _c_after = after.GetObj() }
  C.elm_box_pack_after(self.obj, _c_subobj, _c_after)
}

func (self *Box) Clear() () {
  C.elm_box_clear(self.obj)
}

func (self *Box) Unpack(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_box_unpack(self.obj, _c_subobj)
}

func (self *Box) UnpackAll() () {
  C.elm_box_unpack_all(self.obj)
}

func (self *Box) PaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.elm_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Box) AlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.elm_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Box) Recalculate() () {
  C.elm_box_recalculate(self.obj)
}

func (self *Box) LayoutTransition(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.elm_box_layout_transition(self.obj, priv, data)
}

func (self *Bubble) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Bubble) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Bubble) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Bubble) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Bubble) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Bubble) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Bubble) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Bubble) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Bubble) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Bubble) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Bubble) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Bubble) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Bubble) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bubble) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Bubble) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Bubble) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Bubble) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Bubble) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Bubble) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Bubble) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Bubble) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Bubble) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Bubble) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Bubble) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Bubble) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Bubble) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Bubble) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Bubble) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Bubble) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Bubble) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Bubble) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Bubble) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Bubble) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Bubble) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Bubble) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Bubble) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Bubble) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Bubble) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Bubble) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Bubble) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Bubble) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Bubble) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Bubble) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Bubble) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Bubble) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Bubble) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Bubble) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Bubble) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Bubble) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Bubble) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Bubble) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Bubble) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Bubble) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Bubble) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Bubble) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Bubble) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Bubble) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Bubble) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Bubble) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Bubble) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Bubble) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Bubble) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Bubble) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Bubble) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Bubble) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Bubble) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Bubble) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Bubble) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Bubble) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Bubble) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Bubble) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Bubble) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Bubble) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Bubble) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bubble) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bubble) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bubble) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bubble) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Bubble) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Bubble) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Bubble) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Bubble) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Bubble) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Bubble) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Bubble) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Bubble) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Bubble) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Bubble) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Bubble) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Bubble) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Bubble) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Bubble) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Bubble) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Bubble) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Bubble) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Bubble) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Bubble) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Bubble) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Bubble) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Bubble) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Bubble) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Bubble) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Bubble) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Bubble) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Bubble) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Bubble) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Bubble) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bubble) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bubble) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Bubble) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Bubble) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Bubble) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Bubble) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bubble) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bubble) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bubble) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bubble) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Bubble) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bubble) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Bubble) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Bubble) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Bubble) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Bubble) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Bubble) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bubble) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Bubble) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Bubble) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Bubble) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Bubble) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Bubble) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Bubble) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Bubble) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Bubble) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Bubble) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Bubble) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Bubble) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Bubble) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Bubble) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Bubble) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Bubble) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Bubble) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Bubble) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Bubble) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Bubble) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Bubble) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Bubble) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Bubble) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Bubble) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Bubble) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Bubble) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Bubble) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Bubble) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bubble) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Bubble) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Bubble) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Bubble) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Bubble) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Bubble) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Bubble) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Bubble) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Bubble) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Bubble) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Bubble) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Bubble) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Bubble) Add() (*EvasObject) {
  _cgo_return_ := C.elm_bubble_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Bubble) PosSet(pos C.Elm_Bubble_Pos) () {
  C.elm_bubble_pos_set(self.obj, pos)
}

func (self *Button) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Button) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Button) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Button) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Button) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Button) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Button) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Button) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Button) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Button) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Button) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Button) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Button) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Button) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Button) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Button) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Button) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Button) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Button) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Button) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Button) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Button) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Button) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Button) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Button) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Button) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Button) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Button) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Button) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Button) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Button) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Button) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Button) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Button) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Button) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Button) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Button) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Button) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Button) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Button) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Button) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Button) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Button) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Button) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Button) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Button) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Button) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Button) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Button) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Button) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Button) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Button) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Button) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Button) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Button) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Button) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Button) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Button) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Button) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Button) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Button) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Button) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Button) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Button) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Button) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Button) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Button) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Button) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Button) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Button) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Button) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Button) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Button) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Button) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Button) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Button) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Button) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Button) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Button) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Button) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Button) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Button) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Button) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Button) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Button) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Button) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Button) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Button) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Button) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Button) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Button) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Button) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Button) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Button) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Button) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Button) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Button) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Button) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Button) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Button) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Button) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Button) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Button) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Button) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Button) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Button) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Button) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Button) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Button) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Button) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Button) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Button) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Button) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Button) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Button) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Button) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Button) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Button) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Button) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Button) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Button) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Button) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Button) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Button) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Button) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Button) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Button) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Button) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Button) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Button) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Button) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Button) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Button) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Button) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Button) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Button) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Button) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Button) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Button) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Button) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Button) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Button) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Button) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Button) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Button) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Button) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Button) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Button) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Button) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Button) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Button) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Button) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Button) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Button) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Button) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Button) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Button) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Button) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Button) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Button) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Button) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Button) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Button) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Button) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Button) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Button) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Button) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Button) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Button) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Button) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Button) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Button) Add() (*EvasObject) {
  _cgo_return_ := C.elm_button_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Button) AutorepeatSet(on bool) () {
  _c_on := (C.Eina_Bool)(0)
  if on { _c_on = (C.Eina_Bool)(1) }
  C.elm_button_autorepeat_set(self.obj, _c_on)
}

func (self *Button) AutorepeatInitialTimeoutSet(t float64) () {
  _c_t := C.double(t)
  C.elm_button_autorepeat_initial_timeout_set(self.obj, _c_t)
}

func (self *Button) AutorepeatGapTimeoutSet(t float64) () {
  _c_t := C.double(t)
  C.elm_button_autorepeat_gap_timeout_set(self.obj, _c_t)
}

func (self *Calendar) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Calendar) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Calendar) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Calendar) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Calendar) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Calendar) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Calendar) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Calendar) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Calendar) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Calendar) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Calendar) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Calendar) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Calendar) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Calendar) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Calendar) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Calendar) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Calendar) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Calendar) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Calendar) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Calendar) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Calendar) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Calendar) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Calendar) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Calendar) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Calendar) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Calendar) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Calendar) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Calendar) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Calendar) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Calendar) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Calendar) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Calendar) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Calendar) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Calendar) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Calendar) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Calendar) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Calendar) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Calendar) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Calendar) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Calendar) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Calendar) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Calendar) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Calendar) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Calendar) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Calendar) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Calendar) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Calendar) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Calendar) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Calendar) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Calendar) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Calendar) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Calendar) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Calendar) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Calendar) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Calendar) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Calendar) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Calendar) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Calendar) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Calendar) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Calendar) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Calendar) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Calendar) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Calendar) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Calendar) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Calendar) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Calendar) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Calendar) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Calendar) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Calendar) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Calendar) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Calendar) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Calendar) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Calendar) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Calendar) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Calendar) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Calendar) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Calendar) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Calendar) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Calendar) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Calendar) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Calendar) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Calendar) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Calendar) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Calendar) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Calendar) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Calendar) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Calendar) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Calendar) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Calendar) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Calendar) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Calendar) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Calendar) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Calendar) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Calendar) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Calendar) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Calendar) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Calendar) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Calendar) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Calendar) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Calendar) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Calendar) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Calendar) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Calendar) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Calendar) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Calendar) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Calendar) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Calendar) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Calendar) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Calendar) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Calendar) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Calendar) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Calendar) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Calendar) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Calendar) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Calendar) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Calendar) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Calendar) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Calendar) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Calendar) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Calendar) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Calendar) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Calendar) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Calendar) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Calendar) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Calendar) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Calendar) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Calendar) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Calendar) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Calendar) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Calendar) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Calendar) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Calendar) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Calendar) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Calendar) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Calendar) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Calendar) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Calendar) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Calendar) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Calendar) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Calendar) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Calendar) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Calendar) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Calendar) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Calendar) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Calendar) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Calendar) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Calendar) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Calendar) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Calendar) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Calendar) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Calendar) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Calendar) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Calendar) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Calendar) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Calendar) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Calendar) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Calendar) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Calendar) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Calendar) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Calendar) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Calendar) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Calendar) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Calendar) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Calendar) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Calendar) Add() (*EvasObject) {
  _cgo_return_ := C.elm_calendar_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Calendar) WeekdaysNamesSet(weekdays []string) () {
  _c_weekdays := ConvertStringSliceToC(weekdays)
  C.elm_calendar_weekdays_names_set(self.obj, _c_weekdays)
}

func (self *Calendar) MinMaxYearSet(min int, max int) () {
  _c_min := C.int(min)
  _c_max := C.int(max)
  C.elm_calendar_min_max_year_set(self.obj, _c_min, _c_max)
}

func (self *Calendar) SelectModeSet(mode C.Elm_Calendar_Select_Mode) () {
  C.elm_calendar_select_mode_set(self.obj, mode)
}

func (self *Calendar) MarksClear() () {
  C.elm_calendar_marks_clear(self.obj)
}

func (self *Calendar) MarksDraw() () {
  C.elm_calendar_marks_draw(self.obj)
}

func (self *Calendar) IntervalSet(interval float64) () {
  _c_interval := C.double(interval)
  C.elm_calendar_interval_set(self.obj, _c_interval)
}

func (self *Calendar) FirstDayOfWeekSet(day C.Elm_Calendar_Weekday) () {
  C.elm_calendar_first_day_of_week_set(self.obj, day)
}

func (self *Check) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Check) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Check) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Check) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Check) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Check) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Check) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Check) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Check) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Check) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Check) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Check) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Check) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Check) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Check) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Check) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Check) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Check) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Check) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Check) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Check) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Check) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Check) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Check) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Check) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Check) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Check) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Check) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Check) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Check) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Check) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Check) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Check) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Check) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Check) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Check) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Check) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Check) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Check) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Check) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Check) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Check) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Check) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Check) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Check) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Check) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Check) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Check) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Check) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Check) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Check) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Check) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Check) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Check) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Check) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Check) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Check) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Check) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Check) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Check) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Check) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Check) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Check) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Check) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Check) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Check) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Check) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Check) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Check) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Check) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Check) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Check) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Check) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Check) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Check) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Check) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Check) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Check) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Check) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Check) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Check) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Check) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Check) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Check) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Check) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Check) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Check) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Check) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Check) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Check) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Check) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Check) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Check) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Check) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Check) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Check) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Check) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Check) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Check) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Check) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Check) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Check) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Check) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Check) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Check) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Check) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Check) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Check) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Check) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Check) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Check) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Check) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Check) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Check) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Check) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Check) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Check) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Check) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Check) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Check) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Check) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Check) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Check) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Check) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Check) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Check) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Check) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Check) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Check) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Check) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Check) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Check) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Check) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Check) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Check) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Check) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Check) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Check) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Check) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Check) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Check) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Check) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Check) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Check) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Check) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Check) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Check) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Check) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Check) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Check) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Check) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Check) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Check) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Check) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Check) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Check) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Check) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Check) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Check) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Check) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Check) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Check) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Check) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Check) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Check) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Check) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Check) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Check) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Check) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Check) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Check) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Check) Add() (*EvasObject) {
  _cgo_return_ := C.elm_check_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Check) StateSet(state bool) () {
  _c_state := (C.Eina_Bool)(0)
  if state { _c_state = (C.Eina_Bool)(1) }
  C.elm_check_state_set(self.obj, _c_state)
}

func (self *Check) StatePointerSet(statep *C.Eina_Bool) () {
  C.elm_check_state_pointer_set(self.obj, statep)
}

func (self *Clock) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Clock) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Clock) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Clock) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Clock) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Clock) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Clock) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Clock) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Clock) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Clock) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Clock) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Clock) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Clock) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Clock) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Clock) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Clock) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Clock) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Clock) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Clock) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Clock) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Clock) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Clock) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Clock) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Clock) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Clock) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Clock) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Clock) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Clock) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Clock) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Clock) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Clock) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Clock) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Clock) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Clock) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Clock) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Clock) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Clock) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Clock) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Clock) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Clock) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Clock) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Clock) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Clock) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Clock) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Clock) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Clock) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Clock) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Clock) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Clock) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Clock) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Clock) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Clock) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Clock) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Clock) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Clock) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Clock) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Clock) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Clock) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Clock) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Clock) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Clock) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Clock) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Clock) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Clock) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Clock) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Clock) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Clock) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Clock) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Clock) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Clock) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Clock) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Clock) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Clock) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Clock) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Clock) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Clock) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Clock) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Clock) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Clock) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Clock) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Clock) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Clock) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Clock) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Clock) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Clock) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Clock) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Clock) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Clock) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Clock) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Clock) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Clock) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Clock) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Clock) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Clock) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Clock) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Clock) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Clock) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Clock) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Clock) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Clock) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Clock) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Clock) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Clock) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Clock) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Clock) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Clock) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Clock) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Clock) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Clock) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Clock) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Clock) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Clock) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Clock) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Clock) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Clock) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Clock) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Clock) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Clock) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Clock) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Clock) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Clock) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Clock) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Clock) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Clock) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Clock) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Clock) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Clock) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Clock) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Clock) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Clock) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Clock) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Clock) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Clock) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Clock) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Clock) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Clock) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Clock) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Clock) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Clock) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Clock) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Clock) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Clock) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Clock) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Clock) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Clock) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Clock) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Clock) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Clock) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Clock) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Clock) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Clock) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Clock) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Clock) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Clock) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Clock) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Clock) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Clock) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Clock) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Clock) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Clock) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Clock) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Clock) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Clock) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Clock) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Clock) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Clock) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Clock) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Clock) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Clock) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Clock) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Clock) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Clock) Add() (*EvasObject) {
  _cgo_return_ := C.elm_clock_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Clock) TimeSet(hrs int, min int, sec int) () {
  _c_hrs := C.int(hrs)
  _c_min := C.int(min)
  _c_sec := C.int(sec)
  C.elm_clock_time_set(self.obj, _c_hrs, _c_min, _c_sec)
}

func (self *Clock) EditSet(edit bool) () {
  _c_edit := (C.Eina_Bool)(0)
  if edit { _c_edit = (C.Eina_Bool)(1) }
  C.elm_clock_edit_set(self.obj, _c_edit)
}

func (self *Clock) EditModeSet(digedit C.Elm_Clock_Edit_Mode) () {
  C.elm_clock_edit_mode_set(self.obj, digedit)
}

func (self *Clock) ShowAmPmSet(am_pm bool) () {
  _c_am_pm := (C.Eina_Bool)(0)
  if am_pm { _c_am_pm = (C.Eina_Bool)(1) }
  C.elm_clock_show_am_pm_set(self.obj, _c_am_pm)
}

func (self *Clock) ShowSecondsSet(seconds bool) () {
  _c_seconds := (C.Eina_Bool)(0)
  if seconds { _c_seconds = (C.Eina_Bool)(1) }
  C.elm_clock_show_seconds_set(self.obj, _c_seconds)
}

func (self *Clock) FirstIntervalSet(interval float64) () {
  _c_interval := C.double(interval)
  C.elm_clock_first_interval_set(self.obj, _c_interval)
}

func (self *Colorselector) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Colorselector) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Colorselector) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Colorselector) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Colorselector) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Colorselector) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Colorselector) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Colorselector) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Colorselector) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Colorselector) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Colorselector) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Colorselector) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Colorselector) EVASColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Colorselector) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Colorselector) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Colorselector) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Colorselector) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Colorselector) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Colorselector) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Colorselector) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Colorselector) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Colorselector) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Colorselector) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Colorselector) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Colorselector) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Colorselector) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Colorselector) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Colorselector) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Colorselector) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Colorselector) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Colorselector) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Colorselector) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Colorselector) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Colorselector) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Colorselector) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Colorselector) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Colorselector) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Colorselector) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Colorselector) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Colorselector) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Colorselector) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Colorselector) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Colorselector) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Colorselector) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Colorselector) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Colorselector) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Colorselector) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Colorselector) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Colorselector) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Colorselector) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Colorselector) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Colorselector) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Colorselector) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Colorselector) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Colorselector) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Colorselector) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Colorselector) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Colorselector) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Colorselector) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Colorselector) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Colorselector) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Colorselector) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Colorselector) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Colorselector) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Colorselector) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Colorselector) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Colorselector) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Colorselector) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Colorselector) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Colorselector) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Colorselector) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Colorselector) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Colorselector) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Colorselector) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Colorselector) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Colorselector) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Colorselector) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Colorselector) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Colorselector) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Colorselector) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Colorselector) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Colorselector) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Colorselector) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Colorselector) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Colorselector) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Colorselector) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Colorselector) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Colorselector) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Colorselector) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Colorselector) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Colorselector) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Colorselector) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Colorselector) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Colorselector) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Colorselector) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Colorselector) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Colorselector) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Colorselector) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Colorselector) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Colorselector) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Colorselector) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Colorselector) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Colorselector) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Colorselector) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Colorselector) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Colorselector) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Colorselector) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Colorselector) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Colorselector) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Colorselector) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Colorselector) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Colorselector) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Colorselector) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Colorselector) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Colorselector) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Colorselector) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Colorselector) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Colorselector) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Colorselector) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Colorselector) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Colorselector) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Colorselector) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Colorselector) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Colorselector) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Colorselector) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Colorselector) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Colorselector) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Colorselector) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Colorselector) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Colorselector) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Colorselector) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Colorselector) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Colorselector) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Colorselector) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Colorselector) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Colorselector) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Colorselector) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Colorselector) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Colorselector) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Colorselector) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Colorselector) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Colorselector) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Colorselector) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Colorselector) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Colorselector) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Colorselector) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Colorselector) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Colorselector) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Colorselector) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Colorselector) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Colorselector) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Colorselector) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Colorselector) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Colorselector) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Colorselector) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Colorselector) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Colorselector) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Colorselector) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Colorselector) Add() (*EvasObject) {
  _cgo_return_ := C.elm_colorselector_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Colorselector) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.elm_colorselector_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Colorselector) ModeSet(mode C.Elm_Colorselector_Mode) () {
  C.elm_colorselector_mode_set(self.obj, mode)
}

func (self *Colorselector) PaletteColorAdd(r int, g int, b int, a int) (*C.Elm_Object_Item) {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  _cgo_return_ := C.elm_colorselector_palette_color_add(self.obj, _c_r, _c_g, _c_b, _c_a)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Colorselector) PaletteClear() () {
  C.elm_colorselector_palette_clear(self.obj)
}

func (self *Colorselector) PaletteNameSet(palette_name string) () {
  _c_palette_name := C.CString(palette_name)
  C.elm_colorselector_palette_name_set(self.obj, _c_palette_name)
}

func (self *Conformant) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Conformant) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Conformant) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Conformant) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Conformant) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Conformant) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Conformant) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Conformant) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Conformant) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Conformant) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Conformant) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Conformant) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Conformant) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Conformant) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Conformant) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Conformant) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Conformant) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Conformant) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Conformant) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Conformant) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Conformant) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Conformant) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Conformant) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Conformant) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Conformant) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Conformant) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Conformant) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Conformant) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Conformant) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Conformant) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Conformant) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Conformant) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Conformant) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Conformant) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Conformant) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Conformant) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Conformant) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Conformant) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Conformant) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Conformant) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Conformant) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Conformant) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Conformant) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Conformant) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Conformant) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Conformant) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Conformant) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Conformant) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Conformant) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Conformant) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Conformant) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Conformant) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Conformant) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Conformant) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Conformant) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Conformant) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Conformant) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Conformant) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Conformant) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Conformant) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Conformant) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Conformant) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Conformant) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Conformant) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Conformant) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Conformant) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Conformant) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Conformant) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Conformant) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Conformant) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Conformant) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Conformant) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Conformant) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Conformant) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Conformant) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Conformant) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Conformant) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Conformant) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Conformant) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Conformant) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Conformant) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Conformant) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Conformant) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Conformant) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Conformant) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Conformant) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Conformant) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Conformant) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Conformant) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Conformant) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Conformant) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Conformant) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Conformant) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Conformant) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Conformant) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Conformant) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Conformant) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Conformant) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Conformant) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Conformant) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Conformant) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Conformant) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Conformant) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Conformant) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Conformant) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Conformant) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Conformant) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Conformant) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Conformant) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Conformant) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Conformant) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Conformant) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Conformant) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Conformant) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Conformant) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Conformant) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Conformant) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Conformant) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Conformant) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Conformant) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Conformant) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Conformant) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Conformant) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Conformant) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Conformant) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Conformant) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Conformant) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Conformant) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Conformant) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Conformant) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Conformant) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Conformant) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Conformant) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Conformant) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Conformant) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Conformant) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Conformant) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Conformant) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Conformant) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Conformant) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Conformant) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Conformant) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Conformant) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Conformant) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Conformant) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Conformant) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Conformant) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Conformant) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Conformant) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Conformant) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Conformant) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Conformant) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Conformant) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Conformant) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Conformant) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Conformant) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Conformant) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Conformant) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Conformant) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Conformant) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Conformant) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Conformant) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Conformant) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Conformant) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Conformant) Add() (*EvasObject) {
  _cgo_return_ := C.elm_conformant_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Datetime) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Datetime) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Datetime) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Datetime) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Datetime) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Datetime) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Datetime) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Datetime) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Datetime) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Datetime) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Datetime) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Datetime) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Datetime) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Datetime) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Datetime) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Datetime) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Datetime) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Datetime) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Datetime) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Datetime) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Datetime) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Datetime) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Datetime) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Datetime) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Datetime) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Datetime) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Datetime) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Datetime) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Datetime) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Datetime) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Datetime) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Datetime) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Datetime) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Datetime) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Datetime) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Datetime) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Datetime) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Datetime) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Datetime) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Datetime) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Datetime) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Datetime) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Datetime) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Datetime) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Datetime) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Datetime) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Datetime) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Datetime) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Datetime) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Datetime) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Datetime) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Datetime) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Datetime) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Datetime) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Datetime) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Datetime) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Datetime) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Datetime) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Datetime) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Datetime) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Datetime) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Datetime) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Datetime) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Datetime) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Datetime) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Datetime) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Datetime) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Datetime) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Datetime) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Datetime) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Datetime) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Datetime) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Datetime) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Datetime) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Datetime) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Datetime) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Datetime) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Datetime) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Datetime) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Datetime) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Datetime) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Datetime) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Datetime) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Datetime) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Datetime) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Datetime) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Datetime) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Datetime) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Datetime) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Datetime) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Datetime) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Datetime) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Datetime) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Datetime) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Datetime) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Datetime) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Datetime) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Datetime) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Datetime) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Datetime) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Datetime) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Datetime) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Datetime) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Datetime) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Datetime) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Datetime) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Datetime) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Datetime) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Datetime) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Datetime) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Datetime) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Datetime) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Datetime) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Datetime) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Datetime) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Datetime) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Datetime) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Datetime) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Datetime) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Datetime) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Datetime) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Datetime) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Datetime) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Datetime) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Datetime) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Datetime) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Datetime) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Datetime) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Datetime) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Datetime) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Datetime) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Datetime) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Datetime) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Datetime) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Datetime) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Datetime) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Datetime) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Datetime) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Datetime) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Datetime) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Datetime) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Datetime) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Datetime) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Datetime) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Datetime) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Datetime) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Datetime) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Datetime) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Datetime) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Datetime) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Datetime) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Datetime) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Datetime) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Datetime) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Datetime) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Datetime) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Datetime) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Datetime) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Datetime) Add() (*EvasObject) {
  _cgo_return_ := C.elm_datetime_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Datetime) FormatSet(fmt string) () {
  _c_fmt := C.CString(fmt)
  C.elm_datetime_format_set(self.obj, _c_fmt)
}

func (self *Datetime) FieldLimitSet(fieldtype C.Elm_Datetime_Field_Type, min int, max int) () {
  _c_min := C.int(min)
  _c_max := C.int(max)
  C.elm_datetime_field_limit_set(self.obj, fieldtype, _c_min, _c_max)
}

func (self *Datetime) FieldVisibleSet(fieldtype C.Elm_Datetime_Field_Type, visible bool) () {
  _c_visible := (C.Eina_Bool)(0)
  if visible { _c_visible = (C.Eina_Bool)(1) }
  C.elm_datetime_field_visible_set(self.obj, fieldtype, _c_visible)
}

func (self *Diskselector) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Diskselector) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Diskselector) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Diskselector) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Diskselector) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Diskselector) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Diskselector) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Diskselector) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Diskselector) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Diskselector) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Diskselector) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Diskselector) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Diskselector) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Diskselector) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Diskselector) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Diskselector) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Diskselector) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Diskselector) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Diskselector) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Diskselector) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Diskselector) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Diskselector) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Diskselector) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Diskselector) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Diskselector) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Diskselector) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Diskselector) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Diskselector) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Diskselector) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Diskselector) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Diskselector) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Diskselector) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Diskselector) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Diskselector) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Diskselector) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Diskselector) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Diskselector) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Diskselector) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Diskselector) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Diskselector) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Diskselector) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Diskselector) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Diskselector) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Diskselector) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Diskselector) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Diskselector) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Diskselector) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Diskselector) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Diskselector) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Diskselector) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Diskselector) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Diskselector) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Diskselector) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Diskselector) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Diskselector) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Diskselector) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Diskselector) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Diskselector) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Diskselector) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Diskselector) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Diskselector) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Diskselector) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Diskselector) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Diskselector) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Diskselector) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Diskselector) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Diskselector) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Diskselector) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Diskselector) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Diskselector) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Diskselector) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Diskselector) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Diskselector) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Diskselector) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Diskselector) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Diskselector) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Diskselector) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Diskselector) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Diskselector) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Diskselector) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Diskselector) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Diskselector) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Diskselector) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Diskselector) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Diskselector) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Diskselector) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Diskselector) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Diskselector) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Diskselector) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Diskselector) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Diskselector) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Diskselector) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Diskselector) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Diskselector) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Diskselector) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Diskselector) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Diskselector) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Diskselector) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Diskselector) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Diskselector) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Diskselector) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Diskselector) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Diskselector) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Diskselector) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Diskselector) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Diskselector) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Diskselector) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Diskselector) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Diskselector) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Diskselector) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Diskselector) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Diskselector) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Diskselector) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Diskselector) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Diskselector) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Diskselector) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Diskselector) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Diskselector) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Diskselector) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Diskselector) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Diskselector) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Diskselector) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Diskselector) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Diskselector) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Diskselector) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Diskselector) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Diskselector) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Diskselector) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Diskselector) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Diskselector) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Diskselector) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Diskselector) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Diskselector) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Diskselector) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Diskselector) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Diskselector) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Diskselector) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Diskselector) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Diskselector) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Diskselector) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Diskselector) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Diskselector) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Diskselector) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Diskselector) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Diskselector) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Diskselector) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Diskselector) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Diskselector) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Diskselector) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Diskselector) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Diskselector) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Diskselector) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Diskselector) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Diskselector) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Diskselector) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Diskselector) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Diskselector) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Diskselector) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Diskselector) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Diskselector) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Diskselector) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Diskselector) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Diskselector) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Diskselector) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Diskselector) Add() (*EvasObject) {
  _cgo_return_ := C.elm_diskselector_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Diskselector) RoundEnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_diskselector_round_enabled_set(self.obj, _c_enabled)
}

func (self *Diskselector) SideTextMaxLengthSet(len int) () {
  _c_len := C.int(len)
  C.elm_diskselector_side_text_max_length_set(self.obj, _c_len)
}

func (self *Diskselector) DisplayItemNumSet(num int) () {
  _c_num := C.int(num)
  C.elm_diskselector_display_item_num_set(self.obj, _c_num)
}

func (self *Diskselector) Clear() () {
  C.elm_diskselector_clear(self.obj)
}

func (self *Flip) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Flip) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Flip) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Flip) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Flip) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Flip) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Flip) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Flip) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Flip) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Flip) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Flip) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Flip) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Flip) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flip) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Flip) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Flip) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Flip) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Flip) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Flip) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Flip) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Flip) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Flip) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Flip) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Flip) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Flip) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Flip) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Flip) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Flip) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Flip) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Flip) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Flip) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Flip) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Flip) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Flip) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Flip) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Flip) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Flip) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Flip) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Flip) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Flip) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Flip) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Flip) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Flip) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Flip) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Flip) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Flip) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Flip) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Flip) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Flip) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Flip) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Flip) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Flip) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Flip) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Flip) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Flip) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Flip) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Flip) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Flip) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Flip) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Flip) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Flip) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Flip) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Flip) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Flip) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Flip) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Flip) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Flip) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Flip) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Flip) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Flip) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Flip) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Flip) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Flip) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Flip) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flip) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flip) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flip) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flip) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Flip) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Flip) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Flip) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Flip) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Flip) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Flip) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Flip) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Flip) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Flip) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Flip) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Flip) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Flip) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Flip) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flip) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Flip) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Flip) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Flip) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Flip) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Flip) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Flip) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Flip) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Flip) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Flip) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Flip) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Flip) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Flip) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Flip) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Flip) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Flip) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flip) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flip) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Flip) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Flip) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Flip) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Flip) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Flip) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Flip) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Flip) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Flip) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Flip) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Flip) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Flip) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flip) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flip) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flip) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flip) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flip) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flip) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Flip) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Flip) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Flip) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Flip) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Flip) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flip) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Flip) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Flip) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Flip) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Flip) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Flip) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Flip) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Flip) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Flip) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Flip) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Flip) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Flip) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Flip) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Flip) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Flip) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Flip) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Flip) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Flip) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Flip) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Flip) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Flip) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Flip) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Flip) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Flip) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Flip) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Flip) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Flip) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Flip) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flip) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Flip) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Flip) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Flip) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Flip) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Flip) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Flip) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Flip) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Flip) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Flip) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Flip) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Flip) Add() (*EvasObject) {
  _cgo_return_ := C.elm_flip_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flip) PerspectiveSet(foc C.Evas_Coord, x C.Evas_Coord, y C.Evas_Coord) () {
  C.elm_flip_perspective_set(self.obj, foc, x, y)
}

func (self *Flip) Go(mode C.Elm_Flip_Mode) () {
  C.elm_flip_go(self.obj, mode)
}

func (self *Flip) GoTo(front bool, mode C.Elm_Flip_Mode) () {
  _c_front := (C.Eina_Bool)(0)
  if front { _c_front = (C.Eina_Bool)(1) }
  C.elm_flip_go_to(self.obj, _c_front, mode)
}

func (self *Flip) InteractionSet(mode C.Elm_Flip_Interaction) () {
  C.elm_flip_interaction_set(self.obj, mode)
}

func (self *Flip) InteractionDirectionEnabledSet(dir C.Elm_Flip_Direction, enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_flip_interaction_direction_enabled_set(self.obj, dir, _c_enabled)
}

func (self *Flip) InteractionDirectionEnabledGet(dir C.Elm_Flip_Direction) (bool) {
  _cgo_return_ := C.elm_flip_interaction_direction_enabled_get(self.obj, dir)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flip) InteractionDirectionHitsizeSet(dir C.Elm_Flip_Direction, hitsize float64) () {
  _c_hitsize := C.double(hitsize)
  C.elm_flip_interaction_direction_hitsize_set(self.obj, dir, _c_hitsize)
}

func (self *Flip) InteractionDirectionHitsizeGet(dir C.Elm_Flip_Direction) (float64) {
  _cgo_return_ := C.elm_flip_interaction_direction_hitsize_get(self.obj, dir)
  _go_return_ := float64(_cgo_return_)
  return _go_return_
}

func (self *Flipselector) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Flipselector) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Flipselector) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Flipselector) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Flipselector) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Flipselector) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Flipselector) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Flipselector) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Flipselector) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Flipselector) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Flipselector) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Flipselector) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Flipselector) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flipselector) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Flipselector) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Flipselector) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Flipselector) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Flipselector) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Flipselector) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Flipselector) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Flipselector) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Flipselector) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Flipselector) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Flipselector) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Flipselector) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Flipselector) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Flipselector) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Flipselector) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Flipselector) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Flipselector) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Flipselector) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Flipselector) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Flipselector) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Flipselector) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Flipselector) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Flipselector) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Flipselector) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Flipselector) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Flipselector) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Flipselector) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Flipselector) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Flipselector) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Flipselector) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Flipselector) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Flipselector) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Flipselector) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Flipselector) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Flipselector) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Flipselector) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Flipselector) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Flipselector) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Flipselector) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Flipselector) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Flipselector) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Flipselector) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Flipselector) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Flipselector) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Flipselector) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Flipselector) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Flipselector) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Flipselector) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Flipselector) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Flipselector) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Flipselector) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Flipselector) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Flipselector) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Flipselector) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Flipselector) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Flipselector) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Flipselector) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Flipselector) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Flipselector) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Flipselector) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Flipselector) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flipselector) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flipselector) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flipselector) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flipselector) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Flipselector) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Flipselector) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Flipselector) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Flipselector) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Flipselector) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Flipselector) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Flipselector) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Flipselector) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Flipselector) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Flipselector) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Flipselector) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Flipselector) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Flipselector) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Flipselector) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Flipselector) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Flipselector) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Flipselector) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Flipselector) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Flipselector) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Flipselector) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Flipselector) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Flipselector) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Flipselector) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Flipselector) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Flipselector) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Flipselector) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Flipselector) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Flipselector) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Flipselector) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flipselector) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flipselector) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Flipselector) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Flipselector) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Flipselector) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Flipselector) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flipselector) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flipselector) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flipselector) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flipselector) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Flipselector) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flipselector) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Flipselector) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Flipselector) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Flipselector) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Flipselector) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Flipselector) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flipselector) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Flipselector) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Flipselector) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Flipselector) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Flipselector) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Flipselector) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Flipselector) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Flipselector) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Flipselector) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Flipselector) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Flipselector) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Flipselector) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Flipselector) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Flipselector) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Flipselector) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Flipselector) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Flipselector) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Flipselector) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Flipselector) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Flipselector) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Flipselector) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Flipselector) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Flipselector) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Flipselector) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Flipselector) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Flipselector) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Flipselector) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Flipselector) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flipselector) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Flipselector) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Flipselector) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Flipselector) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Flipselector) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Flipselector) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Flipselector) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Flipselector) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Flipselector) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Flipselector) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Flipselector) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Flipselector) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Flipselector) Add() (*EvasObject) {
  _cgo_return_ := C.elm_flipselector_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Flipselector) FlipNext() () {
  C.elm_flipselector_flip_next(self.obj)
}

func (self *Flipselector) FlipPrev() () {
  C.elm_flipselector_flip_prev(self.obj)
}

func (self *Flipselector) FirstIntervalSet(interval float64) () {
  _c_interval := C.double(interval)
  C.elm_flipselector_first_interval_set(self.obj, _c_interval)
}

func (self *Frame) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Frame) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Frame) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Frame) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Frame) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Frame) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Frame) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Frame) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Frame) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Frame) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Frame) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Frame) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Frame) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Frame) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Frame) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Frame) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Frame) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Frame) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Frame) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Frame) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Frame) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Frame) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Frame) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Frame) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Frame) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Frame) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Frame) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Frame) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Frame) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Frame) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Frame) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Frame) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Frame) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Frame) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Frame) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Frame) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Frame) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Frame) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Frame) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Frame) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Frame) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Frame) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Frame) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Frame) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Frame) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Frame) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Frame) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Frame) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Frame) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Frame) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Frame) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Frame) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Frame) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Frame) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Frame) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Frame) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Frame) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Frame) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Frame) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Frame) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Frame) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Frame) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Frame) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Frame) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Frame) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Frame) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Frame) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Frame) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Frame) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Frame) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Frame) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Frame) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Frame) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Frame) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Frame) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Frame) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Frame) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Frame) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Frame) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Frame) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Frame) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Frame) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Frame) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Frame) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Frame) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Frame) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Frame) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Frame) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Frame) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Frame) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Frame) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Frame) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Frame) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Frame) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Frame) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Frame) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Frame) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Frame) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Frame) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Frame) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Frame) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Frame) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Frame) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Frame) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Frame) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Frame) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Frame) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Frame) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Frame) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Frame) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Frame) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Frame) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Frame) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Frame) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Frame) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Frame) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Frame) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Frame) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Frame) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Frame) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Frame) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Frame) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Frame) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Frame) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Frame) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Frame) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Frame) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Frame) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Frame) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Frame) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Frame) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Frame) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Frame) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Frame) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Frame) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Frame) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Frame) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Frame) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Frame) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Frame) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Frame) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Frame) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Frame) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Frame) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Frame) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Frame) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Frame) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Frame) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Frame) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Frame) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Frame) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Frame) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Frame) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Frame) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Frame) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Frame) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Frame) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Frame) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Frame) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Frame) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Frame) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Frame) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Frame) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Frame) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Frame) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Frame) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Frame) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Frame) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Frame) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Frame) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Frame) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Frame) Add() (*EvasObject) {
  _cgo_return_ := C.elm_frame_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Frame) AutocollapseSet(autocollapse bool) () {
  _c_autocollapse := (C.Eina_Bool)(0)
  if autocollapse { _c_autocollapse = (C.Eina_Bool)(1) }
  C.elm_frame_autocollapse_set(self.obj, _c_autocollapse)
}

func (self *Frame) CollapseSet(collapse bool) () {
  _c_collapse := (C.Eina_Bool)(0)
  if collapse { _c_collapse = (C.Eina_Bool)(1) }
  C.elm_frame_collapse_set(self.obj, _c_collapse)
}

func (self *Frame) CollapseGo(collapse bool) () {
  _c_collapse := (C.Eina_Bool)(0)
  if collapse { _c_collapse = (C.Eina_Bool)(1) }
  C.elm_frame_collapse_go(self.obj, _c_collapse)
}

func (self *Gengrid) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Gengrid) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Gengrid) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Gengrid) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Gengrid) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Gengrid) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Gengrid) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Gengrid) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Gengrid) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Gengrid) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Gengrid) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Gengrid) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Gengrid) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Gengrid) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Gengrid) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Gengrid) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Gengrid) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Gengrid) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Gengrid) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Gengrid) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Gengrid) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Gengrid) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Gengrid) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Gengrid) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Gengrid) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Gengrid) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Gengrid) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Gengrid) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Gengrid) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Gengrid) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Gengrid) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Gengrid) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Gengrid) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Gengrid) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Gengrid) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Gengrid) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Gengrid) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Gengrid) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Gengrid) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Gengrid) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Gengrid) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Gengrid) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Gengrid) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Gengrid) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Gengrid) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Gengrid) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Gengrid) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Gengrid) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Gengrid) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Gengrid) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Gengrid) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Gengrid) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Gengrid) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Gengrid) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Gengrid) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Gengrid) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Gengrid) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Gengrid) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Gengrid) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Gengrid) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Gengrid) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Gengrid) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Gengrid) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Gengrid) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Gengrid) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Gengrid) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Gengrid) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Gengrid) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Gengrid) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Gengrid) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Gengrid) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Gengrid) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Gengrid) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Gengrid) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Gengrid) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Gengrid) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Gengrid) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Gengrid) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Gengrid) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Gengrid) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Gengrid) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Gengrid) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Gengrid) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Gengrid) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Gengrid) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Gengrid) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Gengrid) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Gengrid) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Gengrid) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Gengrid) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Gengrid) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Gengrid) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Gengrid) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Gengrid) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Gengrid) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Gengrid) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Gengrid) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Gengrid) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Gengrid) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Gengrid) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Gengrid) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Gengrid) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Gengrid) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Gengrid) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Gengrid) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Gengrid) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Gengrid) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Gengrid) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Gengrid) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Gengrid) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Gengrid) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Gengrid) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Gengrid) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Gengrid) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Gengrid) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Gengrid) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Gengrid) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Gengrid) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Gengrid) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Gengrid) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Gengrid) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Gengrid) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Gengrid) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Gengrid) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Gengrid) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Gengrid) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Gengrid) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Gengrid) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Gengrid) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Gengrid) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Gengrid) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Gengrid) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Gengrid) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Gengrid) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Gengrid) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Gengrid) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Gengrid) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Gengrid) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Gengrid) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Gengrid) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Gengrid) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Gengrid) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Gengrid) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Gengrid) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Gengrid) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Gengrid) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Gengrid) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Gengrid) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Gengrid) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Gengrid) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Gengrid) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Gengrid) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Gengrid) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Gengrid) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Gengrid) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Gengrid) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Gengrid) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Gengrid) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Gengrid) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Gengrid) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Gengrid) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Gengrid) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Gengrid) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Gengrid) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Gengrid) Add() (*EvasObject) {
  _cgo_return_ := C.elm_gengrid_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Gengrid) Clear() () {
  C.elm_gengrid_clear(self.obj)
}

func (self *Gengrid) MultiSelectSet(multi bool) () {
  _c_multi := (C.Eina_Bool)(0)
  if multi { _c_multi = (C.Eina_Bool)(1) }
  C.elm_gengrid_multi_select_set(self.obj, _c_multi)
}

func (self *Gengrid) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_gengrid_horizontal_set(self.obj, _c_horizontal)
}

func (self *Gengrid) RealizedItemsUpdate() () {
  C.elm_gengrid_realized_items_update(self.obj)
}

func (self *Gengrid) ItemSizeSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_gengrid_item_size_set(self.obj, w, h)
}

func (self *Gengrid) GroupItemSizeSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_gengrid_group_item_size_set(self.obj, w, h)
}

func (self *Gengrid) AlignSet(align_x float64, align_y float64) () {
  _c_align_x := C.double(align_x)
  _c_align_y := C.double(align_y)
  C.elm_gengrid_align_set(self.obj, _c_align_x, _c_align_y)
}

func (self *Gengrid) ReorderModeSet(reorder_mode bool) () {
  _c_reorder_mode := (C.Eina_Bool)(0)
  if reorder_mode { _c_reorder_mode = (C.Eina_Bool)(1) }
  C.elm_gengrid_reorder_mode_set(self.obj, _c_reorder_mode)
}

func (self *Gengrid) FilledSet(fill bool) () {
  _c_fill := (C.Eina_Bool)(0)
  if fill { _c_fill = (C.Eina_Bool)(1) }
  C.elm_gengrid_filled_set(self.obj, _c_fill)
}

func (self *Gengrid) SelectModeSet(mode C.Elm_Object_Select_Mode) () {
  C.elm_gengrid_select_mode_set(self.obj, mode)
}

func (self *Gengrid) HighlightModeSet(highlight bool) () {
  _c_highlight := (C.Eina_Bool)(0)
  if highlight { _c_highlight = (C.Eina_Bool)(1) }
  C.elm_gengrid_highlight_mode_set(self.obj, _c_highlight)
}

func (self *Genlist) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Genlist) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Genlist) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Genlist) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Genlist) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Genlist) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Genlist) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Genlist) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Genlist) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Genlist) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Genlist) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Genlist) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Genlist) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Genlist) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Genlist) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Genlist) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Genlist) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Genlist) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Genlist) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Genlist) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Genlist) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Genlist) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Genlist) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Genlist) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Genlist) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Genlist) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Genlist) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Genlist) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Genlist) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Genlist) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Genlist) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Genlist) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Genlist) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Genlist) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Genlist) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Genlist) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Genlist) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Genlist) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Genlist) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Genlist) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Genlist) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Genlist) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Genlist) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Genlist) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Genlist) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Genlist) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Genlist) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Genlist) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Genlist) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Genlist) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Genlist) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Genlist) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Genlist) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Genlist) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Genlist) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Genlist) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Genlist) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Genlist) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Genlist) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Genlist) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Genlist) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Genlist) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Genlist) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Genlist) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Genlist) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Genlist) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Genlist) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Genlist) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Genlist) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Genlist) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Genlist) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Genlist) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Genlist) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Genlist) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Genlist) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Genlist) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Genlist) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Genlist) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Genlist) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Genlist) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Genlist) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Genlist) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Genlist) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Genlist) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Genlist) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Genlist) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Genlist) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Genlist) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Genlist) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Genlist) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Genlist) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Genlist) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Genlist) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Genlist) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Genlist) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Genlist) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Genlist) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Genlist) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Genlist) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Genlist) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Genlist) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Genlist) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Genlist) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Genlist) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Genlist) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Genlist) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Genlist) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Genlist) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Genlist) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Genlist) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Genlist) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Genlist) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Genlist) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Genlist) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Genlist) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Genlist) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Genlist) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Genlist) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Genlist) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Genlist) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Genlist) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Genlist) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Genlist) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Genlist) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Genlist) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Genlist) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Genlist) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Genlist) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Genlist) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Genlist) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Genlist) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Genlist) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Genlist) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Genlist) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Genlist) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Genlist) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Genlist) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Genlist) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Genlist) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Genlist) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Genlist) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Genlist) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Genlist) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Genlist) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Genlist) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Genlist) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Genlist) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Genlist) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Genlist) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Genlist) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Genlist) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Genlist) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Genlist) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Genlist) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Genlist) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Genlist) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Genlist) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Genlist) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Genlist) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Genlist) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Genlist) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Genlist) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Genlist) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Genlist) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Genlist) Add() (*EvasObject) {
  _cgo_return_ := C.elm_genlist_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Genlist) Clear() () {
  C.elm_genlist_clear(self.obj)
}

func (self *Genlist) MultiSelectSet(multi bool) () {
  _c_multi := (C.Eina_Bool)(0)
  if multi { _c_multi = (C.Eina_Bool)(1) }
  C.elm_genlist_multi_select_set(self.obj, _c_multi)
}

func (self *Genlist) ModeSet(mode C.Elm_List_Mode) () {
  C.elm_genlist_mode_set(self.obj, mode)
}

func (self *Genlist) RealizedItemsUpdate() () {
  C.elm_genlist_realized_items_update(self.obj)
}

func (self *Genlist) HomogeneousSet(homogeneous bool) () {
  _c_homogeneous := (C.Eina_Bool)(0)
  if homogeneous { _c_homogeneous = (C.Eina_Bool)(1) }
  C.elm_genlist_homogeneous_set(self.obj, _c_homogeneous)
}

func (self *Genlist) BlockCountSet(count int) () {
  _c_count := C.int(count)
  C.elm_genlist_block_count_set(self.obj, _c_count)
}

func (self *Genlist) LongpressTimeoutSet(timeout float64) () {
  _c_timeout := C.double(timeout)
  C.elm_genlist_longpress_timeout_set(self.obj, _c_timeout)
}

func (self *Genlist) ReorderModeSet(reorder_mode bool) () {
  _c_reorder_mode := (C.Eina_Bool)(0)
  if reorder_mode { _c_reorder_mode = (C.Eina_Bool)(1) }
  C.elm_genlist_reorder_mode_set(self.obj, _c_reorder_mode)
}

func (self *Genlist) DecorateModeSet(decorated bool) () {
  _c_decorated := (C.Eina_Bool)(0)
  if decorated { _c_decorated = (C.Eina_Bool)(1) }
  C.elm_genlist_decorate_mode_set(self.obj, _c_decorated)
}

func (self *Genlist) TreeEffectEnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_genlist_tree_effect_enabled_set(self.obj, _c_enabled)
}

func (self *Genlist) SelectModeSet(mode C.Elm_Object_Select_Mode) () {
  C.elm_genlist_select_mode_set(self.obj, mode)
}

func (self *Genlist) HighlightModeSet(highlight bool) () {
  _c_highlight := (C.Eina_Bool)(0)
  if highlight { _c_highlight = (C.Eina_Bool)(1) }
  C.elm_genlist_highlight_mode_set(self.obj, _c_highlight)
}

func (self *GestureLayer) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *GestureLayer) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *GestureLayer) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *GestureLayer) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *GestureLayer) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *GestureLayer) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *GestureLayer) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *GestureLayer) Del() () {
  C.evas_object_del(self.obj)
}

func (self *GestureLayer) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *GestureLayer) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *GestureLayer) Show() () {
  C.evas_object_show(self.obj)
}

func (self *GestureLayer) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *GestureLayer) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *GestureLayer) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *GestureLayer) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *GestureLayer) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *GestureLayer) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *GestureLayer) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *GestureLayer) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *GestureLayer) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *GestureLayer) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *GestureLayer) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *GestureLayer) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *GestureLayer) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *GestureLayer) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *GestureLayer) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *GestureLayer) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *GestureLayer) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *GestureLayer) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *GestureLayer) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *GestureLayer) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *GestureLayer) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *GestureLayer) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *GestureLayer) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *GestureLayer) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *GestureLayer) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *GestureLayer) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *GestureLayer) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *GestureLayer) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *GestureLayer) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *GestureLayer) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *GestureLayer) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *GestureLayer) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *GestureLayer) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *GestureLayer) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *GestureLayer) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *GestureLayer) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *GestureLayer) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *GestureLayer) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *GestureLayer) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *GestureLayer) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *GestureLayer) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *GestureLayer) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *GestureLayer) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *GestureLayer) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *GestureLayer) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *GestureLayer) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *GestureLayer) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *GestureLayer) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *GestureLayer) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *GestureLayer) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *GestureLayer) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *GestureLayer) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *GestureLayer) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *GestureLayer) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *GestureLayer) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *GestureLayer) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *GestureLayer) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *GestureLayer) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *GestureLayer) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *GestureLayer) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *GestureLayer) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *GestureLayer) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *GestureLayer) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *GestureLayer) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *GestureLayer) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *GestureLayer) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *GestureLayer) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *GestureLayer) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *GestureLayer) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *GestureLayer) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *GestureLayer) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *GestureLayer) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *GestureLayer) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *GestureLayer) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *GestureLayer) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *GestureLayer) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *GestureLayer) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *GestureLayer) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *GestureLayer) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *GestureLayer) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *GestureLayer) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *GestureLayer) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *GestureLayer) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *GestureLayer) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *GestureLayer) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *GestureLayer) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *GestureLayer) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *GestureLayer) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *GestureLayer) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *GestureLayer) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *GestureLayer) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *GestureLayer) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *GestureLayer) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *GestureLayer) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *GestureLayer) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *GestureLayer) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *GestureLayer) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *GestureLayer) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *GestureLayer) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *GestureLayer) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *GestureLayer) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *GestureLayer) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *GestureLayer) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *GestureLayer) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *GestureLayer) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *GestureLayer) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *GestureLayer) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *GestureLayer) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *GestureLayer) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *GestureLayer) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *GestureLayer) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *GestureLayer) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *GestureLayer) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *GestureLayer) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *GestureLayer) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *GestureLayer) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *GestureLayer) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *GestureLayer) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *GestureLayer) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *GestureLayer) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *GestureLayer) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *GestureLayer) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *GestureLayer) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *GestureLayer) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *GestureLayer) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *GestureLayer) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *GestureLayer) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *GestureLayer) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *GestureLayer) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *GestureLayer) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *GestureLayer) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *GestureLayer) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *GestureLayer) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *GestureLayer) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *GestureLayer) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *GestureLayer) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *GestureLayer) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *GestureLayer) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *GestureLayer) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *GestureLayer) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *GestureLayer) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *GestureLayer) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *GestureLayer) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *GestureLayer) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *GestureLayer) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *GestureLayer) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *GestureLayer) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *GestureLayer) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *GestureLayer) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *GestureLayer) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *GestureLayer) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *GestureLayer) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *GestureLayer) HoldEventsSet(hold_events bool) () {
  _c_hold_events := (C.Eina_Bool)(0)
  if hold_events { _c_hold_events = (C.Eina_Bool)(1) }
  C.elm_gesture_layer_hold_events_set(self.obj, _c_hold_events)
}

func (self *GestureLayer) ZoomStepSet(step float64) () {
  _c_step := C.double(step)
  C.elm_gesture_layer_zoom_step_set(self.obj, _c_step)
}

func (self *GestureLayer) RotateStepSet(step float64) () {
  _c_step := C.double(step)
  C.elm_gesture_layer_rotate_step_set(self.obj, _c_step)
}

func (self *GestureLayer) Attach(target EvasObjectInterface) (bool) {
  var _c_target *C.Evas_Object
  if target != nil { _c_target = target.GetObj() }
  _cgo_return_ := C.elm_gesture_layer_attach(self.obj, _c_target)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *GestureLayer) Add() (*EvasObject) {
  _cgo_return_ := C.elm_gesture_layer_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Glview) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Glview) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Glview) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Glview) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Glview) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Glview) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Glview) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Glview) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Glview) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Glview) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Glview) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Glview) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Glview) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Glview) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Glview) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Glview) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Glview) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Glview) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Glview) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Glview) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Glview) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Glview) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Glview) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Glview) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Glview) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Glview) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Glview) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Glview) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Glview) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Glview) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Glview) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Glview) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Glview) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Glview) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Glview) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Glview) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Glview) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Glview) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Glview) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Glview) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Glview) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Glview) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Glview) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Glview) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Glview) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Glview) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Glview) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Glview) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Glview) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Glview) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Glview) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Glview) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Glview) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Glview) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Glview) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Glview) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Glview) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Glview) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Glview) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Glview) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Glview) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Glview) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Glview) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Glview) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Glview) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Glview) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Glview) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Glview) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Glview) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Glview) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Glview) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Glview) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Glview) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Glview) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Glview) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Glview) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Glview) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Glview) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Glview) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Glview) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Glview) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Glview) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Glview) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Glview) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Glview) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Glview) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Glview) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Glview) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Glview) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Glview) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Glview) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Glview) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Glview) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Glview) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Glview) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Glview) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Glview) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Glview) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Glview) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Glview) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Glview) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Glview) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Glview) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Glview) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Glview) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Glview) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Glview) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Glview) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Glview) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Glview) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Glview) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Glview) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Glview) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Glview) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Glview) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Glview) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Glview) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Glview) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Glview) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Glview) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Glview) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Glview) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Glview) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Glview) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Glview) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Glview) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Glview) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Glview) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Glview) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Glview) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Glview) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Glview) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Glview) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Glview) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Glview) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Glview) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Glview) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Glview) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Glview) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Glview) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Glview) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Glview) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Glview) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Glview) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Glview) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Glview) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Glview) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Glview) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Glview) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Glview) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Glview) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Glview) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Glview) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Glview) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Glview) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Glview) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Glview) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Glview) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Glview) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Glview) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Glview) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Glview) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Glview) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Glview) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Glview) Add() (*EvasObject) {
  _cgo_return_ := C.elm_glview_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Glview) SizeSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_glview_size_set(self.obj, w, h)
}

func (self *Glview) ModeSet(mode C.Elm_GLView_Mode) (bool) {
  _cgo_return_ := C.elm_glview_mode_set(self.obj, mode)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) ResizePolicySet(policy C.Elm_GLView_Resize_Policy) (bool) {
  _cgo_return_ := C.elm_glview_resize_policy_set(self.obj, policy)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) RenderPolicySet(policy C.Elm_GLView_Render_Policy) (bool) {
  _cgo_return_ := C.elm_glview_render_policy_set(self.obj, policy)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Glview) ChangedSet() () {
  C.elm_glview_changed_set(self.obj)
}

func (self *Grid) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Grid) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Grid) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Grid) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Grid) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Grid) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Grid) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Grid) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Grid) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Grid) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Grid) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Grid) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Grid) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Grid) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Grid) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Grid) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Grid) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Grid) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Grid) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Grid) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Grid) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Grid) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Grid) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Grid) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Grid) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Grid) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Grid) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Grid) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Grid) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Grid) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Grid) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Grid) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Grid) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Grid) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Grid) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Grid) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Grid) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Grid) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Grid) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Grid) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Grid) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Grid) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Grid) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Grid) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Grid) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Grid) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Grid) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Grid) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Grid) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Grid) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Grid) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Grid) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Grid) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Grid) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Grid) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Grid) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Grid) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Grid) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Grid) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Grid) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Grid) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Grid) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Grid) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Grid) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Grid) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Grid) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Grid) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Grid) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Grid) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Grid) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Grid) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Grid) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Grid) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Grid) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Grid) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Grid) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Grid) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Grid) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Grid) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Grid) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Grid) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Grid) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Grid) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Grid) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Grid) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Grid) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Grid) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Grid) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Grid) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Grid) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Grid) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Grid) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Grid) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Grid) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Grid) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Grid) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Grid) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Grid) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Grid) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Grid) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Grid) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Grid) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Grid) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Grid) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Grid) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Grid) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Grid) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Grid) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Grid) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Grid) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Grid) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Grid) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Grid) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Grid) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Grid) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Grid) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Grid) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Grid) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Grid) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Grid) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Grid) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Grid) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Grid) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Grid) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Grid) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Grid) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Grid) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Grid) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Grid) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Grid) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Grid) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Grid) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Grid) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Grid) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Grid) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Grid) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Grid) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Grid) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Grid) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Grid) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Grid) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Grid) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Grid) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Grid) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Grid) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Grid) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Grid) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Grid) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Grid) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Grid) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Grid) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Grid) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Grid) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Grid) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Grid) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Grid) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Grid) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Grid) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Grid) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Grid) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Grid) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Grid) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Grid) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Grid) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Grid) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Grid) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Grid) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Grid) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Grid) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Grid) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Grid) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Grid) Add() (*EvasObject) {
  _cgo_return_ := C.elm_grid_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Grid) SizeSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_grid_size_set(self.obj, w, h)
}

func (self *Grid) Pack(subobj EvasObjectInterface, x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_grid_pack(self.obj, _c_subobj, x, y, w, h)
}

func (self *Grid) Unpack(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_grid_unpack(self.obj, _c_subobj)
}

func (self *Grid) Clear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.elm_grid_clear(self.obj, _c_clear)
}

func (self *Grid) PackSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.elm_grid_pack_set(self.obj, x, y, w, h)
}

func (self *Grid) PackGet(x *C.Evas_Coord, y *C.Evas_Coord, w *C.Evas_Coord, h *C.Evas_Coord) () {
  C.elm_grid_pack_get(self.obj, x, y, w, h)
}

func (self *Hover) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Hover) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Hover) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Hover) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Hover) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Hover) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Hover) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Hover) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Hover) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Hover) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Hover) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Hover) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Hover) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hover) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Hover) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Hover) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Hover) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Hover) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Hover) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Hover) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Hover) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Hover) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Hover) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Hover) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Hover) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Hover) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Hover) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Hover) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Hover) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Hover) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Hover) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Hover) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Hover) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Hover) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Hover) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Hover) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Hover) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Hover) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Hover) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Hover) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Hover) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Hover) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Hover) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Hover) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Hover) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Hover) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Hover) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Hover) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Hover) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Hover) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Hover) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Hover) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Hover) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Hover) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Hover) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Hover) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Hover) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Hover) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Hover) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Hover) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Hover) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Hover) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Hover) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Hover) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Hover) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Hover) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Hover) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Hover) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Hover) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Hover) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Hover) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Hover) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Hover) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Hover) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hover) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hover) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hover) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hover) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Hover) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Hover) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Hover) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Hover) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Hover) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Hover) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Hover) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Hover) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Hover) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Hover) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Hover) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Hover) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Hover) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Hover) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Hover) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Hover) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Hover) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Hover) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Hover) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Hover) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Hover) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Hover) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Hover) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Hover) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Hover) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Hover) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Hover) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Hover) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Hover) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hover) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hover) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Hover) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Hover) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Hover) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Hover) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Hover) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Hover) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Hover) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Hover) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Hover) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Hover) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Hover) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hover) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hover) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hover) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hover) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Hover) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hover) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Hover) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Hover) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Hover) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Hover) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Hover) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hover) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Hover) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Hover) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Hover) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Hover) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Hover) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Hover) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Hover) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Hover) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Hover) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Hover) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Hover) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Hover) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Hover) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Hover) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Hover) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Hover) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Hover) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Hover) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Hover) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Hover) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Hover) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Hover) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Hover) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Hover) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Hover) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Hover) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Hover) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hover) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Hover) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Hover) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Hover) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Hover) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Hover) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Hover) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Hover) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Hover) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Hover) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Hover) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Hover) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Hover) Add() (*EvasObject) {
  _cgo_return_ := C.elm_hover_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Hover) TargetSet(target EvasObjectInterface) () {
  var _c_target *C.Evas_Object
  if target != nil { _c_target = target.GetObj() }
  C.elm_hover_target_set(self.obj, _c_target)
}

func (self *Hover) ParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_hover_parent_set(self.obj, _c_parent)
}

func (self *Hover) Dismiss() () {
  C.elm_hover_dismiss(self.obj)
}

func (self *Image) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Image) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Image) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Image) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Image) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Image) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Image) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Image) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Image) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Image) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Image) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Image) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Image) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Image) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Image) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Image) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Image) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Image) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Image) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Image) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Image) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Image) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Image) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Image) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Image) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Image) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Image) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Image) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Image) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Image) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Image) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Image) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Image) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Image) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Image) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Image) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Image) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Image) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Image) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Image) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Image) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Image) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Image) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Image) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Image) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Image) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Image) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Image) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Image) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Image) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Image) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Image) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Image) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Image) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Image) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Image) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Image) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Image) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Image) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Image) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Image) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Image) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Image) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Image) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Image) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Image) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Image) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Image) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Image) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Image) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Image) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Image) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Image) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Image) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Image) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Image) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Image) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Image) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Image) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Image) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Image) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Image) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Image) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Image) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Image) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Image) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Image) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Image) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Image) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Image) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Image) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Image) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Image) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Image) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Image) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Image) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Image) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Image) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Image) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Image) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Image) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Image) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Image) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Image) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Image) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Image) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Image) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Image) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Image) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Image) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Image) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Image) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Image) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Image) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Image) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Image) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Image) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Image) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Image) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Image) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Image) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Image) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Image) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Image) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Image) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Image) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Image) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Image) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Image) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Image) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Image) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Image) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Image) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Image) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Image) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Image) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Image) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Image) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Image) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Image) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Image) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Image) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Image) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Image) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Image) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Image) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Image) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Image) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Image) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Image) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Image) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Image) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Image) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Image) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Image) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Image) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Image) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Image) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Image) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Image) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Image) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Image) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Image) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Image) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Image) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Image) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Image) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Image) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Image) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Image) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Image) Add() (*EvasObject) {
  _cgo_return_ := C.elm_image_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Image) MemfileSet(img unsafe.Pointer, size uint64, format string, key string) (bool) {
  _c_size := C.size_t(size)
  _c_format := C.CString(format)
  _c_key := C.CString(key)
  _cgo_return_ := C.elm_image_memfile_set(self.obj, img, _c_size, _c_format, _c_key)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) FileSet(file string, group string) (bool) {
  _c_file := C.CString(file)
  _c_group := C.CString(group)
  _cgo_return_ := C.elm_image_file_set(self.obj, _c_file, _c_group)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Image) SmoothSet(smooth bool) () {
  _c_smooth := (C.Eina_Bool)(0)
  if smooth { _c_smooth = (C.Eina_Bool)(1) }
  C.elm_image_smooth_set(self.obj, _c_smooth)
}

func (self *Image) NoScaleSet(no_scale bool) () {
  _c_no_scale := (C.Eina_Bool)(0)
  if no_scale { _c_no_scale = (C.Eina_Bool)(1) }
  C.elm_image_no_scale_set(self.obj, _c_no_scale)
}

func (self *Image) ResizableSet(size_up bool, size_down bool) () {
  _c_size_up := (C.Eina_Bool)(0)
  if size_up { _c_size_up = (C.Eina_Bool)(1) }
  _c_size_down := (C.Eina_Bool)(0)
  if size_down { _c_size_down = (C.Eina_Bool)(1) }
  C.elm_image_resizable_set(self.obj, _c_size_up, _c_size_down)
}

func (self *Image) FillOutsideSet(fill_outside bool) () {
  _c_fill_outside := (C.Eina_Bool)(0)
  if fill_outside { _c_fill_outside = (C.Eina_Bool)(1) }
  C.elm_image_fill_outside_set(self.obj, _c_fill_outside)
}

func (self *Image) PreloadDisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_image_preload_disabled_set(self.obj, _c_disabled)
}

func (self *Image) PrescaleSet(size int) () {
  _c_size := C.int(size)
  C.elm_image_prescale_set(self.obj, _c_size)
}

func (self *Image) OrientSet(orient C.Elm_Image_Orient) () {
  C.elm_image_orient_set(self.obj, orient)
}

func (self *Image) EditableSet(set bool) () {
  _c_set := (C.Eina_Bool)(0)
  if set { _c_set = (C.Eina_Bool)(1) }
  C.elm_image_editable_set(self.obj, _c_set)
}

func (self *Image) AspectFixedSet(fixed bool) () {
  _c_fixed := (C.Eina_Bool)(0)
  if fixed { _c_fixed = (C.Eina_Bool)(1) }
  C.elm_image_aspect_fixed_set(self.obj, _c_fixed)
}

func (self *Image) AnimatedSet(animated bool) () {
  _c_animated := (C.Eina_Bool)(0)
  if animated { _c_animated = (C.Eina_Bool)(1) }
  C.elm_image_animated_set(self.obj, _c_animated)
}

func (self *Image) AnimatedPlaySet(play bool) () {
  _c_play := (C.Eina_Bool)(0)
  if play { _c_play = (C.Eina_Bool)(1) }
  C.elm_image_animated_play_set(self.obj, _c_play)
}

func (self *Index) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Index) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Index) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Index) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Index) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Index) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Index) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Index) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Index) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Index) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Index) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Index) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Index) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Index) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Index) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Index) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Index) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Index) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Index) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Index) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Index) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Index) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Index) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Index) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Index) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Index) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Index) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Index) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Index) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Index) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Index) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Index) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Index) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Index) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Index) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Index) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Index) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Index) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Index) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Index) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Index) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Index) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Index) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Index) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Index) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Index) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Index) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Index) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Index) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Index) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Index) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Index) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Index) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Index) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Index) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Index) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Index) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Index) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Index) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Index) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Index) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Index) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Index) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Index) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Index) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Index) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Index) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Index) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Index) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Index) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Index) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Index) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Index) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Index) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Index) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Index) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Index) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Index) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Index) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Index) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Index) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Index) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Index) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Index) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Index) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Index) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Index) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Index) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Index) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Index) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Index) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Index) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Index) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Index) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Index) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Index) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Index) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Index) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Index) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Index) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Index) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Index) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Index) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Index) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Index) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Index) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Index) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Index) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Index) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Index) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Index) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Index) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Index) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Index) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Index) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Index) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Index) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Index) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Index) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Index) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Index) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Index) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Index) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Index) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Index) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Index) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Index) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Index) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Index) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Index) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Index) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Index) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Index) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Index) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Index) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Index) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Index) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Index) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Index) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Index) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Index) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Index) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Index) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Index) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Index) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Index) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Index) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Index) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Index) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Index) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Index) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Index) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Index) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Index) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Index) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Index) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Index) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Index) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Index) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Index) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Index) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Index) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Index) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Index) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Index) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Index) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Index) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Index) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Index) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Index) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Index) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Index) Add() (*EvasObject) {
  _cgo_return_ := C.elm_index_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Index) AutohideDisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_index_autohide_disabled_set(self.obj, _c_disabled)
}

func (self *Index) ItemLevelSet(level int) () {
  _c_level := C.int(level)
  C.elm_index_item_level_set(self.obj, _c_level)
}

func (self *Index) ItemFind(data unsafe.Pointer) (*C.Elm_Object_Item) {
  _cgo_return_ := C.elm_index_item_find(self.obj, data)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Index) ItemClear() () {
  C.elm_index_item_clear(self.obj)
}

func (self *Index) LevelGo(level int) () {
  _c_level := C.int(level)
  C.elm_index_level_go(self.obj, _c_level)
}

func (self *Index) IndicatorDisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_index_indicator_disabled_set(self.obj, _c_disabled)
}

func (self *Index) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_index_horizontal_set(self.obj, _c_horizontal)
}

func (self *WinInwin) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *WinInwin) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *WinInwin) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *WinInwin) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *WinInwin) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *WinInwin) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *WinInwin) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *WinInwin) Del() () {
  C.evas_object_del(self.obj)
}

func (self *WinInwin) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *WinInwin) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *WinInwin) Show() () {
  C.evas_object_show(self.obj)
}

func (self *WinInwin) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *WinInwin) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *WinInwin) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *WinInwin) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *WinInwin) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *WinInwin) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *WinInwin) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *WinInwin) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *WinInwin) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *WinInwin) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *WinInwin) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *WinInwin) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *WinInwin) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *WinInwin) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *WinInwin) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *WinInwin) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *WinInwin) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *WinInwin) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *WinInwin) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *WinInwin) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *WinInwin) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *WinInwin) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *WinInwin) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *WinInwin) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *WinInwin) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *WinInwin) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *WinInwin) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *WinInwin) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *WinInwin) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *WinInwin) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *WinInwin) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *WinInwin) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *WinInwin) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *WinInwin) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *WinInwin) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *WinInwin) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *WinInwin) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *WinInwin) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *WinInwin) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *WinInwin) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *WinInwin) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *WinInwin) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *WinInwin) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *WinInwin) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *WinInwin) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *WinInwin) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *WinInwin) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *WinInwin) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *WinInwin) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *WinInwin) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *WinInwin) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *WinInwin) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *WinInwin) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *WinInwin) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *WinInwin) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *WinInwin) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *WinInwin) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *WinInwin) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *WinInwin) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *WinInwin) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *WinInwin) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *WinInwin) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *WinInwin) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *WinInwin) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *WinInwin) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *WinInwin) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *WinInwin) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *WinInwin) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *WinInwin) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *WinInwin) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *WinInwin) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *WinInwin) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *WinInwin) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *WinInwin) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *WinInwin) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *WinInwin) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *WinInwin) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *WinInwin) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *WinInwin) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *WinInwin) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *WinInwin) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *WinInwin) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *WinInwin) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *WinInwin) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *WinInwin) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *WinInwin) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *WinInwin) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *WinInwin) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *WinInwin) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *WinInwin) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *WinInwin) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *WinInwin) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *WinInwin) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *WinInwin) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *WinInwin) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *WinInwin) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *WinInwin) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *WinInwin) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *WinInwin) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *WinInwin) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *WinInwin) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *WinInwin) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *WinInwin) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *WinInwin) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *WinInwin) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *WinInwin) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *WinInwin) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *WinInwin) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *WinInwin) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *WinInwin) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *WinInwin) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *WinInwin) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *WinInwin) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *WinInwin) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *WinInwin) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *WinInwin) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *WinInwin) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *WinInwin) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *WinInwin) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *WinInwin) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *WinInwin) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *WinInwin) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *WinInwin) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *WinInwin) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *WinInwin) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *WinInwin) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *WinInwin) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *WinInwin) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *WinInwin) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *WinInwin) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *WinInwin) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *WinInwin) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *WinInwin) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *WinInwin) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *WinInwin) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *WinInwin) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *WinInwin) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *WinInwin) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *WinInwin) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *WinInwin) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *WinInwin) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *WinInwin) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *WinInwin) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *WinInwin) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *WinInwin) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *WinInwin) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *WinInwin) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *WinInwin) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *WinInwin) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *WinInwin) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *WinInwin) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *WinInwin) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *WinInwin) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *WinInwin) Add() (*EvasObject) {
  _cgo_return_ := C.elm_win_inwin_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *WinInwin) Activate() () {
  C.elm_win_inwin_activate(self.obj)
}

func (self *WinInwin) ContentSet(content EvasObjectInterface) () {
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_win_inwin_content_set(self.obj, _c_content)
}

func (self *WinInwin) ContentUnset() (*EvasObject) {
  _cgo_return_ := C.elm_win_inwin_content_unset(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Label) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Label) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Label) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Label) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Label) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Label) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Label) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Label) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Label) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Label) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Label) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Label) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Label) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Label) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Label) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Label) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Label) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Label) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Label) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Label) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Label) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Label) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Label) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Label) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Label) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Label) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Label) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Label) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Label) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Label) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Label) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Label) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Label) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Label) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Label) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Label) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Label) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Label) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Label) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Label) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Label) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Label) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Label) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Label) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Label) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Label) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Label) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Label) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Label) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Label) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Label) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Label) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Label) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Label) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Label) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Label) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Label) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Label) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Label) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Label) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Label) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Label) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Label) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Label) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Label) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Label) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Label) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Label) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Label) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Label) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Label) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Label) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Label) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Label) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Label) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Label) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Label) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Label) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Label) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Label) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Label) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Label) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Label) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Label) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Label) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Label) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Label) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Label) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Label) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Label) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Label) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Label) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Label) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Label) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Label) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Label) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Label) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Label) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Label) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Label) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Label) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Label) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Label) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Label) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Label) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Label) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Label) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Label) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Label) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Label) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Label) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Label) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Label) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Label) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Label) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Label) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Label) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Label) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Label) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Label) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Label) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Label) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Label) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Label) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Label) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Label) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Label) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Label) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Label) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Label) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Label) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Label) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Label) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Label) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Label) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Label) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Label) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Label) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Label) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Label) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Label) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Label) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Label) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Label) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Label) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Label) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Label) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Label) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Label) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Label) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Label) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Label) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Label) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Label) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Label) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Label) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Label) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Label) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Label) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Label) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Label) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Label) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Label) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Label) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Label) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Label) Add() (*EvasObject) {
  _cgo_return_ := C.elm_label_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Label) LineWrapSet(wrap C.Elm_Wrap_Type) () {
  C.elm_label_line_wrap_set(self.obj, wrap)
}

func (self *Label) WrapWidthSet(w C.Evas_Coord) () {
  C.elm_label_wrap_width_set(self.obj, w)
}

func (self *Label) EllipsisSet(ellipsis bool) () {
  _c_ellipsis := (C.Eina_Bool)(0)
  if ellipsis { _c_ellipsis = (C.Eina_Bool)(1) }
  C.elm_label_ellipsis_set(self.obj, _c_ellipsis)
}

func (self *Label) SlideSet(slide bool) () {
  _c_slide := (C.Eina_Bool)(0)
  if slide { _c_slide = (C.Eina_Bool)(1) }
  C.elm_label_slide_set(self.obj, _c_slide)
}

func (self *Label) SlideDurationSet(duration float64) () {
  _c_duration := C.double(duration)
  C.elm_label_slide_duration_set(self.obj, _c_duration)
}

func (self *Layout) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Layout) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Layout) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Layout) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Layout) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Layout) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Layout) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Layout) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Layout) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Layout) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Layout) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Layout) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Layout) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Layout) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Layout) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Layout) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Layout) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Layout) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Layout) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Layout) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Layout) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Layout) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Layout) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Layout) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Layout) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Layout) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Layout) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Layout) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Layout) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Layout) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Layout) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Layout) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Layout) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Layout) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Layout) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Layout) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Layout) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Layout) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Layout) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Layout) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Layout) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Layout) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Layout) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Layout) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Layout) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Layout) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Layout) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Layout) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Layout) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Layout) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Layout) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Layout) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Layout) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Layout) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Layout) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Layout) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Layout) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Layout) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Layout) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Layout) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Layout) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Layout) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Layout) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Layout) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Layout) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Layout) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Layout) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Layout) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Layout) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Layout) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Layout) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Layout) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Layout) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Layout) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Layout) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Layout) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Layout) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Layout) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Layout) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Layout) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Layout) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Layout) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Layout) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Layout) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Layout) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Layout) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Layout) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Layout) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Layout) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Layout) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Layout) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Layout) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Layout) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Layout) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Layout) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Layout) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Layout) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Layout) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Layout) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Layout) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Layout) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Layout) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Layout) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Layout) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Layout) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Layout) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Layout) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Layout) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Layout) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Layout) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Layout) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Layout) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Layout) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Layout) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Layout) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Layout) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Layout) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Layout) EVASBoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Layout) EVASBoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Layout) EVASBoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Layout) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Layout) EVASBoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Layout) EVASBoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) EVASBoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Layout) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Layout) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Layout) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Layout) EVASTablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) EVASTableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) EVASTableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Layout) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Layout) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Layout) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Layout) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Layout) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Layout) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Layout) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Layout) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Layout) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Layout) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Layout) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Layout) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Layout) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Layout) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Layout) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Layout) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Layout) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Layout) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Layout) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Layout) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Layout) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Layout) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Layout) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Layout) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Layout) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Layout) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Layout) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Layout) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Layout) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Layout) ELMSignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Layout) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Layout) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Layout) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Layout) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Layout) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Layout) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Layout) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Layout) ELMThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Layout) Add() (*EvasObject) {
  _cgo_return_ := C.elm_layout_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) FileSet(file string, group string) (bool) {
  _c_file := C.CString(file)
  _c_group := C.CString(group)
  _cgo_return_ := C.elm_layout_file_set(self.obj, _c_file, _c_group)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) Freeze() (int) {
  _cgo_return_ := C.elm_layout_freeze(self.obj)
  _go_return_ := int(_cgo_return_)
  return _go_return_
}

func (self *Layout) Thaw() (int) {
  _cgo_return_ := C.elm_layout_thaw(self.obj)
  _go_return_ := int(_cgo_return_)
  return _go_return_
}

func (self *Layout) ThemeSet(clas string, group string, style string) (bool) {
  _c_clas := C.CString(clas)
  _c_group := C.CString(group)
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_layout_theme_set(self.obj, _c_clas, _c_group, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_layout_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Layout) BoxAppend(part string, child EvasObjectInterface) (bool) {
  _c_part := C.CString(part)
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.elm_layout_box_append(self.obj, _c_part, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) BoxPrepend(part string, child EvasObjectInterface) (bool) {
  _c_part := C.CString(part)
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.elm_layout_box_prepend(self.obj, _c_part, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) BoxInsertBefore(part string, child EvasObjectInterface, reference *C.Evas_Object) (bool) {
  _c_part := C.CString(part)
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.elm_layout_box_insert_before(self.obj, _c_part, _c_child, reference)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) BoxInsertAt(part string, child EvasObjectInterface, pos uint) (bool) {
  _c_part := C.CString(part)
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.elm_layout_box_insert_at(self.obj, _c_part, _c_child, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) BoxRemove(part string, child EvasObjectInterface) (*EvasObject) {
  _c_part := C.CString(part)
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.elm_layout_box_remove(self.obj, _c_part, _c_child)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) BoxRemoveAll(part string, clear bool) (bool) {
  _c_part := C.CString(part)
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_layout_box_remove_all(self.obj, _c_part, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) TablePack(part string, child_obj EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  _c_part := C.CString(part)
  var _c_child_obj *C.Evas_Object
  if child_obj != nil { _c_child_obj = child_obj.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.elm_layout_table_pack(self.obj, _c_part, _c_child_obj, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) TableUnpack(part string, child_obj EvasObjectInterface) (*EvasObject) {
  _c_part := C.CString(part)
  var _c_child_obj *C.Evas_Object
  if child_obj != nil { _c_child_obj = child_obj.GetObj() }
  _cgo_return_ := C.elm_layout_table_unpack(self.obj, _c_part, _c_child_obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) TableClear(part string, clear bool) (bool) {
  _c_part := C.CString(part)
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_layout_table_clear(self.obj, _c_part, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) SizingEval() () {
  C.elm_layout_sizing_eval(self.obj)
}

func (self *Layout) PartCursorSet(part_name string, cursor string) (bool) {
  _c_part_name := C.CString(part_name)
  _c_cursor := C.CString(cursor)
  _cgo_return_ := C.elm_layout_part_cursor_set(self.obj, _c_part_name, _c_cursor)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) PartCursorUnset(part_name string) (bool) {
  _c_part_name := C.CString(part_name)
  _cgo_return_ := C.elm_layout_part_cursor_unset(self.obj, _c_part_name)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) PartCursorStyleSet(part_name string, style string) (bool) {
  _c_part_name := C.CString(part_name)
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_layout_part_cursor_style_set(self.obj, _c_part_name, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) PartCursorEngineOnlySet(part_name string, engine_only bool) (bool) {
  _c_part_name := C.CString(part_name)
  _c_engine_only := (C.Eina_Bool)(0)
  if engine_only { _c_engine_only = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_layout_part_cursor_engine_only_set(self.obj, _c_part_name, _c_engine_only)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) EdjeObjectCanAccessSet(can_access bool) (bool) {
  _c_can_access := (C.Eina_Bool)(0)
  if can_access { _c_can_access = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_layout_edje_object_can_access_set(self.obj, _c_can_access)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) EdjeObjectCanAccessGet() (bool) {
  _cgo_return_ := C.elm_layout_edje_object_can_access_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) ContentSet(swallow string, content EvasObjectInterface) (bool) {
  _c_swallow := C.CString(swallow)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  _cgo_return_ := C.elm_layout_content_set(self.obj, _c_swallow, _c_content)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Layout) ContentUnset(swallow string) (*EvasObject) {
  _c_swallow := C.CString(swallow)
  _cgo_return_ := C.elm_layout_content_unset(self.obj, _c_swallow)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Layout) TextSet(part string, text string) (bool) {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  _cgo_return_ := C.elm_layout_text_set(self.obj, _c_part, _c_text)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Map) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Map) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Map) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Map) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Map) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Map) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Map) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Map) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Map) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Map) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Map) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Map) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Map) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Map) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Map) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Map) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Map) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Map) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Map) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Map) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Map) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Map) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Map) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Map) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Map) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Map) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Map) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Map) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Map) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Map) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Map) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Map) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Map) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Map) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Map) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Map) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Map) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Map) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Map) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Map) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Map) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Map) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Map) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Map) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Map) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Map) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Map) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Map) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Map) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Map) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Map) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Map) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Map) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Map) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Map) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Map) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Map) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Map) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Map) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Map) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Map) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Map) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Map) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Map) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Map) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Map) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Map) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Map) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Map) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Map) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Map) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Map) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Map) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Map) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Map) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Map) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Map) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Map) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Map) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Map) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Map) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Map) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Map) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Map) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Map) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Map) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Map) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Map) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Map) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Map) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Map) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Map) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Map) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Map) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Map) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Map) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Map) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Map) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Map) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Map) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Map) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Map) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Map) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Map) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Map) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Map) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Map) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Map) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Map) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Map) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Map) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Map) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Map) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Map) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Map) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Map) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Map) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Map) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Map) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Map) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Map) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Map) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Map) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Map) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Map) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Map) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Map) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Map) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Map) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Map) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Map) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Map) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Map) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Map) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Map) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Map) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Map) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Map) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Map) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Map) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Map) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Map) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Map) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Map) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Map) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Map) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Map) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Map) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Map) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Map) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Map) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Map) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Map) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Map) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Map) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Map) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Map) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Map) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Map) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Map) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Map) Add() (*EvasObject) {
  _cgo_return_ := C.elm_map_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) ZoomSet(zoom int) () {
  _c_zoom := C.int(zoom)
  C.elm_map_zoom_set(self.obj, _c_zoom)
}

func (self *Map) ZoomModeSet(mode C.Elm_Map_Zoom_Mode) () {
  C.elm_map_zoom_mode_set(self.obj, mode)
}

func (self *Map) ZoomMinSet(zoom int) () {
  _c_zoom := C.int(zoom)
  C.elm_map_zoom_min_set(self.obj, _c_zoom)
}

func (self *Map) ZoomMaxSet(zoom int) () {
  _c_zoom := C.int(zoom)
  C.elm_map_zoom_max_set(self.obj, _c_zoom)
}

func (self *Map) RegionBringIn(lon float64, lat float64) () {
  _c_lon := C.double(lon)
  _c_lat := C.double(lat)
  C.elm_map_region_bring_in(self.obj, _c_lon, _c_lat)
}

func (self *Map) RegionShow(lon float64, lat float64) () {
  _c_lon := C.double(lon)
  _c_lat := C.double(lat)
  C.elm_map_region_show(self.obj, _c_lon, _c_lat)
}

func (self *Map) PausedSet(paused bool) () {
  _c_paused := (C.Eina_Bool)(0)
  if paused { _c_paused = (C.Eina_Bool)(1) }
  C.elm_map_paused_set(self.obj, _c_paused)
}

func (self *Map) RotateSet(degree float64, cx C.Evas_Coord, cy C.Evas_Coord) () {
  _c_degree := C.double(degree)
  C.elm_map_rotate_set(self.obj, _c_degree, cx, cy)
}

func (self *Map) WheelDisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_map_wheel_disabled_set(self.obj, _c_disabled)
}

func (self *Map) UserAgentSet(user_agent string) () {
  _c_user_agent := C.CString(user_agent)
  C.elm_map_user_agent_set(self.obj, _c_user_agent)
}

func (self *Map) OverlayAdd(lon float64, lat float64) (*C.Elm_Map_Overlay) {
  _c_lon := C.double(lon)
  _c_lat := C.double(lat)
  _cgo_return_ := C.elm_map_overlay_add(self.obj, _c_lon, _c_lat)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlaysGet() (*C.Eina_List) {
  _cgo_return_ := C.elm_map_overlays_get(self.obj)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayClassAdd() (*C.Elm_Map_Overlay) {
  _cgo_return_ := C.elm_map_overlay_class_add(self.obj)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayBubbleAdd() (*C.Elm_Map_Overlay) {
  _cgo_return_ := C.elm_map_overlay_bubble_add(self.obj)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayRouteAdd(route *C.Elm_Map_Route) (*C.Elm_Map_Overlay) {
  _cgo_return_ := C.elm_map_overlay_route_add(self.obj, route)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayLineAdd(flon float64, flat float64, tlon float64, tlat float64) (*C.Elm_Map_Overlay) {
  _c_flon := C.double(flon)
  _c_flat := C.double(flat)
  _c_tlon := C.double(tlon)
  _c_tlat := C.double(tlat)
  _cgo_return_ := C.elm_map_overlay_line_add(self.obj, _c_flon, _c_flat, _c_tlon, _c_tlat)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayPolygonAdd() (*C.Elm_Map_Overlay) {
  _cgo_return_ := C.elm_map_overlay_polygon_add(self.obj)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayCircleAdd(lon float64, lat float64, radius float64) (*C.Elm_Map_Overlay) {
  _c_lon := C.double(lon)
  _c_lat := C.double(lat)
  _c_radius := C.double(radius)
  _cgo_return_ := C.elm_map_overlay_circle_add(self.obj, _c_lon, _c_lat, _c_radius)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) OverlayScaleAdd(x C.Evas_Coord, y C.Evas_Coord) (*C.Elm_Map_Overlay) {
  _cgo_return_ := C.elm_map_overlay_scale_add(self.obj, x, y)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Map) SourceSet(type_ C.Elm_Map_Source_Type, source_name string) () {
  _c_source_name := C.CString(source_name)
  C.elm_map_source_set(self.obj, type_, _c_source_name)
}

func (self *Map) TrackAdd(emap unsafe.Pointer) (*EvasObject) {
  _cgo_return_ := C.elm_map_track_add(self.obj, emap)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Map) TrackRemove(route EvasObjectInterface) () {
  var _c_route *C.Evas_Object
  if route != nil { _c_route = route.GetObj() }
  C.elm_map_track_remove(self.obj, _c_route)
}

func (self *MapTrack) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *MapTrack) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *MapTrack) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *MapTrack) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *MapTrack) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *MapTrack) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *MapTrack) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *MapTrack) Del() () {
  C.evas_object_del(self.obj)
}

func (self *MapTrack) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *MapTrack) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *MapTrack) Show() () {
  C.evas_object_show(self.obj)
}

func (self *MapTrack) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *MapTrack) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *MapTrack) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *MapTrack) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *MapTrack) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *MapTrack) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *MapTrack) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *MapTrack) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *MapTrack) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *MapTrack) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *MapTrack) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *MapTrack) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *MapTrack) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *MapTrack) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *MapTrack) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *MapTrack) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *MapTrack) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *MapTrack) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *MapTrack) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *MapTrack) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *MapTrack) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *MapTrack) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *MapTrack) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *MapTrack) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *MapTrack) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *MapTrack) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *MapTrack) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *MapTrack) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *MapTrack) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *MapTrack) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *MapTrack) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *MapTrack) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *MapTrack) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *MapTrack) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *MapTrack) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *MapTrack) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *MapTrack) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *MapTrack) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *MapTrack) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *MapTrack) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *MapTrack) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *MapTrack) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *MapTrack) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *MapTrack) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *MapTrack) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *MapTrack) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *MapTrack) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *MapTrack) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *MapTrack) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *MapTrack) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *MapTrack) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *MapTrack) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *MapTrack) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *MapTrack) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *MapTrack) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *MapTrack) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *MapTrack) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *MapTrack) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *MapTrack) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *MapTrack) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *MapTrack) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *MapTrack) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *MapTrack) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *MapTrack) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *MapTrack) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *MapTrack) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *MapTrack) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *MapTrack) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *MapTrack) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *MapTrack) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *MapTrack) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *MapTrack) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *MapTrack) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *MapTrack) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *MapTrack) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *MapTrack) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *MapTrack) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *MapTrack) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *MapTrack) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *MapTrack) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *MapTrack) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *MapTrack) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *MapTrack) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *MapTrack) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *MapTrack) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *MapTrack) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *MapTrack) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *MapTrack) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *MapTrack) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *MapTrack) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *MapTrack) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *MapTrack) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *MapTrack) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *MapTrack) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *MapTrack) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *MapTrack) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *MapTrack) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *MapTrack) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *MapTrack) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *MapTrack) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *MapTrack) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *MapTrack) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *MapTrack) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *MapTrack) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *MapTrack) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *MapTrack) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *MapTrack) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *MapTrack) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *MapTrack) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *MapTrack) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *MapTrack) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *MapTrack) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *MapTrack) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *MapTrack) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *MapTrack) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *MapTrack) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *MapTrack) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *MapTrack) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *MapTrack) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *MapTrack) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *MapTrack) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *MapTrack) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *MapTrack) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *MapTrack) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *MapTrack) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *MapTrack) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *MapTrack) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *MapTrack) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *MapTrack) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *MapTrack) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *MapTrack) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *MapTrack) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *MapTrack) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *MapTrack) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *MapTrack) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *MapTrack) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *MapTrack) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *MapTrack) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *MapTrack) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *MapTrack) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *MapTrack) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *MapTrack) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *MapTrack) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *MapTrack) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *MapTrack) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *MapTrack) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *MapTrack) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *MapTrack) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *MapTrack) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *MapTrack) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *MapTrack) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *MapTrack) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *MapTrack) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *MapTrack) Add(emap unsafe.Pointer) (*EvasObject) {
  _cgo_return_ := C.elm_map_track_add(self.obj, emap)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *MapTrack) Remove(route EvasObjectInterface) () {
  var _c_route *C.Evas_Object
  if route != nil { _c_route = route.GetObj() }
  C.elm_map_track_remove(self.obj, _c_route)
}

func (self *Mapbuf) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Mapbuf) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Mapbuf) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Mapbuf) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Mapbuf) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Mapbuf) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Mapbuf) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Mapbuf) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Mapbuf) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Mapbuf) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Mapbuf) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Mapbuf) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Mapbuf) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Mapbuf) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Mapbuf) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Mapbuf) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Mapbuf) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Mapbuf) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Mapbuf) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Mapbuf) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Mapbuf) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Mapbuf) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Mapbuf) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Mapbuf) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Mapbuf) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Mapbuf) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Mapbuf) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Mapbuf) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Mapbuf) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Mapbuf) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Mapbuf) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Mapbuf) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Mapbuf) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Mapbuf) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Mapbuf) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Mapbuf) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Mapbuf) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Mapbuf) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Mapbuf) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Mapbuf) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Mapbuf) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Mapbuf) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Mapbuf) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Mapbuf) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Mapbuf) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Mapbuf) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Mapbuf) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Mapbuf) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Mapbuf) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Mapbuf) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Mapbuf) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Mapbuf) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Mapbuf) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Mapbuf) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Mapbuf) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Mapbuf) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Mapbuf) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Mapbuf) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Mapbuf) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Mapbuf) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Mapbuf) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Mapbuf) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Mapbuf) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Mapbuf) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Mapbuf) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Mapbuf) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Mapbuf) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Mapbuf) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Mapbuf) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Mapbuf) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Mapbuf) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Mapbuf) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Mapbuf) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Mapbuf) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Mapbuf) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Mapbuf) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Mapbuf) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Mapbuf) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Mapbuf) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Mapbuf) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Mapbuf) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Mapbuf) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Mapbuf) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Mapbuf) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Mapbuf) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Mapbuf) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Mapbuf) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Mapbuf) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Mapbuf) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Mapbuf) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Mapbuf) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Mapbuf) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Mapbuf) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Mapbuf) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Mapbuf) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Mapbuf) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Mapbuf) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Mapbuf) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Mapbuf) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Mapbuf) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Mapbuf) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Mapbuf) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Mapbuf) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Mapbuf) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Mapbuf) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Mapbuf) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Mapbuf) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Mapbuf) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Mapbuf) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Mapbuf) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Mapbuf) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Mapbuf) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Mapbuf) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Mapbuf) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Mapbuf) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Mapbuf) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Mapbuf) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Mapbuf) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Mapbuf) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Mapbuf) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Mapbuf) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Mapbuf) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Mapbuf) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Mapbuf) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Mapbuf) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Mapbuf) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Mapbuf) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Mapbuf) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Mapbuf) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Mapbuf) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Mapbuf) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Mapbuf) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Mapbuf) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Mapbuf) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Mapbuf) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Mapbuf) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Mapbuf) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Mapbuf) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Mapbuf) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Mapbuf) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Mapbuf) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Mapbuf) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Mapbuf) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Mapbuf) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Mapbuf) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Mapbuf) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Mapbuf) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Mapbuf) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Mapbuf) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Mapbuf) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Mapbuf) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Mapbuf) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Mapbuf) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Mapbuf) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Mapbuf) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Mapbuf) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Mapbuf) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Mapbuf) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Mapbuf) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Mapbuf) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Mapbuf) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Mapbuf) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Mapbuf) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Mapbuf) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Mapbuf) Add() (*EvasObject) {
  _cgo_return_ := C.elm_mapbuf_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Mapbuf) EnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_mapbuf_enabled_set(self.obj, _c_enabled)
}

func (self *Mapbuf) SmoothSet(smooth bool) () {
  _c_smooth := (C.Eina_Bool)(0)
  if smooth { _c_smooth = (C.Eina_Bool)(1) }
  C.elm_mapbuf_smooth_set(self.obj, _c_smooth)
}

func (self *Mapbuf) AlphaSet(alpha bool) () {
  _c_alpha := (C.Eina_Bool)(0)
  if alpha { _c_alpha = (C.Eina_Bool)(1) }
  C.elm_mapbuf_alpha_set(self.obj, _c_alpha)
}

func (self *Menu) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Menu) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Menu) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Menu) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Menu) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Menu) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Menu) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Menu) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Menu) EVASMove(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Menu) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Menu) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Menu) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Menu) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Menu) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Menu) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Menu) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Menu) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Menu) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Menu) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Menu) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Menu) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Menu) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Menu) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Menu) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Menu) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Menu) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Menu) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Menu) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Menu) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Menu) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Menu) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Menu) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Menu) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Menu) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Menu) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Menu) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Menu) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Menu) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Menu) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Menu) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Menu) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Menu) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Menu) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Menu) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Menu) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Menu) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Menu) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Menu) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Menu) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Menu) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Menu) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Menu) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Menu) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Menu) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Menu) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Menu) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Menu) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Menu) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Menu) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Menu) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Menu) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Menu) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Menu) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Menu) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Menu) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Menu) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Menu) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Menu) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Menu) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Menu) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Menu) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Menu) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Menu) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Menu) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Menu) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Menu) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Menu) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Menu) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Menu) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Menu) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Menu) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Menu) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Menu) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Menu) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Menu) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Menu) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Menu) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Menu) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Menu) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Menu) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Menu) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Menu) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Menu) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Menu) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Menu) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Menu) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Menu) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Menu) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Menu) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Menu) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Menu) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Menu) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Menu) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Menu) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Menu) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Menu) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Menu) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Menu) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Menu) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Menu) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Menu) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Menu) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Menu) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Menu) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Menu) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Menu) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Menu) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Menu) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Menu) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Menu) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Menu) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Menu) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Menu) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Menu) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Menu) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Menu) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Menu) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Menu) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Menu) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Menu) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Menu) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Menu) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Menu) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Menu) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Menu) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Menu) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Menu) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Menu) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Menu) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Menu) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Menu) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Menu) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Menu) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Menu) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Menu) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Menu) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Menu) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Menu) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Menu) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Menu) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Menu) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Menu) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Menu) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Menu) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Menu) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Menu) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Menu) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Menu) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Menu) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Menu) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Menu) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Menu) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Menu) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Menu) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Menu) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Menu) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Menu) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Menu) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Menu) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Menu) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Menu) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Menu) Add() (*EvasObject) {
  _cgo_return_ := C.elm_menu_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Menu) ParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_menu_parent_set(self.obj, _c_parent)
}

func (self *Menu) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.elm_menu_move(self.obj, x, y)
}

func (self *Menu) Close() () {
  C.elm_menu_close(self.obj)
}

func (self *Menu) ItemSeparatorAdd(parent *C.Elm_Object_Item) (*C.Elm_Object_Item) {
  _cgo_return_ := C.elm_menu_item_separator_add(self.obj, parent)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Notify) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Notify) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Notify) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Notify) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Notify) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Notify) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Notify) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Notify) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Notify) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Notify) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Notify) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Notify) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Notify) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Notify) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Notify) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Notify) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Notify) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Notify) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Notify) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Notify) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Notify) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Notify) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Notify) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Notify) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Notify) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Notify) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Notify) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Notify) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Notify) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Notify) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Notify) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Notify) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Notify) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Notify) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Notify) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Notify) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Notify) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Notify) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Notify) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Notify) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Notify) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Notify) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Notify) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Notify) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Notify) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Notify) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Notify) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Notify) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Notify) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Notify) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Notify) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Notify) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Notify) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Notify) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Notify) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Notify) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Notify) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Notify) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Notify) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Notify) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Notify) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Notify) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Notify) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Notify) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Notify) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Notify) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Notify) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Notify) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Notify) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Notify) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Notify) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Notify) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Notify) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Notify) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Notify) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Notify) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Notify) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Notify) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Notify) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Notify) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Notify) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Notify) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Notify) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Notify) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Notify) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Notify) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Notify) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Notify) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Notify) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Notify) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Notify) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Notify) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Notify) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Notify) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Notify) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Notify) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Notify) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Notify) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Notify) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Notify) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Notify) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Notify) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Notify) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Notify) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Notify) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Notify) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Notify) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Notify) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Notify) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Notify) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Notify) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Notify) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Notify) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Notify) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Notify) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Notify) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Notify) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Notify) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Notify) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Notify) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Notify) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Notify) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Notify) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Notify) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Notify) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Notify) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Notify) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Notify) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Notify) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Notify) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Notify) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Notify) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Notify) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Notify) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Notify) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Notify) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Notify) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Notify) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Notify) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Notify) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Notify) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Notify) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Notify) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Notify) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Notify) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Notify) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Notify) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Notify) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Notify) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Notify) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Notify) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Notify) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Notify) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Notify) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Notify) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Notify) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Notify) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Notify) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Notify) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Notify) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Notify) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Notify) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Notify) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Notify) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Notify) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Notify) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Notify) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Notify) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Notify) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Notify) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Notify) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Notify) Add() (*EvasObject) {
  _cgo_return_ := C.elm_notify_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Notify) ParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_notify_parent_set(self.obj, _c_parent)
}

func (self *Notify) OrientSet(orient C.Elm_Notify_Orient) () {
  C.elm_notify_orient_set(self.obj, orient)
}

func (self *Notify) TimeoutSet(timeout float64) () {
  _c_timeout := C.double(timeout)
  C.elm_notify_timeout_set(self.obj, _c_timeout)
}

func (self *Notify) AllowEventsSet(allow bool) () {
  _c_allow := (C.Eina_Bool)(0)
  if allow { _c_allow = (C.Eina_Bool)(1) }
  C.elm_notify_allow_events_set(self.obj, _c_allow)
}

func (self *Panel) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Panel) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Panel) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Panel) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Panel) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Panel) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Panel) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Panel) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Panel) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Panel) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Panel) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Panel) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Panel) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panel) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Panel) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Panel) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Panel) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Panel) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Panel) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Panel) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Panel) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Panel) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Panel) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Panel) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Panel) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Panel) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Panel) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Panel) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Panel) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Panel) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Panel) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Panel) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Panel) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Panel) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Panel) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Panel) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Panel) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Panel) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Panel) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Panel) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Panel) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Panel) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Panel) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Panel) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Panel) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Panel) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Panel) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Panel) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Panel) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Panel) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Panel) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Panel) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Panel) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Panel) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Panel) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Panel) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Panel) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Panel) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Panel) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Panel) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Panel) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Panel) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Panel) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Panel) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Panel) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Panel) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Panel) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Panel) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Panel) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Panel) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Panel) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Panel) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Panel) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Panel) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panel) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panel) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panel) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panel) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Panel) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Panel) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Panel) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Panel) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Panel) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Panel) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Panel) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Panel) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Panel) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Panel) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Panel) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Panel) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Panel) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panel) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Panel) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Panel) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Panel) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Panel) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Panel) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Panel) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Panel) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Panel) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Panel) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Panel) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Panel) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Panel) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Panel) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Panel) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Panel) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panel) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panel) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Panel) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Panel) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Panel) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Panel) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Panel) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Panel) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Panel) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Panel) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Panel) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Panel) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Panel) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panel) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panel) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panel) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panel) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panel) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panel) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Panel) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Panel) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Panel) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Panel) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Panel) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panel) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Panel) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Panel) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Panel) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Panel) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Panel) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Panel) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Panel) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Panel) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Panel) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Panel) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Panel) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Panel) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Panel) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Panel) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Panel) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Panel) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Panel) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Panel) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Panel) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Panel) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Panel) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Panel) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Panel) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Panel) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Panel) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Panel) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Panel) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panel) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Panel) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panel) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Panel) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Panel) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Panel) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Panel) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Panel) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Panel) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Panel) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Panel) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Panel) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Panel) Add() (*EvasObject) {
  _cgo_return_ := C.elm_panel_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panel) OrientSet(orient C.Elm_Panel_Orient) () {
  C.elm_panel_orient_set(self.obj, orient)
}

func (self *Panel) HiddenSet(hidden bool) () {
  _c_hidden := (C.Eina_Bool)(0)
  if hidden { _c_hidden = (C.Eina_Bool)(1) }
  C.elm_panel_hidden_set(self.obj, _c_hidden)
}

func (self *Panel) Toggle() () {
  C.elm_panel_toggle(self.obj)
}

func (self *Panes) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Panes) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Panes) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Panes) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Panes) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Panes) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Panes) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Panes) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Panes) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Panes) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Panes) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Panes) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Panes) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panes) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Panes) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Panes) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Panes) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Panes) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Panes) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Panes) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Panes) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Panes) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Panes) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Panes) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Panes) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Panes) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Panes) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Panes) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Panes) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Panes) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Panes) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Panes) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Panes) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Panes) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Panes) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Panes) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Panes) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Panes) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Panes) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Panes) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Panes) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Panes) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Panes) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Panes) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Panes) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Panes) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Panes) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Panes) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Panes) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Panes) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Panes) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Panes) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Panes) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Panes) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Panes) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Panes) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Panes) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Panes) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Panes) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Panes) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Panes) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Panes) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Panes) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Panes) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Panes) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Panes) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Panes) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Panes) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Panes) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Panes) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Panes) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Panes) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Panes) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Panes) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panes) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panes) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panes) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panes) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Panes) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Panes) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Panes) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Panes) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Panes) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Panes) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Panes) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Panes) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Panes) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Panes) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Panes) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Panes) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Panes) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Panes) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Panes) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Panes) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Panes) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Panes) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Panes) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Panes) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Panes) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Panes) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Panes) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Panes) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Panes) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Panes) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Panes) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Panes) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Panes) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panes) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panes) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Panes) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Panes) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Panes) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Panes) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Panes) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Panes) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Panes) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Panes) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Panes) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Panes) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Panes) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panes) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panes) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panes) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panes) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Panes) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panes) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Panes) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Panes) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Panes) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Panes) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Panes) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panes) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Panes) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Panes) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Panes) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Panes) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Panes) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Panes) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Panes) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Panes) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Panes) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Panes) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Panes) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Panes) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Panes) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Panes) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Panes) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Panes) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Panes) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Panes) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Panes) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Panes) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Panes) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Panes) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Panes) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Panes) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Panes) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Panes) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Panes) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panes) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Panes) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Panes) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Panes) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Panes) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Panes) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Panes) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Panes) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Panes) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Panes) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Panes) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Panes) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Panes) Add() (*EvasObject) {
  _cgo_return_ := C.elm_panes_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Panes) FixedSet(fixed bool) () {
  _c_fixed := (C.Eina_Bool)(0)
  if fixed { _c_fixed = (C.Eina_Bool)(1) }
  C.elm_panes_fixed_set(self.obj, _c_fixed)
}

func (self *Panes) ContentLeftSizeSet(size float64) () {
  _c_size := C.double(size)
  C.elm_panes_content_left_size_set(self.obj, _c_size)
}

func (self *Panes) ContentRightSizeSet(size float64) () {
  _c_size := C.double(size)
  C.elm_panes_content_right_size_set(self.obj, _c_size)
}

func (self *Panes) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_panes_horizontal_set(self.obj, _c_horizontal)
}

func (self *Photocam) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Photocam) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Photocam) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Photocam) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Photocam) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Photocam) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Photocam) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Photocam) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Photocam) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Photocam) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Photocam) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Photocam) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Photocam) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photocam) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Photocam) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Photocam) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Photocam) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Photocam) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Photocam) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Photocam) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Photocam) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Photocam) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Photocam) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Photocam) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Photocam) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Photocam) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Photocam) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Photocam) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Photocam) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Photocam) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Photocam) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Photocam) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Photocam) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Photocam) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Photocam) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Photocam) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Photocam) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Photocam) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Photocam) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Photocam) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Photocam) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Photocam) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Photocam) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Photocam) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Photocam) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Photocam) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Photocam) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Photocam) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Photocam) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Photocam) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Photocam) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photocam) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Photocam) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Photocam) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Photocam) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Photocam) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Photocam) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Photocam) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Photocam) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Photocam) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photocam) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Photocam) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Photocam) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Photocam) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Photocam) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Photocam) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Photocam) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Photocam) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Photocam) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Photocam) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Photocam) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Photocam) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Photocam) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Photocam) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photocam) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photocam) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photocam) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photocam) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Photocam) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Photocam) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Photocam) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Photocam) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Photocam) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Photocam) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Photocam) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Photocam) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Photocam) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Photocam) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Photocam) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Photocam) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Photocam) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photocam) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Photocam) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Photocam) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photocam) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Photocam) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Photocam) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Photocam) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Photocam) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Photocam) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Photocam) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Photocam) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Photocam) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Photocam) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Photocam) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Photocam) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Photocam) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photocam) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photocam) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Photocam) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Photocam) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Photocam) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Photocam) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photocam) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photocam) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photocam) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photocam) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photocam) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photocam) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Photocam) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Photocam) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Photocam) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Photocam) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Photocam) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photocam) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Photocam) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Photocam) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Photocam) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Photocam) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Photocam) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Photocam) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Photocam) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Photocam) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Photocam) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Photocam) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Photocam) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Photocam) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Photocam) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Photocam) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Photocam) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Photocam) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Photocam) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Photocam) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Photocam) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Photocam) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Photocam) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Photocam) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Photocam) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Photocam) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Photocam) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Photocam) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Photocam) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photocam) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Photocam) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photocam) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Photocam) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Photocam) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Photocam) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Photocam) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Photocam) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Photocam) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Photocam) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Photocam) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Photocam) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Photocam) Add() (*EvasObject) {
  _cgo_return_ := C.elm_photocam_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photocam) FileSet(file string) (C.Evas_Load_Error) {
  _c_file := C.CString(file)
  _cgo_return_ := C.elm_photocam_file_set(self.obj, _c_file)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photocam) ZoomSet(zoom float64) () {
  _c_zoom := C.double(zoom)
  C.elm_photocam_zoom_set(self.obj, _c_zoom)
}

func (self *Photocam) ZoomModeSet(mode C.Elm_Photocam_Zoom_Mode) () {
  C.elm_photocam_zoom_mode_set(self.obj, mode)
}

func (self *Photocam) ImageRegionShow(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_photocam_image_region_show(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photocam) ImageRegionBringIn(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_photocam_image_region_bring_in(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photocam) PausedSet(paused bool) () {
  _c_paused := (C.Eina_Bool)(0)
  if paused { _c_paused = (C.Eina_Bool)(1) }
  C.elm_photocam_paused_set(self.obj, _c_paused)
}

func (self *Photocam) GestureEnabledSet(gesture bool) () {
  _c_gesture := (C.Eina_Bool)(0)
  if gesture { _c_gesture = (C.Eina_Bool)(1) }
  C.elm_photocam_gesture_enabled_set(self.obj, _c_gesture)
}

func (self *Photo) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Photo) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Photo) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Photo) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Photo) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Photo) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Photo) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Photo) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Photo) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Photo) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Photo) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Photo) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Photo) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photo) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Photo) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Photo) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Photo) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Photo) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Photo) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Photo) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Photo) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Photo) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Photo) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Photo) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Photo) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Photo) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Photo) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Photo) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Photo) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Photo) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Photo) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Photo) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Photo) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Photo) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Photo) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Photo) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Photo) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Photo) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Photo) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Photo) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Photo) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Photo) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Photo) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Photo) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Photo) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Photo) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Photo) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Photo) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Photo) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Photo) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Photo) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photo) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Photo) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Photo) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Photo) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Photo) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Photo) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Photo) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Photo) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Photo) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photo) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Photo) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Photo) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Photo) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Photo) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Photo) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Photo) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Photo) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Photo) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Photo) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Photo) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Photo) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Photo) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Photo) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photo) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photo) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photo) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photo) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Photo) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Photo) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Photo) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Photo) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Photo) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Photo) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Photo) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Photo) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Photo) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Photo) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Photo) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Photo) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Photo) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Photo) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Photo) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Photo) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Photo) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Photo) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Photo) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Photo) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Photo) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Photo) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Photo) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Photo) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Photo) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Photo) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Photo) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Photo) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Photo) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photo) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photo) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Photo) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Photo) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Photo) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Photo) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Photo) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Photo) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Photo) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Photo) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Photo) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Photo) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Photo) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photo) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photo) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photo) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photo) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Photo) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photo) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Photo) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Photo) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Photo) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Photo) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Photo) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photo) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Photo) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Photo) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Photo) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Photo) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Photo) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Photo) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Photo) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Photo) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Photo) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Photo) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Photo) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Photo) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Photo) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Photo) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Photo) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Photo) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Photo) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Photo) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Photo) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Photo) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Photo) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Photo) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Photo) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Photo) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Photo) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Photo) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Photo) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photo) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Photo) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Photo) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Photo) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Photo) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Photo) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Photo) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Photo) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Photo) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Photo) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Photo) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Photo) Add() (*EvasObject) {
  _cgo_return_ := C.elm_photo_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Photo) FileSet(file string) (bool) {
  _c_file := C.CString(file)
  _cgo_return_ := C.elm_photo_file_set(self.obj, _c_file)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Photo) SizeSet(size int) () {
  _c_size := C.int(size)
  C.elm_photo_size_set(self.obj, _c_size)
}

func (self *Photo) FillInsideSet(fill bool) () {
  _c_fill := (C.Eina_Bool)(0)
  if fill { _c_fill = (C.Eina_Bool)(1) }
  C.elm_photo_fill_inside_set(self.obj, _c_fill)
}

func (self *Photo) EditableSet(set bool) () {
  _c_set := (C.Eina_Bool)(0)
  if set { _c_set = (C.Eina_Bool)(1) }
  C.elm_photo_editable_set(self.obj, _c_set)
}

func (self *Photo) AspectFixedSet(fixed bool) () {
  _c_fixed := (C.Eina_Bool)(0)
  if fixed { _c_fixed = (C.Eina_Bool)(1) }
  C.elm_photo_aspect_fixed_set(self.obj, _c_fixed)
}

func (self *Plug) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Plug) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Plug) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Plug) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Plug) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Plug) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Plug) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Plug) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Plug) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Plug) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Plug) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Plug) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Plug) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Plug) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Plug) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Plug) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Plug) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Plug) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Plug) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Plug) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Plug) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Plug) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Plug) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Plug) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Plug) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Plug) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Plug) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Plug) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Plug) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Plug) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Plug) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Plug) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Plug) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Plug) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Plug) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Plug) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Plug) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Plug) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Plug) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Plug) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Plug) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Plug) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Plug) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Plug) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Plug) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Plug) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Plug) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Plug) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Plug) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Plug) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Plug) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Plug) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Plug) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Plug) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Plug) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Plug) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Plug) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Plug) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Plug) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Plug) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Plug) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Plug) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Plug) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Plug) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Plug) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Plug) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Plug) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Plug) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Plug) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Plug) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Plug) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Plug) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Plug) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Plug) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Plug) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Plug) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Plug) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Plug) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Plug) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Plug) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Plug) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Plug) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Plug) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Plug) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Plug) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Plug) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Plug) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Plug) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Plug) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Plug) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Plug) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Plug) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Plug) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Plug) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Plug) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Plug) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Plug) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Plug) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Plug) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Plug) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Plug) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Plug) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Plug) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Plug) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Plug) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Plug) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Plug) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Plug) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Plug) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Plug) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Plug) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Plug) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Plug) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Plug) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Plug) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Plug) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Plug) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Plug) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Plug) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Plug) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Plug) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Plug) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Plug) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Plug) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Plug) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Plug) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Plug) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Plug) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Plug) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Plug) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Plug) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Plug) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Plug) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Plug) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Plug) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Plug) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Plug) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Plug) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Plug) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Plug) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Plug) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Plug) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Plug) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Plug) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Plug) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Plug) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Plug) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Plug) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Plug) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Plug) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Plug) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Plug) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Plug) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Plug) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Plug) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Plug) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Plug) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Plug) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Plug) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Plug) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Plug) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Plug) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Plug) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Plug) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Plug) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Plug) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Plug) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Plug) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Plug) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Plug) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Plug) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Plug) Add() (*EvasObject) {
  _cgo_return_ := C.elm_plug_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Plug) Connect(svcname string, svcnum int, svcsys bool) (bool) {
  _c_svcname := C.CString(svcname)
  _c_svcnum := C.int(svcnum)
  _c_svcsys := (C.Eina_Bool)(0)
  if svcsys { _c_svcsys = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_plug_connect(self.obj, _c_svcname, _c_svcnum, _c_svcsys)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Progressbar) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Progressbar) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Progressbar) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Progressbar) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Progressbar) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Progressbar) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Progressbar) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Progressbar) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Progressbar) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Progressbar) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Progressbar) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Progressbar) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Progressbar) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Progressbar) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Progressbar) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Progressbar) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Progressbar) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Progressbar) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Progressbar) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Progressbar) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Progressbar) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Progressbar) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Progressbar) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Progressbar) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Progressbar) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Progressbar) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Progressbar) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Progressbar) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Progressbar) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Progressbar) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Progressbar) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Progressbar) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Progressbar) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Progressbar) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Progressbar) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Progressbar) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Progressbar) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Progressbar) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Progressbar) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Progressbar) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Progressbar) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Progressbar) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Progressbar) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Progressbar) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Progressbar) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Progressbar) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Progressbar) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Progressbar) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Progressbar) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Progressbar) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Progressbar) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Progressbar) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Progressbar) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Progressbar) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Progressbar) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Progressbar) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Progressbar) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Progressbar) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Progressbar) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Progressbar) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Progressbar) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Progressbar) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Progressbar) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Progressbar) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Progressbar) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Progressbar) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Progressbar) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Progressbar) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Progressbar) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Progressbar) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Progressbar) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Progressbar) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Progressbar) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Progressbar) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Progressbar) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Progressbar) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Progressbar) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Progressbar) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Progressbar) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Progressbar) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Progressbar) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Progressbar) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Progressbar) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Progressbar) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Progressbar) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Progressbar) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Progressbar) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Progressbar) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Progressbar) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Progressbar) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Progressbar) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Progressbar) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Progressbar) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Progressbar) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Progressbar) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Progressbar) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Progressbar) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Progressbar) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Progressbar) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Progressbar) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Progressbar) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Progressbar) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Progressbar) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Progressbar) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Progressbar) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Progressbar) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Progressbar) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Progressbar) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Progressbar) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Progressbar) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Progressbar) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Progressbar) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Progressbar) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Progressbar) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Progressbar) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Progressbar) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Progressbar) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Progressbar) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Progressbar) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Progressbar) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Progressbar) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Progressbar) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Progressbar) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Progressbar) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Progressbar) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Progressbar) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Progressbar) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Progressbar) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Progressbar) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Progressbar) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Progressbar) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Progressbar) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Progressbar) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Progressbar) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Progressbar) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Progressbar) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Progressbar) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Progressbar) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Progressbar) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Progressbar) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Progressbar) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Progressbar) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Progressbar) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Progressbar) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Progressbar) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Progressbar) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Progressbar) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Progressbar) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Progressbar) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Progressbar) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Progressbar) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Progressbar) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Progressbar) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Progressbar) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Progressbar) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Progressbar) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Progressbar) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Progressbar) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Progressbar) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Progressbar) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Progressbar) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Progressbar) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Progressbar) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Progressbar) Add() (*EvasObject) {
  _cgo_return_ := C.elm_progressbar_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Progressbar) PulseSet(pulse bool) () {
  _c_pulse := (C.Eina_Bool)(0)
  if pulse { _c_pulse = (C.Eina_Bool)(1) }
  C.elm_progressbar_pulse_set(self.obj, _c_pulse)
}

func (self *Progressbar) Pulse(state bool) () {
  _c_state := (C.Eina_Bool)(0)
  if state { _c_state = (C.Eina_Bool)(1) }
  C.elm_progressbar_pulse(self.obj, _c_state)
}

func (self *Progressbar) ValueSet(val float64) () {
  _c_val := C.double(val)
  C.elm_progressbar_value_set(self.obj, _c_val)
}

func (self *Progressbar) SpanSizeSet(size C.Evas_Coord) () {
  C.elm_progressbar_span_size_set(self.obj, size)
}

func (self *Progressbar) UnitFormatSet(format string) () {
  _c_format := C.CString(format)
  C.elm_progressbar_unit_format_set(self.obj, _c_format)
}

func (self *Progressbar) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_progressbar_horizontal_set(self.obj, _c_horizontal)
}

func (self *Progressbar) InvertedSet(inverted bool) () {
  _c_inverted := (C.Eina_Bool)(0)
  if inverted { _c_inverted = (C.Eina_Bool)(1) }
  C.elm_progressbar_inverted_set(self.obj, _c_inverted)
}

func (self *Radio) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Radio) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Radio) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Radio) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Radio) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Radio) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Radio) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Radio) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Radio) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Radio) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Radio) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Radio) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Radio) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Radio) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Radio) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Radio) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Radio) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Radio) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Radio) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Radio) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Radio) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Radio) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Radio) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Radio) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Radio) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Radio) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Radio) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Radio) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Radio) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Radio) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Radio) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Radio) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Radio) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Radio) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Radio) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Radio) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Radio) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Radio) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Radio) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Radio) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Radio) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Radio) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Radio) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Radio) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Radio) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Radio) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Radio) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Radio) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Radio) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Radio) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Radio) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Radio) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Radio) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Radio) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Radio) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Radio) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Radio) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Radio) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Radio) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Radio) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Radio) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Radio) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Radio) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Radio) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Radio) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Radio) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Radio) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Radio) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Radio) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Radio) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Radio) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Radio) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Radio) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Radio) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Radio) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Radio) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Radio) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Radio) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Radio) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Radio) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Radio) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Radio) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Radio) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Radio) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Radio) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Radio) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Radio) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Radio) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Radio) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Radio) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Radio) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Radio) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Radio) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Radio) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Radio) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Radio) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Radio) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Radio) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Radio) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Radio) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Radio) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Radio) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Radio) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Radio) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Radio) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Radio) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Radio) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Radio) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Radio) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Radio) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Radio) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Radio) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Radio) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Radio) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Radio) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Radio) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Radio) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Radio) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Radio) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Radio) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Radio) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Radio) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Radio) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Radio) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Radio) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Radio) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Radio) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Radio) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Radio) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Radio) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Radio) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Radio) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Radio) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Radio) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Radio) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Radio) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Radio) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Radio) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Radio) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Radio) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Radio) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Radio) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Radio) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Radio) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Radio) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Radio) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Radio) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Radio) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Radio) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Radio) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Radio) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Radio) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Radio) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Radio) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Radio) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Radio) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Radio) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Radio) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Radio) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Radio) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Radio) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Radio) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Radio) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Radio) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Radio) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Radio) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Radio) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Radio) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Radio) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Radio) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Radio) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Radio) Add() (*EvasObject) {
  _cgo_return_ := C.elm_radio_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Radio) GroupAdd(group EvasObjectInterface) () {
  var _c_group *C.Evas_Object
  if group != nil { _c_group = group.GetObj() }
  C.elm_radio_group_add(self.obj, _c_group)
}

func (self *Radio) StateValueSet(value int) () {
  _c_value := C.int(value)
  C.elm_radio_state_value_set(self.obj, _c_value)
}

func (self *Radio) ValueSet(value int) () {
  _c_value := C.int(value)
  C.elm_radio_value_set(self.obj, _c_value)
}

func (self *Radio) SelectedObjectGet() (*EvasObject) {
  _cgo_return_ := C.elm_radio_selected_object_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Route) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Route) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Route) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Route) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Route) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Route) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Route) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Route) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Route) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Route) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Route) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Route) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Route) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Route) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Route) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Route) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Route) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Route) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Route) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Route) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Route) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Route) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Route) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Route) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Route) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Route) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Route) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Route) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Route) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Route) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Route) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Route) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Route) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Route) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Route) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Route) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Route) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Route) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Route) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Route) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Route) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Route) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Route) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Route) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Route) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Route) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Route) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Route) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Route) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Route) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Route) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Route) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Route) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Route) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Route) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Route) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Route) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Route) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Route) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Route) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Route) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Route) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Route) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Route) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Route) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Route) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Route) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Route) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Route) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Route) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Route) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Route) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Route) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Route) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Route) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Route) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Route) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Route) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Route) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Route) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Route) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Route) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Route) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Route) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Route) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Route) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Route) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Route) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Route) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Route) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Route) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Route) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Route) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Route) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Route) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Route) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Route) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Route) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Route) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Route) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Route) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Route) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Route) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Route) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Route) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Route) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Route) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Route) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Route) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Route) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Route) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Route) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Route) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Route) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Route) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Route) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Route) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Route) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Route) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Route) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Route) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Route) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Route) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Route) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Route) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Route) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Route) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Route) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Route) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Route) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Route) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Route) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Route) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Route) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Route) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Route) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Route) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Route) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Route) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Route) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Route) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Route) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Route) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Route) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Route) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Route) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Route) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Route) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Route) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Route) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Route) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Route) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Route) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Route) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Route) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Route) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Route) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Route) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Route) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Route) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Route) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Route) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Route) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Route) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Route) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Route) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Route) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Route) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Route) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Route) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Route) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Route) Add() (*EvasObject) {
  _cgo_return_ := C.elm_route_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *SegmentControl) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *SegmentControl) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *SegmentControl) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *SegmentControl) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *SegmentControl) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *SegmentControl) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *SegmentControl) Del() () {
  C.evas_object_del(self.obj)
}

func (self *SegmentControl) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *SegmentControl) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *SegmentControl) Show() () {
  C.evas_object_show(self.obj)
}

func (self *SegmentControl) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *SegmentControl) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *SegmentControl) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *SegmentControl) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *SegmentControl) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *SegmentControl) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *SegmentControl) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *SegmentControl) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *SegmentControl) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *SegmentControl) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *SegmentControl) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *SegmentControl) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *SegmentControl) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *SegmentControl) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *SegmentControl) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *SegmentControl) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *SegmentControl) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *SegmentControl) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *SegmentControl) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *SegmentControl) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *SegmentControl) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *SegmentControl) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *SegmentControl) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *SegmentControl) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *SegmentControl) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *SegmentControl) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *SegmentControl) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *SegmentControl) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *SegmentControl) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *SegmentControl) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *SegmentControl) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *SegmentControl) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *SegmentControl) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *SegmentControl) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *SegmentControl) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *SegmentControl) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *SegmentControl) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *SegmentControl) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *SegmentControl) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *SegmentControl) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *SegmentControl) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *SegmentControl) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *SegmentControl) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *SegmentControl) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *SegmentControl) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *SegmentControl) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *SegmentControl) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *SegmentControl) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *SegmentControl) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *SegmentControl) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *SegmentControl) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *SegmentControl) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *SegmentControl) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *SegmentControl) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *SegmentControl) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *SegmentControl) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *SegmentControl) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *SegmentControl) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *SegmentControl) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *SegmentControl) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *SegmentControl) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *SegmentControl) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *SegmentControl) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *SegmentControl) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *SegmentControl) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *SegmentControl) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *SegmentControl) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *SegmentControl) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *SegmentControl) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *SegmentControl) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *SegmentControl) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *SegmentControl) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *SegmentControl) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *SegmentControl) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *SegmentControl) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *SegmentControl) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *SegmentControl) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *SegmentControl) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *SegmentControl) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *SegmentControl) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *SegmentControl) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *SegmentControl) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *SegmentControl) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *SegmentControl) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *SegmentControl) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *SegmentControl) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *SegmentControl) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *SegmentControl) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *SegmentControl) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *SegmentControl) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *SegmentControl) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *SegmentControl) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *SegmentControl) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *SegmentControl) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *SegmentControl) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *SegmentControl) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *SegmentControl) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *SegmentControl) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *SegmentControl) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *SegmentControl) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *SegmentControl) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *SegmentControl) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *SegmentControl) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *SegmentControl) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *SegmentControl) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *SegmentControl) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *SegmentControl) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *SegmentControl) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *SegmentControl) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *SegmentControl) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *SegmentControl) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *SegmentControl) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *SegmentControl) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *SegmentControl) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *SegmentControl) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *SegmentControl) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *SegmentControl) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *SegmentControl) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *SegmentControl) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *SegmentControl) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *SegmentControl) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *SegmentControl) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *SegmentControl) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *SegmentControl) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *SegmentControl) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *SegmentControl) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *SegmentControl) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *SegmentControl) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *SegmentControl) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *SegmentControl) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *SegmentControl) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *SegmentControl) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *SegmentControl) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *SegmentControl) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *SegmentControl) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *SegmentControl) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *SegmentControl) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *SegmentControl) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *SegmentControl) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *SegmentControl) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *SegmentControl) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *SegmentControl) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *SegmentControl) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *SegmentControl) Add() (*EvasObject) {
  _cgo_return_ := C.elm_segment_control_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *SegmentControl) ItemAdd(icon EvasObjectInterface, label string) (*C.Elm_Object_Item) {
  var _c_icon *C.Evas_Object
  if icon != nil { _c_icon = icon.GetObj() }
  _c_label := C.CString(label)
  _cgo_return_ := C.elm_segment_control_item_add(self.obj, _c_icon, _c_label)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) ItemInsertAt(icon EvasObjectInterface, label string, index int) (*C.Elm_Object_Item) {
  var _c_icon *C.Evas_Object
  if icon != nil { _c_icon = icon.GetObj() }
  _c_label := C.CString(label)
  _c_index := C.int(index)
  _cgo_return_ := C.elm_segment_control_item_insert_at(self.obj, _c_icon, _c_label, _c_index)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *SegmentControl) ItemDelAt(index int) () {
  _c_index := C.int(index)
  C.elm_segment_control_item_del_at(self.obj, _c_index)
}

func (self *Separator) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Separator) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Separator) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Separator) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Separator) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Separator) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Separator) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Separator) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Separator) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Separator) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Separator) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Separator) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Separator) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Separator) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Separator) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Separator) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Separator) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Separator) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Separator) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Separator) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Separator) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Separator) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Separator) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Separator) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Separator) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Separator) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Separator) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Separator) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Separator) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Separator) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Separator) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Separator) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Separator) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Separator) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Separator) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Separator) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Separator) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Separator) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Separator) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Separator) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Separator) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Separator) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Separator) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Separator) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Separator) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Separator) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Separator) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Separator) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Separator) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Separator) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Separator) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Separator) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Separator) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Separator) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Separator) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Separator) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Separator) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Separator) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Separator) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Separator) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Separator) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Separator) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Separator) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Separator) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Separator) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Separator) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Separator) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Separator) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Separator) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Separator) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Separator) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Separator) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Separator) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Separator) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Separator) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Separator) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Separator) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Separator) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Separator) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Separator) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Separator) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Separator) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Separator) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Separator) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Separator) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Separator) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Separator) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Separator) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Separator) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Separator) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Separator) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Separator) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Separator) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Separator) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Separator) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Separator) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Separator) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Separator) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Separator) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Separator) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Separator) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Separator) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Separator) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Separator) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Separator) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Separator) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Separator) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Separator) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Separator) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Separator) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Separator) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Separator) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Separator) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Separator) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Separator) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Separator) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Separator) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Separator) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Separator) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Separator) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Separator) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Separator) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Separator) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Separator) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Separator) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Separator) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Separator) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Separator) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Separator) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Separator) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Separator) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Separator) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Separator) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Separator) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Separator) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Separator) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Separator) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Separator) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Separator) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Separator) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Separator) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Separator) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Separator) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Separator) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Separator) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Separator) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Separator) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Separator) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Separator) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Separator) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Separator) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Separator) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Separator) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Separator) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Separator) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Separator) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Separator) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Separator) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Separator) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Separator) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Separator) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Separator) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Separator) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Separator) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Separator) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Separator) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Separator) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Separator) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Separator) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Separator) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Separator) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Separator) Add() (*EvasObject) {
  _cgo_return_ := C.elm_separator_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Separator) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_separator_horizontal_set(self.obj, _c_horizontal)
}

func (self *Slider) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Slider) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Slider) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Slider) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Slider) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Slider) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Slider) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Slider) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Slider) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Slider) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Slider) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Slider) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Slider) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slider) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Slider) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Slider) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Slider) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Slider) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Slider) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Slider) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Slider) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Slider) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Slider) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Slider) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Slider) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Slider) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Slider) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Slider) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Slider) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Slider) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Slider) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Slider) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Slider) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Slider) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Slider) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Slider) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Slider) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Slider) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Slider) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Slider) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Slider) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Slider) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Slider) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Slider) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Slider) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Slider) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Slider) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Slider) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Slider) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Slider) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Slider) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Slider) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Slider) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Slider) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Slider) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Slider) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Slider) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Slider) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Slider) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Slider) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Slider) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Slider) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Slider) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Slider) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Slider) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Slider) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Slider) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Slider) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Slider) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Slider) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Slider) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Slider) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Slider) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Slider) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slider) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slider) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slider) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slider) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Slider) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Slider) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Slider) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Slider) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Slider) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Slider) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Slider) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Slider) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Slider) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Slider) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Slider) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Slider) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Slider) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slider) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Slider) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Slider) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Slider) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Slider) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Slider) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Slider) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Slider) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Slider) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Slider) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Slider) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Slider) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Slider) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Slider) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Slider) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Slider) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slider) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slider) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Slider) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Slider) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Slider) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Slider) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Slider) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Slider) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Slider) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Slider) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Slider) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Slider) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Slider) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slider) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slider) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slider) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slider) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slider) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slider) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Slider) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Slider) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Slider) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Slider) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Slider) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slider) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Slider) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Slider) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Slider) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Slider) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Slider) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Slider) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Slider) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Slider) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Slider) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Slider) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Slider) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Slider) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Slider) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Slider) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Slider) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Slider) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Slider) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Slider) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Slider) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Slider) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Slider) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Slider) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Slider) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Slider) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Slider) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Slider) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Slider) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slider) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Slider) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slider) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Slider) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Slider) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Slider) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Slider) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Slider) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Slider) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Slider) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Slider) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Slider) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Slider) Add() (*EvasObject) {
  _cgo_return_ := C.elm_slider_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slider) SpanSizeSet(size C.Evas_Coord) () {
  C.elm_slider_span_size_set(self.obj, size)
}

func (self *Slider) UnitFormatSet(format string) () {
  _c_format := C.CString(format)
  C.elm_slider_unit_format_set(self.obj, _c_format)
}

func (self *Slider) IndicatorFormatSet(indicator string) () {
  _c_indicator := C.CString(indicator)
  C.elm_slider_indicator_format_set(self.obj, _c_indicator)
}

func (self *Slider) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_slider_horizontal_set(self.obj, _c_horizontal)
}

func (self *Slider) MinMaxSet(min float64, max float64) () {
  _c_min := C.double(min)
  _c_max := C.double(max)
  C.elm_slider_min_max_set(self.obj, _c_min, _c_max)
}

func (self *Slider) ValueSet(val float64) () {
  _c_val := C.double(val)
  C.elm_slider_value_set(self.obj, _c_val)
}

func (self *Slider) InvertedSet(inverted bool) () {
  _c_inverted := (C.Eina_Bool)(0)
  if inverted { _c_inverted = (C.Eina_Bool)(1) }
  C.elm_slider_inverted_set(self.obj, _c_inverted)
}

func (self *Slider) IndicatorShowSet(show bool) () {
  _c_show := (C.Eina_Bool)(0)
  if show { _c_show = (C.Eina_Bool)(1) }
  C.elm_slider_indicator_show_set(self.obj, _c_show)
}

func (self *Slideshow) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Slideshow) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Slideshow) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Slideshow) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Slideshow) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Slideshow) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Slideshow) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Slideshow) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Slideshow) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Slideshow) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Slideshow) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Slideshow) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Slideshow) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slideshow) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Slideshow) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Slideshow) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Slideshow) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Slideshow) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Slideshow) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Slideshow) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Slideshow) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Slideshow) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Slideshow) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Slideshow) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Slideshow) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Slideshow) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Slideshow) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Slideshow) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Slideshow) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Slideshow) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Slideshow) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Slideshow) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Slideshow) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Slideshow) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Slideshow) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Slideshow) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Slideshow) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Slideshow) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Slideshow) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Slideshow) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Slideshow) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Slideshow) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Slideshow) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Slideshow) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Slideshow) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Slideshow) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Slideshow) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Slideshow) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Slideshow) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Slideshow) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Slideshow) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Slideshow) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Slideshow) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Slideshow) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Slideshow) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Slideshow) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Slideshow) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Slideshow) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Slideshow) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Slideshow) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Slideshow) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Slideshow) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Slideshow) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Slideshow) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Slideshow) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Slideshow) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Slideshow) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Slideshow) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Slideshow) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Slideshow) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Slideshow) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Slideshow) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Slideshow) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Slideshow) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slideshow) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slideshow) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slideshow) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slideshow) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Slideshow) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Slideshow) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Slideshow) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Slideshow) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Slideshow) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Slideshow) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Slideshow) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Slideshow) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Slideshow) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Slideshow) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Slideshow) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Slideshow) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Slideshow) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Slideshow) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Slideshow) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Slideshow) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Slideshow) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Slideshow) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Slideshow) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Slideshow) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Slideshow) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Slideshow) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Slideshow) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Slideshow) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Slideshow) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Slideshow) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Slideshow) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Slideshow) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Slideshow) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slideshow) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slideshow) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Slideshow) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Slideshow) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Slideshow) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Slideshow) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slideshow) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slideshow) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slideshow) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slideshow) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slideshow) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slideshow) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Slideshow) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Slideshow) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Slideshow) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Slideshow) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Slideshow) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slideshow) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Slideshow) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Slideshow) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Slideshow) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Slideshow) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Slideshow) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Slideshow) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Slideshow) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Slideshow) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Slideshow) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Slideshow) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Slideshow) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Slideshow) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Slideshow) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Slideshow) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Slideshow) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Slideshow) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Slideshow) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Slideshow) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Slideshow) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Slideshow) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Slideshow) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Slideshow) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Slideshow) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Slideshow) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Slideshow) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Slideshow) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Slideshow) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slideshow) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Slideshow) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Slideshow) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Slideshow) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Slideshow) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Slideshow) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Slideshow) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Slideshow) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Slideshow) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Slideshow) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Slideshow) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Slideshow) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Slideshow) Add() (*EvasObject) {
  _cgo_return_ := C.elm_slideshow_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Slideshow) ItemAdd(itc *C.Elm_Slideshow_Item_Class, data unsafe.Pointer) (*C.Elm_Object_Item) {
  _cgo_return_ := C.elm_slideshow_item_add(self.obj, itc, data)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Slideshow) Next() () {
  C.elm_slideshow_next(self.obj)
}

func (self *Slideshow) Previous() () {
  C.elm_slideshow_previous(self.obj)
}

func (self *Slideshow) TransitionSet(transition string) () {
  _c_transition := C.CString(transition)
  C.elm_slideshow_transition_set(self.obj, _c_transition)
}

func (self *Slideshow) TimeoutSet(timeout float64) () {
  _c_timeout := C.double(timeout)
  C.elm_slideshow_timeout_set(self.obj, _c_timeout)
}

func (self *Slideshow) LoopSet(loop bool) () {
  _c_loop := (C.Eina_Bool)(0)
  if loop { _c_loop = (C.Eina_Bool)(1) }
  C.elm_slideshow_loop_set(self.obj, _c_loop)
}

func (self *Slideshow) Clear() () {
  C.elm_slideshow_clear(self.obj)
}

func (self *Slideshow) LayoutSet(layout string) () {
  _c_layout := C.CString(layout)
  C.elm_slideshow_layout_set(self.obj, _c_layout)
}

func (self *Slideshow) CacheBeforeSet(count int) () {
  _c_count := C.int(count)
  C.elm_slideshow_cache_before_set(self.obj, _c_count)
}

func (self *Slideshow) CacheAfterSet(count int) () {
  _c_count := C.int(count)
  C.elm_slideshow_cache_after_set(self.obj, _c_count)
}

func (self *Spinner) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Spinner) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Spinner) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Spinner) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Spinner) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Spinner) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Spinner) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Spinner) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Spinner) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Spinner) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Spinner) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Spinner) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Spinner) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Spinner) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Spinner) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Spinner) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Spinner) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Spinner) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Spinner) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Spinner) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Spinner) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Spinner) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Spinner) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Spinner) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Spinner) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Spinner) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Spinner) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Spinner) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Spinner) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Spinner) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Spinner) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Spinner) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Spinner) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Spinner) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Spinner) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Spinner) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Spinner) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Spinner) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Spinner) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Spinner) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Spinner) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Spinner) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Spinner) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Spinner) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Spinner) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Spinner) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Spinner) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Spinner) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Spinner) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Spinner) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Spinner) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Spinner) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Spinner) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Spinner) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Spinner) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Spinner) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Spinner) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Spinner) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Spinner) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Spinner) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Spinner) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Spinner) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Spinner) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Spinner) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Spinner) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Spinner) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Spinner) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Spinner) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Spinner) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Spinner) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Spinner) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Spinner) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Spinner) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Spinner) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Spinner) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Spinner) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Spinner) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Spinner) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Spinner) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Spinner) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Spinner) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Spinner) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Spinner) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Spinner) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Spinner) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Spinner) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Spinner) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Spinner) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Spinner) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Spinner) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Spinner) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Spinner) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Spinner) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Spinner) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Spinner) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Spinner) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Spinner) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Spinner) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Spinner) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Spinner) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Spinner) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Spinner) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Spinner) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Spinner) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Spinner) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Spinner) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Spinner) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Spinner) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Spinner) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Spinner) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Spinner) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Spinner) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Spinner) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Spinner) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Spinner) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Spinner) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Spinner) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Spinner) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Spinner) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Spinner) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Spinner) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Spinner) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Spinner) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Spinner) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Spinner) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Spinner) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Spinner) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Spinner) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Spinner) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Spinner) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Spinner) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Spinner) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Spinner) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Spinner) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Spinner) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Spinner) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Spinner) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Spinner) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Spinner) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Spinner) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Spinner) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Spinner) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Spinner) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Spinner) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Spinner) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Spinner) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Spinner) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Spinner) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Spinner) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Spinner) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Spinner) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Spinner) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Spinner) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Spinner) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Spinner) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Spinner) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Spinner) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Spinner) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Spinner) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Spinner) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Spinner) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Spinner) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Spinner) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Spinner) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Spinner) Add() (*EvasObject) {
  _cgo_return_ := C.elm_spinner_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Spinner) LabelFormatSet(fmt string) () {
  _c_fmt := C.CString(fmt)
  C.elm_spinner_label_format_set(self.obj, _c_fmt)
}

func (self *Spinner) MinMaxSet(min float64, max float64) () {
  _c_min := C.double(min)
  _c_max := C.double(max)
  C.elm_spinner_min_max_set(self.obj, _c_min, _c_max)
}

func (self *Spinner) StepSet(step float64) () {
  _c_step := C.double(step)
  C.elm_spinner_step_set(self.obj, _c_step)
}

func (self *Spinner) ValueSet(val float64) () {
  _c_val := C.double(val)
  C.elm_spinner_value_set(self.obj, _c_val)
}

func (self *Spinner) WrapSet(wrap bool) () {
  _c_wrap := (C.Eina_Bool)(0)
  if wrap { _c_wrap = (C.Eina_Bool)(1) }
  C.elm_spinner_wrap_set(self.obj, _c_wrap)
}

func (self *Spinner) EditableSet(editable bool) () {
  _c_editable := (C.Eina_Bool)(0)
  if editable { _c_editable = (C.Eina_Bool)(1) }
  C.elm_spinner_editable_set(self.obj, _c_editable)
}

func (self *Spinner) SpecialValueAdd(value float64, label string) () {
  _c_value := C.double(value)
  _c_label := C.CString(label)
  C.elm_spinner_special_value_add(self.obj, _c_value, _c_label)
}

func (self *Spinner) IntervalSet(interval float64) () {
  _c_interval := C.double(interval)
  C.elm_spinner_interval_set(self.obj, _c_interval)
}

func (self *Spinner) BaseSet(base float64) () {
  _c_base := C.double(base)
  C.elm_spinner_base_set(self.obj, _c_base)
}

func (self *Spinner) RoundSet(rnd int) () {
  _c_rnd := C.int(rnd)
  C.elm_spinner_round_set(self.obj, _c_rnd)
}

func (self *Table) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Table) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Table) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Table) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Table) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Table) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Table) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Table) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Table) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Table) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Table) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Table) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Table) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Table) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Table) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Table) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Table) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Table) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Table) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Table) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Table) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Table) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Table) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Table) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Table) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Table) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Table) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Table) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Table) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Table) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Table) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Table) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Table) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Table) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Table) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Table) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Table) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Table) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Table) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Table) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Table) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Table) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Table) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Table) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Table) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Table) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Table) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Table) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Table) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Table) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Table) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Table) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Table) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Table) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Table) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Table) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Table) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Table) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Table) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Table) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Table) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Table) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Table) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Table) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Table) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Table) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Table) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Table) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Table) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Table) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Table) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Table) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Table) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Table) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Table) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Table) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Table) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Table) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Table) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Table) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Table) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Table) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Table) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Table) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Table) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Table) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Table) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Table) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Table) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Table) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Table) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Table) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Table) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Table) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Table) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Table) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Table) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Table) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Table) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Table) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Table) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Table) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Table) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Table) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Table) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Table) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Table) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Table) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Table) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Table) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Table) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Table) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Table) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Table) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Table) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Table) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Table) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Table) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Table) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Table) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Table) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Table) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Table) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Table) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Table) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Table) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Table) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Table) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Table) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Table) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Table) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Table) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Table) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Table) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Table) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Table) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Table) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Table) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Table) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Table) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Table) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Table) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Table) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Table) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Table) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Table) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Table) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Table) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Table) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Table) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Table) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Table) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Table) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Table) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Table) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Table) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Table) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Table) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Table) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Table) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Table) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Table) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Table) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Table) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Table) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Table) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Table) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Table) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Table) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Table) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Table) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Table) Add() (*EvasObject) {
  _cgo_return_ := C.elm_table_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Table) HomogeneousSet(homogeneous bool) () {
  _c_homogeneous := (C.Eina_Bool)(0)
  if homogeneous { _c_homogeneous = (C.Eina_Bool)(1) }
  C.elm_table_homogeneous_set(self.obj, _c_homogeneous)
}

func (self *Table) PaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.elm_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Table) Pack(subobj EvasObjectInterface, x int, y int, w int, h int) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_table_pack(self.obj, _c_subobj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Table) Unpack(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_table_unpack(self.obj, _c_subobj)
}

func (self *Table) Clear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.elm_table_clear(self.obj, _c_clear)
}

func (self *Table) PackSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_table_pack_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Table) PackGet() (int, int, int, int) {
  var _c_x_ C.int
  var _c_y_ C.int
  var _c_w_ C.int
  var _c_h_ C.int
  C.elm_table_pack_get(self.obj, &_c_x_, &_c_y_, &_c_w_, &_c_h_)
  return int(_c_x_), int(_c_y_), int(_c_w_), int(_c_h_)
}

func (self *Thumb) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Thumb) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Thumb) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Thumb) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Thumb) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Thumb) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Thumb) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Thumb) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Thumb) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Thumb) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Thumb) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Thumb) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Thumb) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Thumb) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Thumb) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Thumb) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Thumb) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Thumb) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Thumb) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Thumb) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Thumb) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Thumb) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Thumb) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Thumb) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Thumb) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Thumb) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Thumb) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Thumb) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Thumb) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Thumb) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Thumb) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Thumb) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Thumb) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Thumb) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Thumb) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Thumb) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Thumb) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Thumb) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Thumb) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Thumb) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Thumb) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Thumb) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Thumb) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Thumb) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Thumb) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Thumb) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Thumb) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Thumb) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Thumb) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Thumb) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Thumb) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Thumb) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Thumb) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Thumb) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Thumb) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Thumb) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Thumb) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Thumb) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Thumb) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Thumb) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Thumb) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Thumb) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Thumb) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Thumb) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Thumb) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Thumb) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Thumb) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Thumb) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Thumb) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Thumb) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Thumb) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Thumb) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Thumb) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Thumb) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Thumb) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Thumb) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Thumb) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Thumb) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Thumb) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Thumb) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Thumb) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Thumb) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Thumb) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Thumb) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Thumb) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Thumb) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Thumb) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Thumb) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Thumb) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Thumb) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Thumb) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Thumb) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Thumb) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Thumb) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Thumb) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Thumb) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Thumb) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Thumb) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Thumb) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Thumb) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Thumb) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Thumb) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Thumb) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Thumb) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Thumb) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Thumb) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Thumb) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Thumb) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Thumb) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Thumb) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Thumb) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Thumb) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Thumb) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Thumb) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Thumb) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Thumb) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Thumb) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Thumb) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Thumb) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Thumb) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Thumb) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Thumb) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Thumb) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Thumb) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Thumb) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Thumb) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Thumb) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Thumb) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Thumb) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Thumb) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Thumb) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Thumb) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Thumb) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Thumb) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Thumb) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Thumb) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Thumb) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Thumb) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Thumb) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Thumb) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Thumb) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Thumb) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Thumb) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Thumb) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Thumb) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Thumb) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Thumb) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Thumb) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Thumb) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Thumb) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Thumb) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Thumb) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Thumb) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Thumb) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Thumb) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Thumb) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Thumb) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Thumb) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Thumb) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Thumb) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Thumb) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Thumb) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Thumb) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Thumb) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Thumb) Add() (*EvasObject) {
  _cgo_return_ := C.elm_thumb_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Thumb) Reload() () {
  C.elm_thumb_reload(self.obj)
}

func (self *Thumb) FileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.elm_thumb_file_set(self.obj, _c_file, _c_key)
}

func (self *Thumb) AnimateSet(s C.Elm_Thumb_Animation_Setting) () {
  C.elm_thumb_animate_set(self.obj, s)
}

func (self *Thumb) EditableSet(edit bool) (bool) {
  _c_edit := (C.Eina_Bool)(0)
  if edit { _c_edit = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_thumb_editable_set(self.obj, _c_edit)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Toolbar) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Toolbar) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Toolbar) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Toolbar) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Toolbar) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Toolbar) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Toolbar) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Toolbar) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Toolbar) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Toolbar) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Toolbar) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Toolbar) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Toolbar) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Toolbar) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Toolbar) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Toolbar) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Toolbar) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Toolbar) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Toolbar) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Toolbar) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Toolbar) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Toolbar) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Toolbar) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Toolbar) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Toolbar) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Toolbar) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Toolbar) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Toolbar) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Toolbar) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Toolbar) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Toolbar) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Toolbar) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Toolbar) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Toolbar) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Toolbar) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Toolbar) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Toolbar) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Toolbar) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Toolbar) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Toolbar) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Toolbar) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Toolbar) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Toolbar) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Toolbar) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Toolbar) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Toolbar) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Toolbar) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Toolbar) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Toolbar) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Toolbar) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Toolbar) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Toolbar) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Toolbar) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Toolbar) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Toolbar) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Toolbar) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Toolbar) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Toolbar) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Toolbar) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Toolbar) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Toolbar) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Toolbar) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Toolbar) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Toolbar) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Toolbar) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Toolbar) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Toolbar) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Toolbar) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Toolbar) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Toolbar) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Toolbar) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Toolbar) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Toolbar) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Toolbar) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Toolbar) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Toolbar) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Toolbar) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Toolbar) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Toolbar) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Toolbar) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Toolbar) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Toolbar) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Toolbar) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Toolbar) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Toolbar) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Toolbar) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Toolbar) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Toolbar) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Toolbar) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Toolbar) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Toolbar) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Toolbar) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Toolbar) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Toolbar) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Toolbar) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Toolbar) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Toolbar) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Toolbar) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Toolbar) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Toolbar) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Toolbar) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Toolbar) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Toolbar) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Toolbar) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Toolbar) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Toolbar) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Toolbar) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Toolbar) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Toolbar) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Toolbar) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Toolbar) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Toolbar) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Toolbar) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Toolbar) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Toolbar) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Toolbar) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Toolbar) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Toolbar) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Toolbar) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Toolbar) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Toolbar) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Toolbar) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Toolbar) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Toolbar) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Toolbar) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Toolbar) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Toolbar) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Toolbar) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Toolbar) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Toolbar) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Toolbar) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Toolbar) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Toolbar) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Toolbar) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Toolbar) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Toolbar) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Toolbar) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Toolbar) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Toolbar) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Toolbar) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Toolbar) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Toolbar) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Toolbar) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Toolbar) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Toolbar) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Toolbar) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Toolbar) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Toolbar) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Toolbar) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Toolbar) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Toolbar) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Toolbar) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Toolbar) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Toolbar) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Toolbar) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Toolbar) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Toolbar) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Toolbar) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Toolbar) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Toolbar) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Toolbar) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Toolbar) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Toolbar) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Toolbar) Add() (*EvasObject) {
  _cgo_return_ := C.elm_toolbar_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Toolbar) IconSizeSet(icon_size int) () {
  _c_icon_size := C.int(icon_size)
  C.elm_toolbar_icon_size_set(self.obj, _c_icon_size)
}

func (self *Toolbar) IconOrderLookupSet(order C.Elm_Icon_Lookup_Order) () {
  C.elm_toolbar_icon_order_lookup_set(self.obj, order)
}

func (self *Toolbar) ShrinkModeSet(shrink_mode C.Elm_Toolbar_Shrink_Mode) () {
  C.elm_toolbar_shrink_mode_set(self.obj, shrink_mode)
}

func (self *Toolbar) HomogeneousSet(homogeneous bool) () {
  _c_homogeneous := (C.Eina_Bool)(0)
  if homogeneous { _c_homogeneous = (C.Eina_Bool)(1) }
  C.elm_toolbar_homogeneous_set(self.obj, _c_homogeneous)
}

func (self *Toolbar) MenuParentSet(parent EvasObjectInterface) () {
  var _c_parent *C.Evas_Object
  if parent != nil { _c_parent = parent.GetObj() }
  C.elm_toolbar_menu_parent_set(self.obj, _c_parent)
}

func (self *Toolbar) AlignSet(align float64) () {
  _c_align := C.double(align)
  C.elm_toolbar_align_set(self.obj, _c_align)
}

func (self *Toolbar) HorizontalSet(horizontal bool) () {
  _c_horizontal := (C.Eina_Bool)(0)
  if horizontal { _c_horizontal = (C.Eina_Bool)(1) }
  C.elm_toolbar_horizontal_set(self.obj, _c_horizontal)
}

func (self *Toolbar) StandardPrioritySet(priority int) () {
  _c_priority := C.int(priority)
  C.elm_toolbar_standard_priority_set(self.obj, _c_priority)
}

func (self *Toolbar) SelectModeSet(mode C.Elm_Object_Select_Mode) () {
  C.elm_toolbar_select_mode_set(self.obj, mode)
}

func (self *Player) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Player) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Player) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Player) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Player) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Player) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Player) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Player) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Player) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Player) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Player) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Player) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Player) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Player) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Player) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Player) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Player) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Player) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Player) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Player) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Player) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Player) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Player) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Player) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Player) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Player) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Player) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Player) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Player) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Player) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Player) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Player) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Player) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Player) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Player) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Player) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Player) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Player) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Player) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Player) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Player) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Player) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Player) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Player) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Player) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Player) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Player) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Player) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Player) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Player) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Player) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Player) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Player) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Player) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Player) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Player) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Player) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Player) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Player) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Player) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Player) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Player) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Player) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Player) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Player) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Player) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Player) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Player) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Player) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Player) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Player) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Player) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Player) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Player) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Player) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Player) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Player) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Player) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Player) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Player) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Player) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Player) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Player) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Player) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Player) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Player) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Player) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Player) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Player) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Player) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Player) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Player) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Player) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Player) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Player) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Player) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Player) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Player) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Player) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Player) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Player) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Player) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Player) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Player) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Player) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Player) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Player) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Player) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Player) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Player) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Player) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Player) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Player) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Player) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Player) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Player) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Player) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Player) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Player) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Player) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Player) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Player) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Player) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Player) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Player) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Player) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Player) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Player) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Player) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Player) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Player) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Player) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Player) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Player) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Player) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Player) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Player) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Player) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Player) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Player) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Player) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Player) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Player) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Player) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Player) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Player) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Player) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Player) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Player) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Player) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Player) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Player) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Player) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Player) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Player) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Player) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Player) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Player) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Player) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Player) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Player) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Player) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Player) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Player) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Player) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Player) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Player) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Player) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Player) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Player) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Player) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Player) Add() (*EvasObject) {
  _cgo_return_ := C.elm_player_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Video) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Video) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Video) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Video) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Video) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Video) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Video) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Video) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Video) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Video) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Video) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Video) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Video) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Video) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Video) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Video) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Video) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Video) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Video) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Video) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Video) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Video) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Video) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Video) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Video) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Video) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Video) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Video) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Video) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Video) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Video) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Video) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Video) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Video) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Video) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Video) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Video) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Video) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Video) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Video) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Video) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Video) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Video) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Video) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Video) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Video) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Video) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Video) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Video) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Video) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Video) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Video) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Video) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Video) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Video) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Video) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Video) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Video) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Video) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Video) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Video) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Video) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Video) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Video) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Video) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Video) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Video) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Video) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Video) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Video) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Video) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Video) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Video) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Video) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Video) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Video) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Video) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Video) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Video) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Video) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Video) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Video) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Video) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Video) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Video) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Video) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Video) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Video) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Video) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Video) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Video) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Video) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Video) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Video) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Video) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Video) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Video) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Video) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Video) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Video) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Video) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Video) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Video) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Video) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Video) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Video) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Video) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Video) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Video) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Video) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Video) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Video) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Video) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Video) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Video) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Video) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Video) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Video) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Video) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Video) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Video) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Video) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Video) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Video) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Video) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Video) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Video) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Video) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Video) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Video) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Video) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Video) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Video) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Video) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Video) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Video) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Video) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Video) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Video) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Video) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Video) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Video) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Video) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Video) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Video) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Video) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Video) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Video) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Video) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Video) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Video) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Video) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Video) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Video) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Video) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Video) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Video) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Video) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Video) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Video) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Video) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Video) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Video) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Video) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Video) Add() (*EvasObject) {
  _cgo_return_ := C.elm_video_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Video) FileSet(filename string) (bool) {
  _c_filename := C.CString(filename)
  _cgo_return_ := C.elm_video_file_set(self.obj, _c_filename)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Video) Play() () {
  C.elm_video_play(self.obj)
}

func (self *Video) Pause() () {
  C.elm_video_pause(self.obj)
}

func (self *Video) Stop() () {
  C.elm_video_stop(self.obj)
}

func (self *Video) AudioMuteSet(mute bool) () {
  _c_mute := (C.Eina_Bool)(0)
  if mute { _c_mute = (C.Eina_Bool)(1) }
  C.elm_video_audio_mute_set(self.obj, _c_mute)
}

func (self *Video) AudioLevelSet(volume float64) () {
  _c_volume := C.double(volume)
  C.elm_video_audio_level_set(self.obj, _c_volume)
}

func (self *Video) PlayPositionSet(position float64) () {
  _c_position := C.double(position)
  C.elm_video_play_position_set(self.obj, _c_position)
}

func (self *Video) RememberPositionSet(remember bool) () {
  _c_remember := (C.Eina_Bool)(0)
  if remember { _c_remember = (C.Eina_Bool)(1) }
  C.elm_video_remember_position_set(self.obj, _c_remember)
}

func (self *Web) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Web) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Web) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Web) LayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Web) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Web) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Web) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Web) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Web) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Web) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Web) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Web) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Web) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) Raise() () {
  C.evas_object_raise(self.obj)
}

func (self *Web) Lower() () {
  C.evas_object_lower(self.obj)
}

func (self *Web) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Web) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Web) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Web) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Web) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Web) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Web) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Web) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Web) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Web) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Web) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Web) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Web) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Web) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Web) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Web) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Web) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Web) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Web) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Web) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Web) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Web) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Web) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Web) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Web) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Web) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Web) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Web) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Web) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Web) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Web) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Web) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Web) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Web) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Web) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Web) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Web) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Web) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Web) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Web) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Web) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Web) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Web) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Web) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Web) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Web) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Web) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Web) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Web) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Web) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Web) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Web) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Web) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Web) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Web) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Web) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Web) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Web) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Web) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Web) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Web) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Web) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Web) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Web) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Web) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Web) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Web) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Web) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Web) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Web) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Web) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Web) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Web) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Web) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Web) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Web) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Web) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Web) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Web) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Web) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Web) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Web) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Web) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Web) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Web) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Web) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Web) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Web) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Web) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Web) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Web) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Web) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Web) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Web) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Web) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Web) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Web) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Web) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Web) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Web) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Web) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Web) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Web) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Web) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Web) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Web) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Web) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Web) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Web) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Web) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Web) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Web) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Web) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Web) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Web) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Web) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Web) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Web) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Web) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Web) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Web) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Web) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Web) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Web) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Web) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Web) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Web) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Web) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Web) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Web) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Web) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Web) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Web) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Web) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Web) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Web) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Web) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Web) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Web) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Web) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Web) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Web) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Web) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Web) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Web) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Web) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Web) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Web) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Web) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Web) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Web) Add() (*EvasObject) {
  _cgo_return_ := C.elm_web_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Web) UseragentSet(user_agent string) () {
  _c_user_agent := C.CString(user_agent)
  C.elm_web_useragent_set(self.obj, _c_user_agent)
}

func (self *Web) TabPropagateSet(propagate bool) () {
  _c_propagate := (C.Eina_Bool)(0)
  if propagate { _c_propagate = (C.Eina_Bool)(1) }
  C.elm_web_tab_propagate_set(self.obj, _c_propagate)
}

func (self *Web) UriSet(uri string) (bool) {
  _c_uri := C.CString(uri)
  _cgo_return_ := C.elm_web_uri_set(self.obj, _c_uri)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) BgColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.elm_web_bg_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Web) PopupSelectedSet(index int) () {
  _c_index := C.int(index)
  C.elm_web_popup_selected_set(self.obj, _c_index)
}

func (self *Web) PopupDestroy() (bool) {
  _cgo_return_ := C.elm_web_popup_destroy(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) TextMatchesMark(string string, case_sensitive bool, highlight bool, limit uint) (uint) {
  _c_string := C.CString(string)
  _c_case_sensitive := (C.Eina_Bool)(0)
  if case_sensitive { _c_case_sensitive = (C.Eina_Bool)(1) }
  _c_highlight := (C.Eina_Bool)(0)
  if highlight { _c_highlight = (C.Eina_Bool)(1) }
  _c_limit := C.uint(limit)
  _cgo_return_ := C.elm_web_text_matches_mark(self.obj, _c_string, _c_case_sensitive, _c_highlight, _c_limit)
  _go_return_ := uint(_cgo_return_)
  return _go_return_
}

func (self *Web) TextMatchesUnmarkAll() (bool) {
  _cgo_return_ := C.elm_web_text_matches_unmark_all(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) TextMatchesHighlightSet(highlight bool) (bool) {
  _c_highlight := (C.Eina_Bool)(0)
  if highlight { _c_highlight = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_web_text_matches_highlight_set(self.obj, _c_highlight)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) Stop() (bool) {
  _cgo_return_ := C.elm_web_stop(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) Reload() (bool) {
  _cgo_return_ := C.elm_web_reload(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) ReloadFull() (bool) {
  _cgo_return_ := C.elm_web_reload_full(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) Back() (bool) {
  _cgo_return_ := C.elm_web_back(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) Forward() (bool) {
  _cgo_return_ := C.elm_web_forward(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) Navigate(steps int) (bool) {
  _c_steps := C.int(steps)
  _cgo_return_ := C.elm_web_navigate(self.obj, _c_steps)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) BackPossibleGet() (bool) {
  _cgo_return_ := C.elm_web_back_possible_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) ForwardPossibleGet() (bool) {
  _cgo_return_ := C.elm_web_forward_possible_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) NavigatePossibleGet(steps int) (bool) {
  _c_steps := C.int(steps)
  _cgo_return_ := C.elm_web_navigate_possible_get(self.obj, _c_steps)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Web) HistoryEnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_web_history_enabled_set(self.obj, _c_enabled)
}

func (self *Web) ZoomSet(zoom float64) () {
  _c_zoom := C.double(zoom)
  C.elm_web_zoom_set(self.obj, _c_zoom)
}

func (self *Web) ZoomModeSet(mode C.Elm_Web_Zoom_Mode) () {
  C.elm_web_zoom_mode_set(self.obj, mode)
}

func (self *Web) RegionShow(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_web_region_show(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Web) RegionBringIn(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_web_region_bring_in(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Web) InwinModeSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.elm_web_inwin_mode_set(self.obj, _c_value)
}

func (self *Win) ClipSet(clip EvasObjectInterface) () {
  var _c_clip *C.Evas_Object
  if clip != nil { _c_clip = clip.GetObj() }
  C.evas_object_clip_set(self.obj, _c_clip)
}

func (self *Win) ClipUnset() () {
  C.evas_object_clip_unset(self.obj)
}

func (self *Win) EVASFocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.evas_object_focus_set(self.obj, _c_focus)
}

func (self *Win) EVASLayerSet(l int) () {
  _c_l := C.short(l)
  C.evas_object_layer_set(self.obj, _c_l)
}

func (self *Win) NameSet(name string) () {
  _c_name := C.CString(name)
  C.evas_object_name_set(self.obj, _c_name)
}

func (self *Win) Ref() () {
  C.evas_object_ref(self.obj)
}

func (self *Win) Unref() () {
  C.evas_object_unref(self.obj)
}

func (self *Win) Del() () {
  C.evas_object_del(self.obj)
}

func (self *Win) Move(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_move(self.obj, x, y)
}

func (self *Win) Resize(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_resize(self.obj, w, h)
}

func (self *Win) Show() () {
  C.evas_object_show(self.obj)
}

func (self *Win) Hide() () {
  C.evas_object_hide(self.obj)
}

func (self *Win) ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Win) EVASRaise() () {
  C.evas_object_raise(self.obj)
}

func (self *Win) EVASLower() () {
  C.evas_object_lower(self.obj)
}

func (self *Win) StackAbove(above EvasObjectInterface) () {
  var _c_above *C.Evas_Object
  if above != nil { _c_above = above.GetObj() }
  C.evas_object_stack_above(self.obj, _c_above)
}

func (self *Win) StackBelow(below EvasObjectInterface) () {
  var _c_below *C.Evas_Object
  if below != nil { _c_below = below.GetObj() }
  C.evas_object_stack_below(self.obj, _c_below)
}

func (self *Win) PassEventsSet(pass bool) () {
  _c_pass := (C.Eina_Bool)(0)
  if pass { _c_pass = (C.Eina_Bool)(1) }
  C.evas_object_pass_events_set(self.obj, _c_pass)
}

func (self *Win) RepeatEventsSet(repeat bool) () {
  _c_repeat := (C.Eina_Bool)(0)
  if repeat { _c_repeat = (C.Eina_Bool)(1) }
  C.evas_object_repeat_events_set(self.obj, _c_repeat)
}

func (self *Win) PropagateEventsSet(prop bool) () {
  _c_prop := (C.Eina_Bool)(0)
  if prop { _c_prop = (C.Eina_Bool)(1) }
  C.evas_object_propagate_events_set(self.obj, _c_prop)
}

func (self *Win) FreezeEventsSet(freeze bool) () {
  _c_freeze := (C.Eina_Bool)(0)
  if freeze { _c_freeze = (C.Eina_Bool)(1) }
  C.evas_object_freeze_events_set(self.obj, _c_freeze)
}

func (self *Win) MapEnableSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.evas_object_map_enable_set(self.obj, _c_enabled)
}

func (self *Win) MapSet(map_ *C.Evas_Map) () {
  C.evas_object_map_set(self.obj, map_)
}

func (self *Win) SizeHintMinSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_min_set(self.obj, w, h)
}

func (self *Win) SizeHintMaxSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_max_set(self.obj, w, h)
}

func (self *Win) SizeHintRequestSet(w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_request_set(self.obj, w, h)
}

func (self *Win) SizeHintAspectSet(aspect C.Evas_Aspect_Control, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_size_hint_aspect_set(self.obj, aspect, w, h)
}

func (self *Win) SizeHintAlignSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_align_set(self.obj, _c_x, _c_y)
}

func (self *Win) SizeHintWeightSet(x float64, y float64) () {
  _c_x := C.double(x)
  _c_y := C.double(y)
  C.evas_object_size_hint_weight_set(self.obj, _c_x, _c_y)
}

func (self *Win) SizeHintPaddingSet(l C.Evas_Coord, r C.Evas_Coord, t C.Evas_Coord, b C.Evas_Coord) () {
  C.evas_object_size_hint_padding_set(self.obj, l, r, t, b)
}

func (self *Win) DataSet(key string, data unsafe.Pointer) () {
  _c_key := C.CString(key)
  C.evas_object_data_set(self.obj, _c_key, data)
}

func (self *Win) DataDel(key string) (unsafe.Pointer) {
  _c_key := C.CString(key)
  _cgo_return_ := C.evas_object_data_del(self.obj, _c_key)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Win) PointerModeSet(setting C.Evas_Object_Pointer_Mode) () {
  C.evas_object_pointer_mode_set(self.obj, setting)
}

func (self *Win) AntiAliasSet(antialias bool) () {
  _c_antialias := (C.Eina_Bool)(0)
  if antialias { _c_antialias = (C.Eina_Bool)(1) }
  C.evas_object_anti_alias_set(self.obj, _c_antialias)
}

func (self *Win) EVASScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_scale_set(self.obj, _c_scale)
}

func (self *Win) RenderOpSet(op C.Evas_Render_Op) () {
  C.evas_object_render_op_set(self.obj, op)
}

func (self *Win) PreciseIsInsideSet(precise bool) () {
  _c_precise := (C.Eina_Bool)(0)
  if precise { _c_precise = (C.Eina_Bool)(1) }
  C.evas_object_precise_is_inside_set(self.obj, _c_precise)
}

func (self *Win) StaticClipSet(is_static_clip bool) () {
  _c_is_static_clip := (C.Eina_Bool)(0)
  if is_static_clip { _c_is_static_clip = (C.Eina_Bool)(1) }
  C.evas_object_static_clip_set(self.obj, _c_is_static_clip)
}

func (self *Win) ImageMemfileSet(data unsafe.Pointer, size int, format string, key string) () {
  _c_size := C.int(size)
  _c_format := C.CString(format)
  defer C.free(unsafe.Pointer(_c_format))
  _c_key := C.CString(key)
  defer C.free(unsafe.Pointer(_c_key))
  C.evas_object_image_memfile_set(self.obj, data, _c_size, _c_format, _c_key)
}

func (self *Win) ImageFileSet(file string, key string) () {
  _c_file := C.CString(file)
  _c_key := C.CString(key)
  C.evas_object_image_file_set(self.obj, _c_file, _c_key)
}

func (self *Win) ImageBorderSet(l int, r int, t int, b int) () {
  _c_l := C.int(l)
  _c_r := C.int(r)
  _c_t := C.int(t)
  _c_b := C.int(b)
  C.evas_object_image_border_set(self.obj, _c_l, _c_r, _c_t, _c_b)
}

func (self *Win) ImageBorderCenterFillSet(fill C.Evas_Border_Fill_Mode) () {
  C.evas_object_image_border_center_fill_set(self.obj, fill)
}

func (self *Win) ImageFilledSet(setting bool) () {
  _c_setting := (C.Eina_Bool)(0)
  if setting { _c_setting = (C.Eina_Bool)(1) }
  C.evas_object_image_filled_set(self.obj, _c_setting)
}

func (self *Win) ImageBorderScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.evas_object_image_border_scale_set(self.obj, _c_scale)
}

func (self *Win) ImageFillSet(x C.Evas_Coord, y C.Evas_Coord, w C.Evas_Coord, h C.Evas_Coord) () {
  C.evas_object_image_fill_set(self.obj, x, y, w, h)
}

func (self *Win) ImageFillSpreadSet(spread C.Evas_Fill_Spread) () {
  C.evas_object_image_fill_spread_set(self.obj, spread)
}

func (self *Win) ImageSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_size_set(self.obj, _c_w, _c_h)
}

func (self *Win) ImageDataSet(data unsafe.Pointer) () {
  C.evas_object_image_data_set(self.obj, data)
}

func (self *Win) ImageDataConvert(to_cspace C.Evas_Colorspace) (unsafe.Pointer) {
  _cgo_return_ := C.evas_object_image_data_convert(self.obj, to_cspace)
  _go_return_ := unsafe.Pointer(_cgo_return_)
  return _go_return_
}

func (self *Win) ImageDataCopySet(data unsafe.Pointer) () {
  C.evas_object_image_data_copy_set(self.obj, data)
}

func (self *Win) ImageDataUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_data_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Win) ImageAlphaSet(has_alpha bool) () {
  _c_has_alpha := (C.Eina_Bool)(0)
  if has_alpha { _c_has_alpha = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_set(self.obj, _c_has_alpha)
}

func (self *Win) ImageSmoothScaleSet(smooth_scale bool) () {
  _c_smooth_scale := (C.Eina_Bool)(0)
  if smooth_scale { _c_smooth_scale = (C.Eina_Bool)(1) }
  C.evas_object_image_smooth_scale_set(self.obj, _c_smooth_scale)
}

func (self *Win) ImagePreload(cancel bool) () {
  _c_cancel := (C.Eina_Bool)(0)
  if cancel { _c_cancel = (C.Eina_Bool)(1) }
  C.evas_object_image_preload(self.obj, _c_cancel)
}

func (self *Win) ImageReload() () {
  C.evas_object_image_reload(self.obj)
}

func (self *Win) ImagePixelsImport(pixels *C.Evas_Pixel_Import_Source) (bool) {
  _cgo_return_ := C.evas_object_image_pixels_import(self.obj, pixels)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) ImagePixelsDirtySet(dirty bool) () {
  _c_dirty := (C.Eina_Bool)(0)
  if dirty { _c_dirty = (C.Eina_Bool)(1) }
  C.evas_object_image_pixels_dirty_set(self.obj, _c_dirty)
}

func (self *Win) ImageLoadDpiSet(dpi float64) () {
  _c_dpi := C.double(dpi)
  C.evas_object_image_load_dpi_set(self.obj, _c_dpi)
}

func (self *Win) ImageLoadSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_size_set(self.obj, _c_w, _c_h)
}

func (self *Win) ImageLoadScaleDownSet(scale_down int) () {
  _c_scale_down := C.int(scale_down)
  C.evas_object_image_load_scale_down_set(self.obj, _c_scale_down)
}

func (self *Win) ImageLoadRegionSet(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_image_load_region_set(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Win) ImageLoadOrientationSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.evas_object_image_load_orientation_set(self.obj, _c_enable)
}

func (self *Win) ImageColorspaceSet(cspace C.Evas_Colorspace) () {
  C.evas_object_image_colorspace_set(self.obj, cspace)
}

func (self *Win) ImageNativeSurfaceSet(surf *C.Evas_Native_Surface) () {
  C.evas_object_image_native_surface_set(self.obj, surf)
}

func (self *Win) ImageVideoSurfaceSet(surf *C.Evas_Video_Surface) () {
  C.evas_object_image_video_surface_set(self.obj, surf)
}

func (self *Win) ImageScaleHintSet(hint C.Evas_Image_Scale_Hint) () {
  C.evas_object_image_scale_hint_set(self.obj, hint)
}

func (self *Win) ImageContentHintSet(hint C.Evas_Image_Content_Hint) () {
  C.evas_object_image_content_hint_set(self.obj, hint)
}

func (self *Win) ImageAlphaMaskSet(ismask bool) () {
  _c_ismask := (C.Eina_Bool)(0)
  if ismask { _c_ismask = (C.Eina_Bool)(1) }
  C.evas_object_image_alpha_mask_set(self.obj, _c_ismask)
}

func (self *Win) ImageSourceSet(src EvasObjectInterface) (bool) {
  var _c_src *C.Evas_Object
  if src != nil { _c_src = src.GetObj() }
  _cgo_return_ := C.evas_object_image_source_set(self.obj, _c_src)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) ImageSourceUnset() (bool) {
  _cgo_return_ := C.evas_object_image_source_unset(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) ImageAnimatedFrameSet(frame_num int) () {
  _c_frame_num := C.int(frame_num)
  C.evas_object_image_animated_frame_set(self.obj, _c_frame_num)
}

func (self *Win) TextFontSourceSet(font string) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_source_set(self.obj, _c_font)
}

func (self *Win) TextFontSet(font string, size C.Evas_Font_Size) () {
  _c_font := C.CString(font)
  C.evas_object_text_font_set(self.obj, _c_font, size)
}

func (self *Win) TextTextSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_text_text_set(self.obj, _c_text)
}

func (self *Win) TextBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_text_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Win) TextStyleSet(type_ C.Evas_Text_Style_Type) () {
  C.evas_object_text_style_set(self.obj, type_)
}

func (self *Win) TextShadowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_shadow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Win) TextGlowColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Win) TextGlow2ColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_glow2_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Win) TextOutlineColorSet(r int, g int, b int, a int) () {
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_text_outline_color_set(self.obj, _c_r, _c_g, _c_b, _c_a)
}

func (self *Win) TextblockStyleSet(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_set(self.obj, ts)
}

func (self *Win) TextblockStyleUserPush(ts *C.Evas_Textblock_Style) () {
  C.evas_object_textblock_style_user_push(self.obj, ts)
}

func (self *Win) TextblockStyleUserPop() () {
  C.evas_object_textblock_style_user_pop(self.obj)
}

func (self *Win) TextblockReplaceCharSet(ch string) () {
  _c_ch := C.CString(ch)
  C.evas_object_textblock_replace_char_set(self.obj, _c_ch)
}

func (self *Win) TextblockReplaceCharGet() (string) {
  _cgo_return_ := C.evas_object_textblock_replace_char_get(self.obj)
  _go_return_ := C.GoString(_cgo_return_)
  return _go_return_
}

func (self *Win) TextblockValignSet(align float64) () {
  _c_align := C.double(align)
  C.evas_object_textblock_valign_set(self.obj, _c_align)
}

func (self *Win) TextblockBidiDelimitersSet(delim string) () {
  _c_delim := C.CString(delim)
  C.evas_object_textblock_bidi_delimiters_set(self.obj, _c_delim)
}

func (self *Win) TextblockLegacyNewlineSet(mode bool) () {
  _c_mode := (C.Eina_Bool)(0)
  if mode { _c_mode = (C.Eina_Bool)(1) }
  C.evas_object_textblock_legacy_newline_set(self.obj, _c_mode)
}

func (self *Win) TextblockTextMarkupSet(text string) () {
  _c_text := C.CString(text)
  C.evas_object_textblock_text_markup_set(self.obj, _c_text)
}

func (self *Win) TextblockClear() () {
  C.evas_object_textblock_clear(self.obj)
}

func (self *Win) TextgridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_size_set(self.obj, _c_w, _c_h)
}

func (self *Win) TextgridFontSourceSet(font_source string) () {
  _c_font_source := C.CString(font_source)
  C.evas_object_textgrid_font_source_set(self.obj, _c_font_source)
}

func (self *Win) TextgridFontSet(font_name string, font_size C.Evas_Font_Size) () {
  _c_font_name := C.CString(font_name)
  C.evas_object_textgrid_font_set(self.obj, _c_font_name, font_size)
}

func (self *Win) TextgridPaletteSet(pal C.Evas_Textgrid_Palette, idx int, r int, g int, b int, a int) () {
  _c_idx := C.int(idx)
  _c_r := C.int(r)
  _c_g := C.int(g)
  _c_b := C.int(b)
  _c_a := C.int(a)
  C.evas_object_textgrid_palette_set(self.obj, pal, _c_idx, _c_r, _c_g, _c_b, _c_a)
}

func (self *Win) TextgridSupportedFontStylesSet(styles C.Evas_Textgrid_Font_Style) () {
  C.evas_object_textgrid_supported_font_styles_set(self.obj, styles)
}

func (self *Win) TextgridCellrowSet(y int, row *C.Evas_Textgrid_Cell) () {
  _c_y := C.int(y)
  C.evas_object_textgrid_cellrow_set(self.obj, _c_y, row)
}

func (self *Win) TextgridUpdateAdd(x int, y int, w int, h int) () {
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_textgrid_update_add(self.obj, _c_x, _c_y, _c_w, _c_h)
}

func (self *Win) LineXySet(x1 C.Evas_Coord, y1 C.Evas_Coord, x2 C.Evas_Coord, y2 C.Evas_Coord) () {
  C.evas_object_line_xy_set(self.obj, x1, y1, x2, y2)
}

func (self *Win) PolygonPointAdd(x C.Evas_Coord, y C.Evas_Coord) () {
  C.evas_object_polygon_point_add(self.obj, x, y)
}

func (self *Win) PolygonPointsClear() () {
  C.evas_object_polygon_points_clear(self.obj)
}

func (self *Win) IsFrameObjectSet(is_frame bool) () {
  _c_is_frame := (C.Eina_Bool)(0)
  if is_frame { _c_is_frame = (C.Eina_Bool)(1) }
  C.evas_object_is_frame_object_set(self.obj, _c_is_frame)
}

func (self *Win) IsFrameObjectGet() (bool) {
  _cgo_return_ := C.evas_object_is_frame_object_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) SmartMemberAdd(smart_obj EvasObjectInterface) () {
  var _c_smart_obj *C.Evas_Object
  if smart_obj != nil { _c_smart_obj = smart_obj.GetObj() }
  C.evas_object_smart_member_add(self.obj, _c_smart_obj)
}

func (self *Win) SmartMemberDel() () {
  C.evas_object_smart_member_del(self.obj)
}

func (self *Win) SmartDataSet(data unsafe.Pointer) () {
  C.evas_object_smart_data_set(self.obj, data)
}

func (self *Win) SmartCallbackCall(event string, event_info unsafe.Pointer) () {
  _c_event := C.CString(event)
  C.evas_object_smart_callback_call(self.obj, _c_event, event_info)
}

func (self *Win) SmartCallbacksDescriptionsSet(descriptions *C.Evas_Smart_Cb_Description) (bool) {
  _cgo_return_ := C.evas_object_smart_callbacks_descriptions_set(self.obj, descriptions)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) SmartChanged() () {
  C.evas_object_smart_changed(self.obj)
}

func (self *Win) SmartNeedRecalculateSet(value bool) () {
  _c_value := (C.Eina_Bool)(0)
  if value { _c_value = (C.Eina_Bool)(1) }
  C.evas_object_smart_need_recalculate_set(self.obj, _c_value)
}

func (self *Win) SmartCalculate() () {
  C.evas_object_smart_calculate(self.obj)
}

func (self *Win) SmartMoveChildrenRelative(dx C.Evas_Coord, dy C.Evas_Coord) () {
  C.evas_object_smart_move_children_relative(self.obj, dx, dy)
}

func (self *Win) SmartClippedClipperGet() (*EvasObject) {
  _cgo_return_ := C.evas_object_smart_clipped_clipper_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) BoxAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_box_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) BoxLayoutHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_horizontal(self.obj, priv, data)
}

func (self *Win) BoxLayoutVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_vertical(self.obj, priv, data)
}

func (self *Win) BoxLayoutHomogeneousVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_vertical(self.obj, priv, data)
}

func (self *Win) BoxLayoutHomogeneousHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_horizontal(self.obj, priv, data)
}

func (self *Win) BoxLayoutHomogeneousMaxSizeHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_horizontal(self.obj, priv, data)
}

func (self *Win) BoxLayoutHomogeneousMaxSizeVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_homogeneous_max_size_vertical(self.obj, priv, data)
}

func (self *Win) BoxLayoutFlowHorizontal(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_horizontal(self.obj, priv, data)
}

func (self *Win) BoxLayoutFlowVertical(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_flow_vertical(self.obj, priv, data)
}

func (self *Win) BoxLayoutStack(priv *C.Evas_Object_Box_Data, data unsafe.Pointer) () {
  C.evas_object_box_layout_stack(self.obj, priv, data)
}

func (self *Win) BoxAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_box_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Win) BoxPaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_box_padding_set(self.obj, horizontal, vertical)
}

func (self *Win) BoxAppend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_append(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Win) BoxPrepend(child EvasObjectInterface) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_prepend(self.obj, _c_child)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Win) BoxInsertBefore(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_before(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Win) BoxInsertAfter(child EvasObjectInterface, reference *C.Evas_Object) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_insert_after(self.obj, _c_child, reference)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Win) BoxInsertAt(child EvasObjectInterface, pos uint) (*C.Evas_Object_Box_Option) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_insert_at(self.obj, _c_child, _c_pos)
  _go_return_ := _cgo_return_
  return _go_return_
}

func (self *Win) BoxRemove(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_box_remove(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) BoxRemoveAt(pos uint) (bool) {
  _c_pos := C.uint(pos)
  _cgo_return_ := C.evas_object_box_remove_at(self.obj, _c_pos)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) BoxRemoveAll(clear bool) (bool) {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_box_remove_all(self.obj, _c_clear)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) TableAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_table_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) TableHomogeneousSet(homogeneous C.Evas_Object_Table_Homogeneous_Mode) () {
  C.evas_object_table_homogeneous_set(self.obj, homogeneous)
}

func (self *Win) TablePaddingSet(horizontal C.Evas_Coord, vertical C.Evas_Coord) () {
  C.evas_object_table_padding_set(self.obj, horizontal, vertical)
}

func (self *Win) TableAlignSet(horizontal float64, vertical float64) () {
  _c_horizontal := C.double(horizontal)
  _c_vertical := C.double(vertical)
  C.evas_object_table_align_set(self.obj, _c_horizontal, _c_vertical)
}

func (self *Win) TableMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_table_mirrored_set(self.obj, _c_mirrored)
}

func (self *Win) TablePack(child EvasObjectInterface, col uint, row uint, colspan uint, rowspan uint) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_col := C.ushort(col)
  _c_row := C.ushort(row)
  _c_colspan := C.ushort(colspan)
  _c_rowspan := C.ushort(rowspan)
  _cgo_return_ := C.evas_object_table_pack(self.obj, _c_child, _c_col, _c_row, _c_colspan, _c_rowspan)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) TableUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_table_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) TableClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_table_clear(self.obj, _c_clear)
}

func (self *Win) GridAddTo() (*EvasObject) {
  _cgo_return_ := C.evas_object_grid_add_to(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) GridSizeSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.evas_object_grid_size_set(self.obj, _c_w, _c_h)
}

func (self *Win) GridMirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.evas_object_grid_mirrored_set(self.obj, _c_mirrored)
}

func (self *Win) GridPack(child EvasObjectInterface, x int, y int, w int, h int) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _c_x := C.int(x)
  _c_y := C.int(y)
  _c_w := C.int(w)
  _c_h := C.int(h)
  _cgo_return_ := C.evas_object_grid_pack(self.obj, _c_child, _c_x, _c_y, _c_w, _c_h)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) GridUnpack(child EvasObjectInterface) (bool) {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  _cgo_return_ := C.evas_object_grid_unpack(self.obj, _c_child)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) GridClear(clear bool) () {
  _c_clear := (C.Eina_Bool)(0)
  if clear { _c_clear = (C.Eina_Bool)(1) }
  C.evas_object_grid_clear(self.obj, _c_clear)
}

func (self *Win) KeyGrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask, exclusive bool) (bool) {
  _c_keyname := C.CString(keyname)
  _c_exclusive := (C.Eina_Bool)(0)
  if exclusive { _c_exclusive = (C.Eina_Bool)(1) }
  _cgo_return_ := C.evas_object_key_grab(self.obj, _c_keyname, modifiers, not_modifiers, _c_exclusive)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) KeyUngrab(keyname string, modifiers C.Evas_Modifier_Mask, not_modifiers C.Evas_Modifier_Mask) () {
  _c_keyname := C.CString(keyname)
  C.evas_object_key_ungrab(self.obj, _c_keyname, modifiers, not_modifiers)
}

func (self *Win) DomainTranslatableTextPartSet(part string, domain string, text string) () {
  _c_part := C.CString(part)
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_domain_translatable_text_part_set(self.obj, _c_part, _c_domain, _c_text)
}

func (self *Win) TooltipShow() () {
  C.elm_object_tooltip_show(self.obj)
}

func (self *Win) TooltipHide() () {
  C.elm_object_tooltip_hide(self.obj)
}

func (self *Win) TooltipTextSet(text string) () {
  _c_text := C.CString(text)
  C.elm_object_tooltip_text_set(self.obj, _c_text)
}

func (self *Win) TooltipDomainTranslatableTextSet(domain string, text string) () {
  _c_domain := C.CString(domain)
  _c_text := C.CString(text)
  C.elm_object_tooltip_domain_translatable_text_set(self.obj, _c_domain, _c_text)
}

func (self *Win) TooltipUnset() () {
  C.elm_object_tooltip_unset(self.obj)
}

func (self *Win) TooltipStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_tooltip_style_set(self.obj, _c_style)
}

func (self *Win) TooltipWindowModeSet(disable bool) (bool) {
  _c_disable := (C.Eina_Bool)(0)
  if disable { _c_disable = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_object_tooltip_window_mode_set(self.obj, _c_disable)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) CnpSelectionClear(selection C.Elm_Sel_Type) (bool) {
  _cgo_return_ := C.elm_object_cnp_selection_clear(self.obj, selection)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) CursorSet(cursor string) () {
  _c_cursor := C.CString(cursor)
  C.elm_object_cursor_set(self.obj, _c_cursor)
}

func (self *Win) CursorUnset() () {
  C.elm_object_cursor_unset(self.obj)
}

func (self *Win) CursorStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_object_cursor_style_set(self.obj, _c_style)
}

func (self *Win) CursorThemeSearchEnabledSet(theme_search bool) () {
  _c_theme_search := (C.Eina_Bool)(0)
  if theme_search { _c_theme_search = (C.Eina_Bool)(1) }
  C.elm_object_cursor_theme_search_enabled_set(self.obj, _c_theme_search)
}

func (self *Win) FocusSet(focus bool) () {
  _c_focus := (C.Eina_Bool)(0)
  if focus { _c_focus = (C.Eina_Bool)(1) }
  C.elm_object_focus_set(self.obj, _c_focus)
}

func (self *Win) FocusAllowSet(enable bool) () {
  _c_enable := (C.Eina_Bool)(0)
  if enable { _c_enable = (C.Eina_Bool)(1) }
  C.elm_object_focus_allow_set(self.obj, _c_enable)
}

func (self *Win) FocusCustomChainSet(objs *C.Eina_List) () {
  C.elm_object_focus_custom_chain_set(self.obj, objs)
}

func (self *Win) FocusCustomChainUnset() () {
  C.elm_object_focus_custom_chain_unset(self.obj)
}

func (self *Win) FocusCustomChainAppend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_append(self.obj, _c_child, _c_relative_child)
}

func (self *Win) FocusCustomChainPrepend(child EvasObjectInterface, relative_child EvasObjectInterface) () {
  var _c_child *C.Evas_Object
  if child != nil { _c_child = child.GetObj() }
  var _c_relative_child *C.Evas_Object
  if relative_child != nil { _c_relative_child = relative_child.GetObj() }
  C.elm_object_focus_custom_chain_prepend(self.obj, _c_child, _c_relative_child)
}

func (self *Win) FocusNext(dir C.Elm_Focus_Direction) () {
  C.elm_object_focus_next(self.obj, dir)
}

func (self *Win) TreeFocusAllowSet(focusable bool) () {
  _c_focusable := (C.Eina_Bool)(0)
  if focusable { _c_focusable = (C.Eina_Bool)(1) }
  C.elm_object_tree_focus_allow_set(self.obj, _c_focusable)
}

func (self *Win) MirroredSet(mirrored bool) () {
  _c_mirrored := (C.Eina_Bool)(0)
  if mirrored { _c_mirrored = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_set(self.obj, _c_mirrored)
}

func (self *Win) MirroredAutomaticSet(automatic bool) () {
  _c_automatic := (C.Eina_Bool)(0)
  if automatic { _c_automatic = (C.Eina_Bool)(1) }
  C.elm_object_mirrored_automatic_set(self.obj, _c_automatic)
}

func (self *Win) PartTextSet(part string, text string) () {
  _c_part := C.CString(part)
  _c_text := C.CString(text)
  C.elm_object_part_text_set(self.obj, _c_part, _c_text)
}

func (self *Win) PartContentSet(part string, content EvasObjectInterface) () {
  _c_part := C.CString(part)
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_object_part_content_set(self.obj, _c_part, _c_content)
}

func (self *Win) PartContentUnset(part string) (*EvasObject) {
  _c_part := C.CString(part)
  _cgo_return_ := C.elm_object_part_content_unset(self.obj, _c_part)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) AccessInfoSet(txt string) () {
  _c_txt := C.CString(txt)
  C.elm_object_access_info_set(self.obj, _c_txt)
}

func (self *Win) StyleSet(style string) (bool) {
  _c_style := C.CString(style)
  _cgo_return_ := C.elm_object_style_set(self.obj, _c_style)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) DisabledSet(disabled bool) () {
  _c_disabled := (C.Eina_Bool)(0)
  if disabled { _c_disabled = (C.Eina_Bool)(1) }
  C.elm_object_disabled_set(self.obj, _c_disabled)
}

func (self *Win) SignalEmit(emission string, source string) () {
  _c_emission := C.CString(emission)
  _c_source := C.CString(source)
  C.elm_object_signal_emit(self.obj, _c_emission, _c_source)
}

func (self *Win) ScaleSet(scale float64) () {
  _c_scale := C.double(scale)
  C.elm_object_scale_set(self.obj, _c_scale)
}

func (self *Win) ScrollHoldPush() () {
  C.elm_object_scroll_hold_push(self.obj)
}

func (self *Win) ScrollHoldPop() () {
  C.elm_object_scroll_hold_pop(self.obj)
}

func (self *Win) ScrollFreezePush() () {
  C.elm_object_scroll_freeze_push(self.obj)
}

func (self *Win) ScrollFreezePop() () {
  C.elm_object_scroll_freeze_pop(self.obj)
}

func (self *Win) ScrollLockXSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_x_set(self.obj, _c_lock)
}

func (self *Win) ScrollLockYSet(lock bool) () {
  _c_lock := (C.Eina_Bool)(0)
  if lock { _c_lock = (C.Eina_Bool)(1) }
  C.elm_object_scroll_lock_y_set(self.obj, _c_lock)
}

func (self *Win) ThemeSet(th *C.Elm_Theme) () {
  C.elm_object_theme_set(self.obj, th)
}

func (self *Win) InwinAdd() (*EvasObject) {
  _cgo_return_ := C.elm_win_inwin_add(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) InwinActivate() () {
  C.elm_win_inwin_activate(self.obj)
}

func (self *Win) InwinContentSet(content EvasObjectInterface) () {
  var _c_content *C.Evas_Object
  if content != nil { _c_content = content.GetObj() }
  C.elm_win_inwin_content_set(self.obj, _c_content)
}

func (self *Win) InwinContentUnset() (*EvasObject) {
  _cgo_return_ := C.elm_win_inwin_content_unset(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) Add(name string, type_ C.Elm_Win_Type) (*EvasObject) {
  _c_name := C.CString(name)
  _cgo_return_ := C.elm_win_add(self.obj, _c_name, type_)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) ResizeObjectAdd(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_win_resize_object_add(self.obj, _c_subobj)
}

func (self *Win) ResizeObjectDel(subobj EvasObjectInterface) () {
  var _c_subobj *C.Evas_Object
  if subobj != nil { _c_subobj = subobj.GetObj() }
  C.elm_win_resize_object_del(self.obj, _c_subobj)
}

func (self *Win) TitleSet(title string) () {
  _c_title := C.CString(title)
  C.elm_win_title_set(self.obj, _c_title)
}

func (self *Win) IconNameSet(icon_name string) () {
  _c_icon_name := C.CString(icon_name)
  C.elm_win_icon_name_set(self.obj, _c_icon_name)
}

func (self *Win) RoleSet(role string) () {
  _c_role := C.CString(role)
  C.elm_win_role_set(self.obj, _c_role)
}

func (self *Win) IconObjectSet(icon EvasObjectInterface) () {
  var _c_icon *C.Evas_Object
  if icon != nil { _c_icon = icon.GetObj() }
  C.elm_win_icon_object_set(self.obj, _c_icon)
}

func (self *Win) AutodelSet(autodel bool) () {
  _c_autodel := (C.Eina_Bool)(0)
  if autodel { _c_autodel = (C.Eina_Bool)(1) }
  C.elm_win_autodel_set(self.obj, _c_autodel)
}

func (self *Win) Activate() () {
  C.elm_win_activate(self.obj)
}

func (self *Win) Lower() () {
  C.elm_win_lower(self.obj)
}

func (self *Win) Raise() () {
  C.elm_win_raise(self.obj)
}

func (self *Win) Center(h bool, v bool) () {
  _c_h := (C.Eina_Bool)(0)
  if h { _c_h = (C.Eina_Bool)(1) }
  _c_v := (C.Eina_Bool)(0)
  if v { _c_v = (C.Eina_Bool)(1) }
  C.elm_win_center(self.obj, _c_h, _c_v)
}

func (self *Win) BorderlessSet(borderless bool) () {
  _c_borderless := (C.Eina_Bool)(0)
  if borderless { _c_borderless = (C.Eina_Bool)(1) }
  C.elm_win_borderless_set(self.obj, _c_borderless)
}

func (self *Win) ShapedSet(shaped bool) () {
  _c_shaped := (C.Eina_Bool)(0)
  if shaped { _c_shaped = (C.Eina_Bool)(1) }
  C.elm_win_shaped_set(self.obj, _c_shaped)
}

func (self *Win) AlphaSet(alpha bool) () {
  _c_alpha := (C.Eina_Bool)(0)
  if alpha { _c_alpha = (C.Eina_Bool)(1) }
  C.elm_win_alpha_set(self.obj, _c_alpha)
}

func (self *Win) OverrideSet(override bool) () {
  _c_override := (C.Eina_Bool)(0)
  if override { _c_override = (C.Eina_Bool)(1) }
  C.elm_win_override_set(self.obj, _c_override)
}

func (self *Win) FullscreenSet(fullscreen bool) () {
  _c_fullscreen := (C.Eina_Bool)(0)
  if fullscreen { _c_fullscreen = (C.Eina_Bool)(1) }
  C.elm_win_fullscreen_set(self.obj, _c_fullscreen)
}

func (self *Win) MaximizedSet(maximized bool) () {
  _c_maximized := (C.Eina_Bool)(0)
  if maximized { _c_maximized = (C.Eina_Bool)(1) }
  C.elm_win_maximized_set(self.obj, _c_maximized)
}

func (self *Win) IconifiedSet(iconified bool) () {
  _c_iconified := (C.Eina_Bool)(0)
  if iconified { _c_iconified = (C.Eina_Bool)(1) }
  C.elm_win_iconified_set(self.obj, _c_iconified)
}

func (self *Win) WithdrawnSet(withdrawn bool) () {
  _c_withdrawn := (C.Eina_Bool)(0)
  if withdrawn { _c_withdrawn = (C.Eina_Bool)(1) }
  C.elm_win_withdrawn_set(self.obj, _c_withdrawn)
}

func (self *Win) UrgentSet(urgent bool) () {
  _c_urgent := (C.Eina_Bool)(0)
  if urgent { _c_urgent = (C.Eina_Bool)(1) }
  C.elm_win_urgent_set(self.obj, _c_urgent)
}

func (self *Win) DemandAttentionSet(demand_attention bool) () {
  _c_demand_attention := (C.Eina_Bool)(0)
  if demand_attention { _c_demand_attention = (C.Eina_Bool)(1) }
  C.elm_win_demand_attention_set(self.obj, _c_demand_attention)
}

func (self *Win) ModalSet(modal bool) () {
  _c_modal := (C.Eina_Bool)(0)
  if modal { _c_modal = (C.Eina_Bool)(1) }
  C.elm_win_modal_set(self.obj, _c_modal)
}

func (self *Win) AspectSet(aspect float64) () {
  _c_aspect := C.double(aspect)
  C.elm_win_aspect_set(self.obj, _c_aspect)
}

func (self *Win) SizeBaseSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_win_size_base_set(self.obj, _c_w, _c_h)
}

func (self *Win) SizeBaseGet() (int, int) {
  var _c_w_ C.int
  var _c_h_ C.int
  C.elm_win_size_base_get(self.obj, &_c_w_, &_c_h_)
  return int(_c_w_), int(_c_h_)
}

func (self *Win) SizeStepSet(w int, h int) () {
  _c_w := C.int(w)
  _c_h := C.int(h)
  C.elm_win_size_step_set(self.obj, _c_w, _c_h)
}

func (self *Win) SizeStepGet() (int, int) {
  var _c_w_ C.int
  var _c_h_ C.int
  C.elm_win_size_step_get(self.obj, &_c_w_, &_c_h_)
  return int(_c_w_), int(_c_h_)
}

func (self *Win) LayerSet(layer int) () {
  _c_layer := C.int(layer)
  C.elm_win_layer_set(self.obj, _c_layer)
}

func (self *Win) NorenderPush() () {
  C.elm_win_norender_push(self.obj)
}

func (self *Win) NorenderPop() () {
  C.elm_win_norender_pop(self.obj)
}

func (self *Win) NorenderGet() (int) {
  _cgo_return_ := C.elm_win_norender_get(self.obj)
  _go_return_ := int(_cgo_return_)
  return _go_return_
}

func (self *Win) Render() () {
  C.elm_win_render(self.obj)
}

func (self *Win) RotationSet(rotation int) () {
  _c_rotation := C.int(rotation)
  C.elm_win_rotation_set(self.obj, _c_rotation)
}

func (self *Win) RotationWithResizeSet(rotation int) () {
  _c_rotation := C.int(rotation)
  C.elm_win_rotation_with_resize_set(self.obj, _c_rotation)
}

func (self *Win) StickySet(sticky bool) () {
  _c_sticky := (C.Eina_Bool)(0)
  if sticky { _c_sticky = (C.Eina_Bool)(1) }
  C.elm_win_sticky_set(self.obj, _c_sticky)
}

func (self *Win) ConformantSet(conformant bool) () {
  _c_conformant := (C.Eina_Bool)(0)
  if conformant { _c_conformant = (C.Eina_Bool)(1) }
  C.elm_win_conformant_set(self.obj, _c_conformant)
}

func (self *Win) QuickpanelSet(quickpanel bool) () {
  _c_quickpanel := (C.Eina_Bool)(0)
  if quickpanel { _c_quickpanel = (C.Eina_Bool)(1) }
  C.elm_win_quickpanel_set(self.obj, _c_quickpanel)
}

func (self *Win) QuickpanelPriorityMajorSet(priority int) () {
  _c_priority := C.int(priority)
  C.elm_win_quickpanel_priority_major_set(self.obj, _c_priority)
}

func (self *Win) QuickpanelPriorityMinorSet(priority int) () {
  _c_priority := C.int(priority)
  C.elm_win_quickpanel_priority_minor_set(self.obj, _c_priority)
}

func (self *Win) QuickpanelZoneSet(zone int) () {
  _c_zone := C.int(zone)
  C.elm_win_quickpanel_zone_set(self.obj, _c_zone)
}

func (self *Win) PropFocusSkipSet(skip bool) () {
  _c_skip := (C.Eina_Bool)(0)
  if skip { _c_skip = (C.Eina_Bool)(1) }
  C.elm_win_prop_focus_skip_set(self.obj, _c_skip)
}

func (self *Win) IllumeCommandSend(command C.Elm_Illume_Command, params unsafe.Pointer) () {
  C.elm_win_illume_command_send(self.obj, command, params)
}

func (self *Win) InlinedImageObjectGet() (*EvasObject) {
  _cgo_return_ := C.elm_win_inlined_image_object_get(self.obj)
  _go_return_ := &EvasObject{_cgo_return_}
  return _go_return_
}

func (self *Win) ScreenConstrainSet(constrain bool) () {
  _c_constrain := (C.Eina_Bool)(0)
  if constrain { _c_constrain = (C.Eina_Bool)(1) }
  C.elm_win_screen_constrain_set(self.obj, _c_constrain)
}

func (self *Win) ScreenConstrainGet() (bool) {
  _cgo_return_ := C.elm_win_screen_constrain_get(self.obj)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

func (self *Win) FocusHighlightEnabledSet(enabled bool) () {
  _c_enabled := (C.Eina_Bool)(0)
  if enabled { _c_enabled = (C.Eina_Bool)(1) }
  C.elm_win_focus_highlight_enabled_set(self.obj, _c_enabled)
}

func (self *Win) FocusHighlightStyleSet(style string) () {
  _c_style := C.CString(style)
  C.elm_win_focus_highlight_style_set(self.obj, _c_style)
}

func (self *Win) KeyboardModeSet(mode C.Elm_Win_Keyboard_Mode) () {
  C.elm_win_keyboard_mode_set(self.obj, mode)
}

func (self *Win) KeyboardWinSet(is_keyboard bool) () {
  _c_is_keyboard := (C.Eina_Bool)(0)
  if is_keyboard { _c_is_keyboard = (C.Eina_Bool)(1) }
  C.elm_win_keyboard_win_set(self.obj, _c_is_keyboard)
}

func (self *Win) IndicatorModeSet(mode C.Elm_Win_Indicator_Mode) () {
  C.elm_win_indicator_mode_set(self.obj, mode)
}

func (self *Win) IndicatorOpacitySet(mode C.Elm_Win_Indicator_Opacity_Mode) () {
  C.elm_win_indicator_opacity_set(self.obj, mode)
}

func (self *Win) SocketListen(svcname string, svcnum int, svcsys bool) (bool) {
  _c_svcname := C.CString(svcname)
  _c_svcnum := C.int(svcnum)
  _c_svcsys := (C.Eina_Bool)(0)
  if svcsys { _c_svcsys = (C.Eina_Bool)(1) }
  _cgo_return_ := C.elm_win_socket_listen(self.obj, _c_svcname, _c_svcnum, _c_svcsys)
  _go_return_ := _cgo_return_ == (C.Eina_Bool)(1)
  return _go_return_
}

